<!DOCTYPE html>
<html lang="en"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8"><script src="Spring%20Data%20MongoDB%20-%20Reference%20Documentation_files/analytics.js" async=""></script><script src="Spring%20Data%20MongoDB%20-%20Reference%20Documentation_files/docsearchbarspring" async="" type="text/javascript"></script>
<meta charset="UTF-8">
<!--[if IE]><meta http-equiv="X-UA-Compatible" content="IE=edge"><![endif]-->
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="generator" content="Asciidoctor 1.5.2">
<meta name="author" content="Mark Pollack, Thomas Risberg, Oliver Gierke, Costin Leau, Jon Brisbin, Thomas Darimont, Christoph Strobl">
<title>Spring Data MongoDB - Reference Documentation</title>
<link rel="stylesheet" href="Spring%20Data%20MongoDB%20-%20Reference%20Documentation_files/spring.css">
<link rel="stylesheet" href="Spring%20Data%20MongoDB%20-%20Reference%20Documentation_files/font-awesome.css">
<link rel="stylesheet" href="Spring%20Data%20MongoDB%20-%20Reference%20Documentation_files/prettify.css">
<script id="undefined" src="Spring%20Data%20MongoDB%20-%20Reference%20Documentation_files/inpage_linkid.js" async="" type="text/javascript"></script><script src="Spring%20Data%20MongoDB%20-%20Reference%20Documentation_files/ga.js" async="" type="text/javascript"></script><script src="Spring%20Data%20MongoDB%20-%20Reference%20Documentation_files/prettify.js"></script>
<script>document.addEventListener('DOMContentLoaded', prettyPrint)</script>
<script type="text/javascript" src="Spring%20Data%20MongoDB%20-%20Reference%20Documentation_files/jquery-1.js"></script><link rel="stylesheet" href="Spring%20Data%20MongoDB%20-%20Reference%20Documentation_files/searchtool.css" type="text/css"><link rel="stylesheet" href="Spring%20Data%20MongoDB%20-%20Reference%20Documentation_files/searchtool_spring.css" type="text/css"><style>/* docsearchbarspring Training Classes */ .S2UniGeoipBanner {    margin-top: 0px !important;     letter-spacing: 0px !important;     line-height: 1.2 !important;     text-align: left !important;     text-indent: 0 !important;     text-transform: none !important;     word-spacing: 0px !important;    cursor: pointer !important;     left: 210px !important;     position: absolute !important;     top: 6px !important; }  .S2UniGeoipBanner .S2GPcourse_name {    font-size: 11px !important;    font-weight: bold !important;    font-family: Arial !important;    text-transform: uppercase !important;   color: #88f !important; }  .S2UniGeoipBanner .S2GPcity, .S2UniGeoipBanner .S2GPstart_date {   font-family: Arial !important;   font-size: 11px !important;   color: #bbb !important; }  .S2UniGeoipBanner .learn-more-button {   display:none !important; }</style></head>
<body class="book">
<div id="header">
<h1>Spring Data MongoDB - Reference Documentation</h1>
<div class="details">
<span id="author" class="author">Mark Pollack</span><br>
<span id="author2" class="author">Thomas Risberg</span><br>
<span id="author3" class="author">Oliver Gierke</span><br>
<span id="author4" class="author">Costin Leau</span><br>
<span id="author5" class="author">Jon Brisbin</span><br>
<span id="author6" class="author">Thomas Darimont</span><br>
<span id="author7" class="author">Christoph Strobl</span><br>
<span id="revnumber">version 1.7.0.RELEASE,</span>
<span id="revdate">2015-03-23</span>
</div>
</div>
<div id="content">
<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>© 2008-2015 The original authors.</p>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<em>Copies of this document may be made for your own use and for 
distribution to others, provided that you do not charge any fee for such
 copies and further provided that each copy contains this Copyright 
Notice, whether distributed in print or electronically.</em>
</td>
</tr>
</tbody></table>
</div>
<div id="toc" class="toc">
<div id="toctitle" class="title">Table of Contents</div>
<ul class="sectlevel0">
<li><a href="#preface">Preface</a>
<ul class="sectlevel1">
<li><a href="#get-started:first-steps:spring">1. Knowing Spring</a></li>
<li><a href="#get-started:first-steps:nosql">2. Knowing NoSQL and Document databases</a></li>
<li><a href="#requirements">3. Requirements</a></li>
<li><a href="#_additional_help_resources">4. Additional Help Resources</a>
<ul class="sectlevel2">
<li><a href="#get-started:help">4.1. Support</a>
<ul class="sectlevel3">
<li><a href="#get-started:help:community">4.1.1. Community Forum</a></li>
<li><a href="#get-started:help:professional">4.1.2. Professional Support</a></li>
</ul>
</li>
<li><a href="#get-started:up-to-date">4.2. Following Development</a></li>
</ul>
</li>
<li><a href="#new-features">5. New &amp; Noteworthy</a>
<ul class="sectlevel2">
<li><a href="#new-features.1-7-0">5.1. What’s new in Spring Data MongoDB 1.7</a></li>
</ul>
</li>
<li><a href="#repositories">6. Working with Spring Data Repositories</a>
<ul class="sectlevel2">
<li><a href="#repositories.core-concepts">6.1. Core concepts</a></li>
<li><a href="#repositories.query-methods">6.2. Query methods</a></li>
<li><a href="#repositories.definition">6.3. Defining repository interfaces</a>
<ul class="sectlevel3">
<li><a href="#repositories.definition-tuning">6.3.1. Fine-tuning repository definition</a></li>
</ul>
</li>
<li><a href="#repositories.query-methods.details">6.4. Defining query methods</a>
<ul class="sectlevel3">
<li><a href="#repositories.query-methods.query-lookup-strategies">6.4.1. Query lookup strategies</a></li>
<li><a href="#repositories.query-methods.query-creation">6.4.2. Query creation</a></li>
<li><a href="#repositories.query-methods.query-property-expressions">6.4.3. Property expressions</a></li>
<li><a href="#repositories.special-parameters">6.4.4. Special parameter handling</a></li>
<li><a href="#repositories.limit-query-result">6.4.5. Limiting query results</a></li>
<li><a href="#repositories.query-streaming">6.4.6. Streaming query results</a></li>
</ul>
</li>
<li><a href="#repositories.create-instances">6.5. Creating repository instances</a>
<ul class="sectlevel3">
<li><a href="#repositories.create-instances.spring">6.5.1. XML configuration</a></li>
<li><a href="#repositories.create-instances.java-config">6.5.2. JavaConfig</a></li>
<li><a href="#repositories.create-instances.standalone">6.5.3. Standalone usage</a></li>
</ul>
</li>
<li><a href="#repositories.custom-implementations">6.6. Custom implementations for Spring Data repositories</a>
<ul class="sectlevel3">
<li><a href="#repositories.single-repository-behaviour">6.6.1. Adding custom behavior to single repositories</a></li>
<li><a href="#repositories.custom-behaviour-for-all-repositories">6.6.2. Adding custom behavior to all repositories</a></li>
</ul>
</li>
<li><a href="#core.extensions">6.7. Spring Data extensions</a>
<ul class="sectlevel3">
<li><a href="#core.web">6.7.1. Web support</a></li>
<li><a href="#core.repository-populators">6.7.2. Repository populators</a></li>
<li><a href="#web.legacy">6.7.3. Legacy web support</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><a href="#reference">Reference Documentation</a>
<ul class="sectlevel1">
<li><a href="#introduction">7. Introduction</a>
<ul class="sectlevel2">
<li><a href="#_document_structure">7.1. Document Structure</a></li>
</ul>
</li>
<li><a href="#mongo.core">8. MongoDB support</a>
<ul class="sectlevel2">
<li><a href="#mongodb-getting-started">8.1. Getting Started</a></li>
<li><a href="#mongo.examples-repo">8.2. Examples Repository</a></li>
<li><a href="#mongodb-connectors">8.3. Connecting to MongoDB with Spring</a>
<ul class="sectlevel3">
<li><a href="#mongo.mongo-java-config">8.3.1. Registering a Mongo instance using Java based metadata</a></li>
<li><a href="#mongo.mongo-xml-config">8.3.2. Registering a Mongo instance using XML based metadata</a></li>
<li><a href="#mongo.mongo-db-factory">8.3.3. The MongoDbFactory interface</a></li>
<li><a href="#mongo.mongo-db-factory-java">8.3.4. Registering a MongoDbFactory instance using Java based metadata</a></li>
<li><a href="#mongo.mongo-db-factory-xml">8.3.5. Registering a MongoDbFactory instance using XML based metadata</a></li>
</ul>
</li>
<li><a href="#mongo-template">8.4. Introduction to MongoTemplate</a>
<ul class="sectlevel3">
<li><a href="#mongo-template.instantiating">8.4.1. Instantiating MongoTemplate</a></li>
<li><a href="#mongo-template.writeresultchecking">8.4.2. WriteResultChecking Policy</a></li>
<li><a href="#mongo-template.writeconcern">8.4.3. WriteConcern</a></li>
<li><a href="#mongo-template.writeconcernresolver">8.4.4. WriteConcernResolver</a></li>
</ul>
</li>
<li><a href="#mongo-template.save-update-remove">8.5. Saving, Updating, and Removing Documents</a>
<ul class="sectlevel3">
<li><a href="#mongo-template.id-handling">8.5.1. How the '_id' field is handled in the mapping layer</a></li>
<li><a href="#mongo-template.type-mapping">8.5.2. Type mapping</a></li>
<li><a href="#mongo-template.save-insert">8.5.3. Methods for saving and inserting documents</a></li>
<li><a href="#mongodb-template-update">8.5.4. Updating documents in a collection</a></li>
<li><a href="#mongo-template.upserts">8.5.5. Upserting documents in a collection</a></li>
<li><a href="#mongo-template.find-and-upsert">8.5.6. Finding and Upserting documents in a collection</a></li>
<li><a href="#mongo-template.delete">8.5.7. Methods for removing documents</a></li>
</ul>
</li>
<li><a href="#mongo.query">8.6. Querying Documents</a>
<ul class="sectlevel3">
<li><a href="#mongodb-template-query">8.6.1. Querying documents in a collection</a></li>
<li><a href="#mongo-template.querying">8.6.2. Methods for querying for documents</a></li>
<li><a href="#mongo.geospatial">8.6.3. GeoSpatial Queries</a></li>
<li><a href="#mongo.geo-json">8.6.4. GeoJSON Support</a></li>
<li><a href="#mongo.textsearch">8.6.5. Full Text Queries</a></li>
</ul>
</li>
<li><a href="#mongo.mapreduce">8.7. Map-Reduce Operations</a>
<ul class="sectlevel3">
<li><a href="#mongo.mapreduce.example">8.7.1. Example Usage</a></li>
</ul>
</li>
<li><a href="#mongo.server-side-scripts">8.8. Script Operations</a>
<ul class="sectlevel3">
<li><a href="#_example_usage">8.8.1. Example Usage</a></li>
</ul>
</li>
<li><a href="#mongo.group">8.9. Group Operations</a>
<ul class="sectlevel3">
<li><a href="#mongo.group.example">8.9.1. Example Usage</a></li>
</ul>
</li>
<li><a href="#mongo.aggregation">8.10. Aggregation Framework Support</a>
<ul class="sectlevel3">
<li><a href="#mongo.aggregation.basic-concepts">8.10.1. Basic Concepts</a></li>
<li><a href="#mongo.aggregation.supported-aggregation-operations">8.10.2. Supported Aggregation Operations</a></li>
<li><a href="#mongo.aggregation.projection">8.10.3. Projection Expressions</a></li>
</ul>
</li>
<li><a href="#mongo.custom-converters">8.11. Overriding default mapping with custom converters</a>
<ul class="sectlevel3">
<li><a href="#mongo.custom-converters.writer">8.11.1. Saving using a registered Spring Converter</a></li>
<li><a href="#mongo.custom-converters.reader">8.11.2. Reading using a Spring Converter</a></li>
<li><a href="#mongo.custom-converters.xml">8.11.3. Registering Spring Converters with the MongoConverter</a></li>
<li><a href="#mongo.converter-disambiguation">8.11.4. Converter disambiguation</a></li>
</ul>
</li>
<li><a href="#mongo-template.index-and-collections">8.12. Index and Collection management</a>
<ul class="sectlevel3">
<li><a href="#mongo-template.index-and-collections.index">8.12.1. Methods for creating an Index</a></li>
<li><a href="#mongo-template.index-and-collections.access">8.12.2. Accessing index information</a></li>
<li><a href="#mongo-template.index-and-collections.collection">8.12.3. Methods for working with a Collection</a></li>
</ul>
</li>
<li><a href="#mongo-template.commands">8.13. Executing Commands</a>
<ul class="sectlevel3">
<li><a href="#mongo-template.commands.execution">8.13.1. Methods for executing commands</a></li>
</ul>
</li>
<li><a href="#mongodb.mapping-usage.events">8.14. Lifecycle Events</a></li>
<li><a href="#mongo.exception">8.15. Exception Translation</a></li>
<li><a href="#mongo.executioncallback">8.16. Execution callbacks</a></li>
<li><a href="#gridfs">8.17. GridFS support</a></li>
</ul>
</li>
<li><a href="#mongo.repositories">9. MongoDB repositories</a>
<ul class="sectlevel2">
<li><a href="#mongo-repo-intro">9.1. Introduction</a></li>
<li><a href="#mongo-repo-usage">9.2. Usage</a></li>
<li><a href="#mongodb.repositories.queries">9.3. Query methods</a>
<ul class="sectlevel3">
<li><a href="#mongodb.repositories.queries.delete">9.3.1. Repository delete queries</a></li>
<li><a href="#mongodb.repositories.queries.geo-spatial">9.3.2. Geo-spatial repository queries</a></li>
<li><a href="#mongodb.repositories.queries.json-based">9.3.3. MongoDB JSON based query methods and field restriction</a></li>
<li><a href="#mongodb.repositories.queries.type-safe">9.3.4. Type-safe Query methods</a></li>
<li><a href="#mongodb.repositories.queries.full-text">9.3.5. Full-text search queries</a></li>
</ul>
</li>
<li><a href="#mongodb.repositories.misc">9.4. Miscellaneous</a>
<ul class="sectlevel3">
<li><a href="#mongodb.repositories.misc.cdi-integration">9.4.1. CDI Integration</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#auditing">10. Auditing</a>
<ul class="sectlevel2">
<li><a href="#auditing.basics">10.1. Basics</a>
<ul class="sectlevel3">
<li><a href="#auditing.annotations">10.1.1. Annotation based auditing metadata</a></li>
<li><a href="#auditing.interfaces">10.1.2. Interface-based auditing metadata</a></li>
<li><a href="#auditing.auditor-aware">10.1.3. AuditorAware</a></li>
</ul>
</li>
<li><a href="#mongo.auditing">10.2. General auditing configuration</a></li>
</ul>
</li>
<li><a href="#mapping-chapter">11. Mapping</a>
<ul class="sectlevel2">
<li><a href="#mapping-conventions">11.1. Convention based Mapping</a>
<ul class="sectlevel3">
<li><a href="#mapping.conventions.id-field">11.1.1. How the '_id' field is handled in the mapping layer</a></li>
</ul>
</li>
<li><a href="#mapping-configuration">11.2. Mapping Configuration</a></li>
<li><a href="#mapping-usage">11.3. Metadata based Mapping</a>
<ul class="sectlevel3">
<li><a href="#mapping-usage-annotations">11.3.1. Mapping annotation overview</a></li>
<li><a href="#mapping-custom-object-construction">11.3.2. Customized Object Construction</a></li>
<li><a href="#mapping-usage-indexes.compound-index">11.3.3. Compound Indexes</a></li>
<li><a href="#mapping-usage-indexes.text-index">11.3.4. Text Indexes</a></li>
<li><a href="#mapping-usage-references">11.3.5. Using DBRefs</a></li>
<li><a href="#mapping-usage-events">11.3.6. Mapping Framework Events</a></li>
<li><a href="#mapping-explicit-converters">11.3.7. Overriding Mapping with explicit Converters</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#mongo.cross.store">12. Cross Store support</a>
<ul class="sectlevel2">
<li><a href="#mongodb_cross-store-configuration">12.1. Cross Store Configuration</a></li>
<li><a href="#mongodb_cross-store-application">12.2. Writing the Cross Store Application</a></li>
</ul>
</li>
<li><a href="#mongo.logging">13. Logging support</a>
<ul class="sectlevel2">
<li><a href="#mongodb:logging-configuration">13.1. MongoDB Log4j Configuration</a></li>
</ul>
</li>
<li><a href="#mongo.jmx">14. JMX support</a>
<ul class="sectlevel2">
<li><a href="#mongodb:jmx-configuration">14.1. MongoDB JMX Configuration</a></li>
</ul>
</li>
<li><a href="#mongo.mongo-3">15. MongoDB 3.0 Support</a>
<ul class="sectlevel2">
<li><a href="#_using_spring_data_mongodb_with_mongodb_3_0">15.1. Using Spring Data MongoDB with MongoDB 3.0</a>
<ul class="sectlevel3">
<li><a href="#mongo.mongo-3.configuration">15.1.1. Configuration Options</a></li>
<li><a href="#mongo.mongo-3.write-concern">15.1.2. WriteConcern and WriteConcernChecking</a></li>
<li><a href="#mongo.mongo-3.authentication">15.1.3. Authentication</a></li>
<li><a href="#mongo.mongo-3.misc">15.1.4. Other things to be aware of</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><a href="#appendix">Appendix</a>
<ul class="sectlevel1">
<li><a href="#repositories.namespace-reference">Appendix A: Namespace reference</a>
<ul class="sectlevel2">
<li><a href="#populator.namespace-dao-config">The &lt;repositories /&gt; element</a></li>
</ul>
</li>
<li><a href="#populator.namespace-reference">Appendix B: Populators namespace reference</a>
<ul class="sectlevel2">
<li><a href="#namespace-dao-config">The &lt;populator /&gt; element</a></li>
</ul>
</li>
<li><a href="#repository-query-keywords">Appendix C: Repository query keywords</a>
<ul class="sectlevel2">
<li><a href="#_supported_query_keywords">Supported query keywords</a></li>
</ul>
</li>
<li><a href="#repository-query-return-types">Appendix D: Repository query return types</a>
<ul class="sectlevel2">
<li><a href="#_supported_query_return_types">Supported query return types</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
</div>
</div>
<h1 id="preface" class="sect0"><a class="anchor" href="#preface"></a>Preface</h1>
<div class="openblock partintro">
<div class="content">
<div class="paragraph">
<p>The Spring Data MongoDB project applies core Spring concepts to the 
development of solutions using the MongoDB document style data store. We
 provide a "template" as a high-level abstraction for storing and 
querying documents. You will notice similarities to the JDBC support in 
the Spring Framework.</p>
</div>
<div class="paragraph">
<p>This document is the reference guide for Spring Data - Document 
Support. It explains Document module concepts and semantics and the 
syntax for various stores namespaces.</p>
</div>
<div class="paragraph">
<p>This section provides some basic introduction to Spring and Document 
database. The rest of the document refers only to Spring Data Document 
features and assumes the user is familiar with document databases such 
as MongoDB and CouchDB as well as Spring concepts.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="get-started:first-steps:spring"><a class="anchor" href="#get-started:first-steps:spring"></a>1. Knowing Spring</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Spring Data uses Spring framework’s <a href="http://docs.spring.io/spring/docs/3.2.x/spring-framework-reference/html/spring-core.html">core</a> functionality, such as the <a href="http://docs.spring.io/spring/docs/3.2.x/spring-framework-reference/html/beans.html">IoC</a> container, <a href="http://docs.spring.io/spring/docs/3.2.x/spring-framework-reference/html/validation.html#core-convert">type conversion system</a>, <a href="http://docs.spring.io/spring/docs/3.2.x/spring-framework-reference/html/expressions.html">expression language</a>, <a href="http://docs.spring.io/spring/docs/3.2.x/spring-framework-reference/html/jmx.html">JMX integration</a>, and portable <a href="http://docs.spring.io/spring/docs/3.2.x/spring-framework-reference/html/dao.html#dao-exceptions">DAO exception hierarchy</a>.
 While it is not important to know the Spring APIs, understanding the 
concepts behind them is. At a minimum, the idea behind IoC should be 
familiar for whatever IoC container you choose to use.</p>
</div>
<div class="paragraph">
<p>The core functionality of the MongoDB and CouchDB support can be used
 directly, with no need to invoke the IoC services of the Spring 
Container. This is much like <code>JdbcTemplate</code> which can be used
 'standalone' without any other services of the Spring container. To 
leverage all the features of Spring Data document, such as the 
repository support, you will need to configure some parts of the library
 using Spring.</p>
</div>
<div class="paragraph">
<p>To learn more about Spring, you can refer to the comprehensive (and 
sometimes disarming) documentation that explains in detail the Spring 
Framework. There are a lot of articles, blog entries and books on the 
matter - take a look at the Spring framework <a href="http://spring.io/docs">home page </a> for more information.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="get-started:first-steps:nosql"><a class="anchor" href="#get-started:first-steps:nosql"></a>2. Knowing NoSQL and Document databases</h2>
<div class="sectionbody">
<div class="paragraph">
<p>NoSQL stores have taken the storage world by storm. It is a vast 
domain with a plethora of solutions, terms and patterns (to make things 
worth even the term itself has multiple <a href="http://www.google.com/search?q=nosoql+acronym">meanings</a>).
 While some of the principles are common, it is crucial that the user is
 familiar to some degree with the stores supported by DATADOC. The best 
way to get acquainted to this solutions is to read their documentation 
and follow their examples - it usually doesn’t take more then 5-10 
minutes to go through them and if you are coming from an RDMBS-only 
background many times these exercises can be an eye opener.</p>
</div>
<div class="paragraph">
<p>The jumping off ground for learning about MongoDB is <a href="http://www.mongodb.org/">www.mongodb.org</a>. Here is a list of other useful resources:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>The <a href="http://docs.mongodb.org/manual/">manual</a> introduces MongoDB and contains links to getting started guides, reference documentation and tutorials.</p>
</li>
<li>
<p>The <a href="http://try.mongodb.org/">online shell</a> provides a convenient way to interact with a MongoDB instance in combination with the online <a href="http://docs.mongodb.org/manual/tutorial/getting-started/">tutorial.</a></p>
</li>
<li>
<p>MongoDB <a href="http://docs.mongodb.org/ecosystem/drivers/java/">Java Language Center</a></p>
</li>
<li>
<p>Several <a href="http://www.mongodb.org/books">books</a> available for purchase</p>
</li>
<li>
<p>Karl Seguin’s online book: <a href="http://openmymind.net/mongodb.pdf">The Little MongoDB Book</a></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1">
<h2 id="requirements"><a class="anchor" href="#requirements"></a>3. Requirements</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Spring Data MongoDB 1.x binaries requires JDK level 6.0 and above, and <a href="http://spring.io/docs">Spring Framework</a> 4.0.x and above.</p>
</div>
<div class="paragraph">
<p>In terms of document stores, <a href="http://www.mongodb.org/">MongoDB</a> at least 2.6.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_additional_help_resources"><a class="anchor" href="#_additional_help_resources"></a>4. Additional Help Resources</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Learning a new framework is not always straight forward. In this 
section, we try to provide what we think is an easy to follow guide for 
starting with Spring Data Document module. However, if you encounter 
issues or you are just looking for an advice, feel free to use one of 
the links below:</p>
</div>
<div class="sect2">
<h3 id="get-started:help"><a class="anchor" href="#get-started:help"></a>4.1. Support</h3>
<div class="paragraph">
<p>There are a few support options available:</p>
</div>
<div class="sect3">
<h4 id="get-started:help:community"><a class="anchor" href="#get-started:help:community"></a>4.1.1. Community Forum</h4>
<div class="paragraph">
<p>Spring Data on Stackoverflow <a href="http://stackoverflow.com/questions/tagged/spring-data">Stackoverflow</a>
 is a tag for all Spring Data (not just Document) users to share 
information and help each other. Note that registration is needed <strong>only</strong> for posting.</p>
</div>
</div>
<div class="sect3">
<h4 id="get-started:help:professional"><a class="anchor" href="#get-started:help:professional"></a>4.1.2. Professional Support</h4>
<div class="paragraph">
<p>Professional, from-the-source support, with guaranteed response time, is available from <a href="http://pivotal.io/">Pivotal Sofware, Inc.</a>, the company behind Spring Data and Spring.</p>
</div>
</div>
</div>
<div class="sect2">
<h3 id="get-started:up-to-date"><a class="anchor" href="#get-started:up-to-date"></a>4.2. Following Development</h3>
<div class="paragraph">
<p>For information on the Spring Data Mongo source code repository, nightly builds and snapshot artifacts please see the <a href="http://projects.spring.io/spring-data-mongodb/">Spring Data Mongo homepage</a>.
 You can help make Spring Data best serve the needs of the Spring 
community by interacting with developers through the Community on <a href="http://stackoverflow.com/questions/tagged/spring-data">Stackoverflow</a>.
 To follow developer activity look for the mailing list information on 
the Spring Data Mongo homepage. If you encounter a bug or want to 
suggest an improvement, please create a ticket on the Spring Data issue <a href="https://jira.spring.io/browse/DATAMONGO">tracker</a>. To stay up to date with the latest news and announcements in the Spring eco system, subscribe to the Spring Community <a href="http://spring.io/">Portal</a>. Lastly, you can follow the SpringSource Data <a href="http://spring.io/blog">blog </a>or the project team on Twitter (<a href="http://twitter.com/SpringData">SpringData</a>).</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="new-features"><a class="anchor" href="#new-features"></a>5. New &amp; Noteworthy</h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="new-features.1-7-0"><a class="anchor" href="#new-features.1-7-0"></a>5.1. What’s new in Spring Data MongoDB 1.7</h3>
<div class="ulist">
<ul>
<li>
<p>Assert compatibility with MongoDB 3.0 and MongoDB Java Driver 3-beta3 (see: <a href="#mongo.mongo-3">MongoDB 3.0 Support</a>).</p>
</li>
<li>
<p>Support JSR-310 and ThreeTen back-port date/time types.</p>
</li>
<li>
<p>Allow <code>Stream</code> as query method return type (see: <a href="#mongodb.repositories.queries">Query methods</a>).</p>
</li>
<li>
<p>Added <a href="http://geojson.org/">GeoJSON</a> support in both domain types and queries (see: <a href="#mongo.geo-json">GeoJSON Support</a>).</p>
</li>
<li>
<p><code>QueryDslPredicateExcecutor</code> now supports <code>findAll(OrderSpecifier&lt;?&gt;… orders)</code>.</p>
</li>
<li>
<p>Support calling JavaScript functions via <a href="#mongo.server-side-scripts">Script Operations</a>.</p>
</li>
<li>
<p>Improve support for <code>CONTAINS</code> keyword on collection like properties.</p>
</li>
<li>
<p>Support for <code>$bit</code>, <code>$mul</code> and <code>$position</code> operators to <code>Update</code>.</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="repositories"><a class="anchor" href="#repositories"></a>6. Working with Spring Data Repositories</h2>
<div class="sectionbody">
<div class="paragraph">
<p>The goal of Spring Data repository abstraction is to significantly 
reduce the amount of boilerplate code required to implement data access 
layers for various persistence stores.</p>
</div>
<div class="admonitionblock important">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-important" title="Important"></i>
</td>
<td class="content">
<div class="paragraph">
<p><em>Spring Data repository documentation and your module</em></p>
</div>
<div class="paragraph">
<p>This chapter explains the core concepts and interfaces of Spring Data
 repositories. The information in this chapter is pulled from the Spring
 Data Commons module. It uses the configuration and code samples for the
 Java Persistence API (JPA) module. Adapt the XML namespace declaration 
and the types to be extended to the equivalents of the particular module
 that you are using. <a href="#repositories.namespace-reference">Namespace reference</a> covers XML configuration which is supported across all Spring Data modules supporting the repository API, <a href="#repository-query-keywords">Repository query keywords</a>
 covers the query method keywords supported by the repository 
abstraction in general. For detailed information on the specific 
features of your module, consult the chapter on that module of this 
document.</p>
</div>
</td>
</tr>
</tbody></table>
</div>
<div class="sect2">
<h3 id="repositories.core-concepts"><a class="anchor" href="#repositories.core-concepts"></a>6.1. Core concepts</h3>
<div class="paragraph">
<p>The central interface in Spring Data repository abstraction is <code>Repository</code>
 (probably not that much of a surprise). It takes the domain class to 
manage as well as the id type of the domain class as type arguments. 
This interface acts primarily as a marker interface to capture the types
 to work with and to help you to discover interfaces that extend this 
one. The <code>CrudRepository</code> provides sophisticated CRUD functionality for the entity class that is being managed.</p>
</div>
<div id="repositories.repository" class="exampleblock">
<div class="title">Example 1. CrudRepository interface</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">interface</span><span class="pln"> </span><span class="typ">CrudRepository</span><span class="pun">&lt;</span><span class="pln">T</span><span class="pun">,</span><span class="pln"> ID </span><span class="kwd">extends</span><span class="pln"> </span><span class="typ">Serializable</span><span class="pun">&gt;</span><span class="pln">
    </span><span class="kwd">extends</span><span class="pln"> </span><span class="typ">Repository</span><span class="pun">&lt;</span><span class="pln">T</span><span class="pun">,</span><span class="pln"> ID</span><span class="pun">&gt;</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

    </span><span class="pun">&lt;</span><span class="pln">S </span><span class="kwd">extends</span><span class="pln"> T</span><span class="pun">&gt;</span><span class="pln"> S save</span><span class="pun">(</span><span class="pln">S entity</span><span class="pun">);</span><span class="pln"> </span><i class="conum" data-value="1"></i><b><span class="pun">(</span><span class="lit">1</span><span class="pun">)</span></b><span class="pln">

    T findOne</span><span class="pun">(</span><span class="pln">ID primaryKey</span><span class="pun">);</span><span class="pln">       </span><i class="conum" data-value="2"></i><b><span class="pun">(</span><span class="lit">2</span><span class="pun">)</span></b><span class="pln">

    </span><span class="typ">Iterable</span><span class="pun">&lt;</span><span class="pln">T</span><span class="pun">&gt;</span><span class="pln"> findAll</span><span class="pun">();</span><span class="pln">          </span><i class="conum" data-value="3"></i><b><span class="pun">(</span><span class="lit">3</span><span class="pun">)</span></b><span class="pln">

    </span><span class="typ">Long</span><span class="pln"> count</span><span class="pun">();</span><span class="pln">                   </span><i class="conum" data-value="4"></i><b><span class="pun">(</span><span class="lit">4</span><span class="pun">)</span></b><span class="pln">

    </span><span class="kwd">void</span><span class="pln"> </span><span class="kwd">delete</span><span class="pun">(</span><span class="pln">T entity</span><span class="pun">);</span><span class="pln">          </span><i class="conum" data-value="5"></i><b><span class="pun">(</span><span class="lit">5</span><span class="pun">)</span></b><span class="pln">

    </span><span class="kwd">boolean</span><span class="pln"> exists</span><span class="pun">(</span><span class="pln">ID primaryKey</span><span class="pun">);</span><span class="pln">  </span><i class="conum" data-value="6"></i><b><span class="pun">(</span><span class="lit">6</span><span class="pun">)</span></b><span class="pln">

    </span><span class="com">// … more functionality omitted.</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Saves the given entity.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Returns the entity identified by the given id.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Returns all entities.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Returns the number of entities.</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>Deletes the given entity.</td>
</tr>
<tr>
<td><i class="conum" data-value="6"></i><b>6</b></td>
<td>Indicates whether an entity with the given id exists.</td>
</tr>
</tbody></table>
</div>
</div>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
We also provide persistence technology-specific abstractions like e.g. <code>JpaRepository</code> or <code>MongoRepository</code>. Those interfaces extend <code>CrudRepository</code>
 and expose the capabilities of the underlying persistence technology in
 addition to the rather generic persistence technology-agnostic 
interfaces like e.g. CrudRepository.
</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>On top of the <code>CrudRepository</code> there is a <code>PagingAndSortingRepository</code> abstraction that adds additional methods to ease paginated access to entities:</p>
</div>
<div class="exampleblock">
<div class="title">Example 2. PagingAndSortingRepository</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">interface</span><span class="pln"> </span><span class="typ">PagingAndSortingRepository</span><span class="pun">&lt;</span><span class="pln">T</span><span class="pun">,</span><span class="pln"> ID </span><span class="kwd">extends</span><span class="pln"> </span><span class="typ">Serializable</span><span class="pun">&gt;</span><span class="pln">
  </span><span class="kwd">extends</span><span class="pln"> </span><span class="typ">CrudRepository</span><span class="pun">&lt;</span><span class="pln">T</span><span class="pun">,</span><span class="pln"> ID</span><span class="pun">&gt;</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

  </span><span class="typ">Iterable</span><span class="pun">&lt;</span><span class="pln">T</span><span class="pun">&gt;</span><span class="pln"> findAll</span><span class="pun">(</span><span class="typ">Sort</span><span class="pln"> sort</span><span class="pun">);</span><span class="pln">

  </span><span class="typ">Page</span><span class="pun">&lt;</span><span class="pln">T</span><span class="pun">&gt;</span><span class="pln"> findAll</span><span class="pun">(</span><span class="typ">Pageable</span><span class="pln"> pageable</span><span class="pun">);</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>Accessing the second page of <code>User</code> by a page size of 20 you could simply do something like this:</p>
</div>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="typ">PagingAndSortingRepository</span><span class="pun">&lt;</span><span class="typ">User</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Long</span><span class="pun">&gt;</span><span class="pln"> repository </span><span class="pun">=</span><span class="pln"> </span><span class="com">// … get access to a bean</span><span class="pln">
</span><span class="typ">Page</span><span class="pun">&lt;</span><span class="typ">User</span><span class="pun">&gt;</span><span class="pln"> users </span><span class="pun">=</span><span class="pln"> repository</span><span class="pun">.</span><span class="pln">findAll</span><span class="pun">(</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">PageRequest</span><span class="pun">(</span><span class="lit">1</span><span class="pun">,</span><span class="pln"> </span><span class="lit">20</span><span class="pun">));</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>In addition to query methods, query derivation for both count and delete queries, is available.</p>
</div>
<div class="exampleblock">
<div class="title">Example 3. Derived Count Query</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">interface</span><span class="pln"> </span><span class="typ">UserRepository</span><span class="pln"> </span><span class="kwd">extends</span><span class="pln"> </span><span class="typ">CrudRepository</span><span class="pun">&lt;</span><span class="typ">User</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Long</span><span class="pun">&gt;</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

  </span><span class="typ">Long</span><span class="pln"> countByLastname</span><span class="pun">(</span><span class="typ">String</span><span class="pln"> lastname</span><span class="pun">);</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div>
</div>
</div>
</div>
<div class="exampleblock">
<div class="title">Example 4. Derived Delete Query</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">interface</span><span class="pln"> </span><span class="typ">UserRepository</span><span class="pln"> </span><span class="kwd">extends</span><span class="pln"> </span><span class="typ">CrudRepository</span><span class="pun">&lt;</span><span class="typ">User</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Long</span><span class="pun">&gt;</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

  </span><span class="typ">Long</span><span class="pln"> deleteByLastname</span><span class="pun">(</span><span class="typ">String</span><span class="pln"> lastname</span><span class="pun">);</span><span class="pln">

  </span><span class="typ">List</span><span class="pun">&lt;</span><span class="typ">User</span><span class="pun">&gt;</span><span class="pln"> removeByLastname</span><span class="pun">(</span><span class="typ">String</span><span class="pln"> lastname</span><span class="pun">);</span><span class="pln">

</span><span class="pun">}</span></code></pre>
</div>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="repositories.query-methods"><a class="anchor" href="#repositories.query-methods"></a>6.2. Query methods</h3>
<div class="paragraph">
<p>Standard CRUD functionality repositories usually have queries on the 
underlying datastore. With Spring Data, declaring those queries becomes a
 four-step process:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Declare an interface extending Repository or one of its subinterfaces
 and type it to the domain class and ID type that it will handle.</p>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="kwd">interface</span><span class="pln"> </span><span class="typ">PersonRepository</span><span class="pln"> </span><span class="kwd">extends</span><span class="pln"> </span><span class="typ">Repository</span><span class="pun">&lt;</span><span class="typ">User</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Long</span><span class="pun">&gt;</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="pun">…</span><span class="pln"> </span><span class="pun">}</span></code></pre>
</div>
</div>
</li>
<li>
<p>Declare query methods on the interface.</p>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="kwd">interface</span><span class="pln"> </span><span class="typ">PersonRepository</span><span class="pln"> </span><span class="kwd">extends</span><span class="pln"> </span><span class="typ">Repository</span><span class="pun">&lt;</span><span class="typ">User</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Long</span><span class="pun">&gt;</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  </span><span class="typ">List</span><span class="pun">&lt;</span><span class="typ">Person</span><span class="pun">&gt;</span><span class="pln"> findByLastname</span><span class="pun">(</span><span class="typ">String</span><span class="pln"> lastname</span><span class="pun">);</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div>
</div>
</li>
<li>
<p>Set up Spring to create proxy instances for those interfaces. Either via <a href="#repositories.create-instances.java-config">JavaConfig</a>:</p>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="kwd">import</span><span class="pln"> org</span><span class="pun">.</span><span class="pln">springframework</span><span class="pun">.</span><span class="pln">data</span><span class="pun">.</span><span class="pln">jpa</span><span class="pun">.</span><span class="pln">repository</span><span class="pun">.</span><span class="pln">config</span><span class="pun">.</span><span class="typ">EnableJpaRepositories</span><span class="pun">;</span><span class="pln">

</span><span class="lit">@EnableJpaRepositories</span><span class="pln">
</span><span class="kwd">class</span><span class="pln"> </span><span class="typ">Config</span><span class="pln"> </span><span class="pun">{}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>or via <a href="#repositories.create-instances">XML configuration</a>:</p>
</div>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-xml" data-lang="xml"><span class="pun">&lt;?</span><span class="pln">xml version</span><span class="pun">=</span><span class="str">"1.0"</span><span class="pln"> encoding</span><span class="pun">=</span><span class="str">"UTF-8"</span><span class="pun">?&gt;</span><span class="pln">
</span><span class="tag">&lt;beans</span><span class="pln"> </span><span class="atn">xmlns</span><span class="pun">=</span><span class="atv">"http://www.springframework.org/schema/beans"</span><span class="pln">
   </span><span class="atn">xmlns:xsi</span><span class="pun">=</span><span class="atv">"http://www.w3.org/2001/XMLSchema-instance"</span><span class="pln">
   </span><span class="atn">xmlns:jpa</span><span class="pun">=</span><span class="atv">"http://www.springframework.org/schema/data/jpa"</span><span class="pln">
   </span><span class="atn">xsi:schemaLocation</span><span class="pun">=</span><span class="atv">"http://www.springframework.org/schema/beans
     http://www.springframework.org/schema/beans/spring-beans.xsd
     http://www.springframework.org/schema/data/jpa
     http://www.springframework.org/schema/data/jpa/spring-jpa.xsd"</span><span class="tag">&gt;</span><span class="pln">

   </span><span class="tag">&lt;jpa:repositories</span><span class="pln"> </span><span class="atn">base-package</span><span class="pun">=</span><span class="atv">"com.acme.repositories"</span><span class="tag">/&gt;</span><span class="pln">

</span><span class="tag">&lt;/beans&gt;</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>The JPA namespace is used in this example. If you are using the 
repository abstraction for any other store, you need to change this to 
the appropriate namespace declaration of your store module which should 
be exchanging <code>jpa</code> in favor of, for example, <code>mongodb</code>.
 Also, note that the JavaConfig variant doesn’t configure a package 
explictly as the package of the annotated class is used by default. To 
customize the package to scan</p>
</div>
</li>
<li>
<p>Get the repository instance injected and use it.</p>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">SomeClient</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

  </span><span class="lit">@Autowired</span><span class="pln">
  </span><span class="kwd">private</span><span class="pln"> </span><span class="typ">PersonRepository</span><span class="pln"> repository</span><span class="pun">;</span><span class="pln">

  </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> doSomething</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="typ">List</span><span class="pun">&lt;</span><span class="typ">Person</span><span class="pun">&gt;</span><span class="pln"> persons </span><span class="pun">=</span><span class="pln"> repository</span><span class="pun">.</span><span class="pln">findByLastname</span><span class="pun">(</span><span class="str">"Matthews"</span><span class="pun">);</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div>
</div>
</li>
</ol>
</div>
<div class="paragraph">
<p>The sections that follow explain each step in detail.</p>
</div>
</div>
<div class="sect2">
<h3 id="repositories.definition"><a class="anchor" href="#repositories.definition"></a>6.3. Defining repository interfaces</h3>
<div class="paragraph">
<p>As a first step you define a domain class-specific repository 
interface. The interface must extend Repository and be typed to the 
domain class and an ID type. If you want to expose CRUD methods for that
 domain type, extend <code>CrudRepository</code> instead of <code>Repository</code>.</p>
</div>
<div class="sect3">
<h4 id="repositories.definition-tuning"><a class="anchor" href="#repositories.definition-tuning"></a>6.3.1. Fine-tuning repository definition</h4>
<div class="paragraph">
<p>Typically, your repository interface will extend <code>Repository</code>, <code>CrudRepository</code> or <code>PagingAndSortingRepository</code>. Alternatively, if you do not want to extend Spring Data interfaces, you can also annotate your repository interface with <code>@RepositoryDefinition</code>. Extending <code>CrudRepository</code>
 exposes a complete set of methods to manipulate your entities. If you 
prefer to be selective about the methods being exposed, simply copy the 
ones you want to expose from <code>CrudRepository</code> into your domain repository.</p>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
This allows you to define your own abstractions on top of the provided Spring Data Repositories functionality.
</td>
</tr>
</tbody></table>
</div>
<div class="exampleblock">
<div class="title">Example 5. Selectively exposing CRUD methods</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="lit">@NoRepositoryBean</span><span class="pln">
</span><span class="kwd">interface</span><span class="pln"> </span><span class="typ">MyBaseRepository</span><span class="pun">&lt;</span><span class="pln">T</span><span class="pun">,</span><span class="pln"> ID </span><span class="kwd">extends</span><span class="pln"> </span><span class="typ">Serializable</span><span class="pun">&gt;</span><span class="pln"> </span><span class="kwd">extends</span><span class="pln"> </span><span class="typ">Repository</span><span class="pun">&lt;</span><span class="pln">T</span><span class="pun">,</span><span class="pln"> ID</span><span class="pun">&gt;</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

  T findOne</span><span class="pun">(</span><span class="pln">ID id</span><span class="pun">);</span><span class="pln">

  T save</span><span class="pun">(</span><span class="pln">T entity</span><span class="pun">);</span><span class="pln">
</span><span class="pun">}</span><span class="pln">

</span><span class="kwd">interface</span><span class="pln"> </span><span class="typ">UserRepository</span><span class="pln"> </span><span class="kwd">extends</span><span class="pln"> </span><span class="typ">MyBaseRepository</span><span class="pun">&lt;</span><span class="typ">User</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Long</span><span class="pun">&gt;</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  </span><span class="typ">User</span><span class="pln"> findByEmailAddress</span><span class="pun">(</span><span class="typ">EmailAddress</span><span class="pln"> emailAddress</span><span class="pun">);</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>In this first step you defined a common base interface for all your domain repositories and exposed <code>findOne(…)</code> as well as <code>save(…)</code>.These
 methods will be routed into the base repository implementation of the 
store of your choice provided by Spring Data ,e.g. in the case if JPA <code>SimpleJpaRepository</code>, because they are matching the method signatures in <code>CrudRepository</code>. So the <code>UserRepository</code> will now be able to save users, and find single ones by id, as well as triggering a query to find <code>Users</code> by their email address.</p>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
Note, that the intermediate repository interface is annotated with <code>@NoRepositoryBean</code>. Make sure you add that annotation to all repository interfaces that Spring Data should not create instances for at runtime.
</td>
</tr>
</tbody></table>
</div>
</div>
</div>
<div class="sect2">
<h3 id="repositories.query-methods.details"><a class="anchor" href="#repositories.query-methods.details"></a>6.4. Defining query methods</h3>
<div class="paragraph">
<p>The repository proxy has two ways to derive a store-specific query 
from the method name. It can derive the query from the method name 
directly, or by using a manually defined query. Available options depend
 on the actual store. However, there’s got to be an strategy that 
decides what actual query is created. Let’s have a look at the available
 options.</p>
</div>
<div class="sect3">
<h4 id="repositories.query-methods.query-lookup-strategies"><a class="anchor" href="#repositories.query-methods.query-lookup-strategies"></a>6.4.1. Query lookup strategies</h4>
<div class="paragraph">
<p>The following strategies are available for the repository 
infrastructure to resolve the query. You can configure the strategy at 
the namespace through the <code>query-lookup-strategy</code> attribute in case of XML configuration or via the <code>queryLookupStrategy</code>
 attribute of the Enable${store}Repositories annotation in case of Java 
config. Some strategies may not be supported for particular datastores.</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>CREATE</code> attempts to construct a store-specific query from
 the query method name. The general approach is to remove a given set of
 well-known prefixes from the method name and parse the rest of the 
method. Read more about query construction in <a href="#repositories.query-methods.query-creation">Query creation</a>.</p>
</li>
<li>
<p><code>USE_DECLARED_QUERY</code> tries to find a declared query and 
will throw an exception in case it can’t find one. The query can be 
defined by an annotation somewhere or declared by other means. Consult 
the documentation of the specific store to find available options for 
that store. If the repository infrastructure does not find a declared 
query for the method at bootstrap time, it fails.</p>
</li>
<li>
<p><code>CREATE_IF_NOT_FOUND</code> (default) combines <code>CREATE</code> and <code>USE_DECLARED_QUERY</code>.
 It looks up a declared query first, and if no declared query is found, 
it creates a custom method name-based query. This is the default lookup 
strategy and thus will be used if you do not configure anything 
explicitly. It allows quick query definition by method names but also 
custom-tuning of these queries by introducing declared queries as 
needed.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="repositories.query-methods.query-creation"><a class="anchor" href="#repositories.query-methods.query-creation"></a>6.4.2. Query creation</h4>
<div class="paragraph">
<p>The query builder mechanism built into Spring Data repository 
infrastructure is useful for building constraining queries over entities
 of the repository. The mechanism strips the prefixes <code>find…By</code>, <code>read…By</code>, <code>query…By</code>, <code>count…By</code>, and <code>get…By</code> from the method and starts parsing the rest of it. The introducing clause can contain further expressions such as a <code>Distinct</code> to set a distinct flag on the query to be created. However, the first <code>By</code>
 acts as delimiter to indicate the start of the actual criteria. At a 
very basic level you can define conditions on entity properties and 
concatenate them with <code>And</code> and <code>Or</code>.</p>
</div>
<div class="exampleblock">
<div class="title">Example 6. Query creation from method names</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">interface</span><span class="pln"> </span><span class="typ">PersonRepository</span><span class="pln"> </span><span class="kwd">extends</span><span class="pln"> </span><span class="typ">Repository</span><span class="pun">&lt;</span><span class="typ">User</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Long</span><span class="pun">&gt;</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

  </span><span class="typ">List</span><span class="pun">&lt;</span><span class="typ">Person</span><span class="pun">&gt;</span><span class="pln"> findByEmailAddressAndLastname</span><span class="pun">(</span><span class="typ">EmailAddress</span><span class="pln"> emailAddress</span><span class="pun">,</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> lastname</span><span class="pun">);</span><span class="pln">

  </span><span class="com">// Enables the distinct flag for the query</span><span class="pln">
  </span><span class="typ">List</span><span class="pun">&lt;</span><span class="typ">Person</span><span class="pun">&gt;</span><span class="pln"> findDistinctPeopleByLastnameOrFirstname</span><span class="pun">(</span><span class="typ">String</span><span class="pln"> lastname</span><span class="pun">,</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> firstname</span><span class="pun">);</span><span class="pln">
  </span><span class="typ">List</span><span class="pun">&lt;</span><span class="typ">Person</span><span class="pun">&gt;</span><span class="pln"> findPeopleDistinctByLastnameOrFirstname</span><span class="pun">(</span><span class="typ">String</span><span class="pln"> lastname</span><span class="pun">,</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> firstname</span><span class="pun">);</span><span class="pln">

  </span><span class="com">// Enabling ignoring case for an individual property</span><span class="pln">
  </span><span class="typ">List</span><span class="pun">&lt;</span><span class="typ">Person</span><span class="pun">&gt;</span><span class="pln"> findByLastnameIgnoreCase</span><span class="pun">(</span><span class="typ">String</span><span class="pln"> lastname</span><span class="pun">);</span><span class="pln">
  </span><span class="com">// Enabling ignoring case for all suitable properties</span><span class="pln">
  </span><span class="typ">List</span><span class="pun">&lt;</span><span class="typ">Person</span><span class="pun">&gt;</span><span class="pln"> findByLastnameAndFirstnameAllIgnoreCase</span><span class="pun">(</span><span class="typ">String</span><span class="pln"> lastname</span><span class="pun">,</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> firstname</span><span class="pun">);</span><span class="pln">

  </span><span class="com">// Enabling static ORDER BY for a query</span><span class="pln">
  </span><span class="typ">List</span><span class="pun">&lt;</span><span class="typ">Person</span><span class="pun">&gt;</span><span class="pln"> findByLastnameOrderByFirstnameAsc</span><span class="pun">(</span><span class="typ">String</span><span class="pln"> lastname</span><span class="pun">);</span><span class="pln">
  </span><span class="typ">List</span><span class="pun">&lt;</span><span class="typ">Person</span><span class="pun">&gt;</span><span class="pln"> findByLastnameOrderByFirstnameDesc</span><span class="pun">(</span><span class="typ">String</span><span class="pln"> lastname</span><span class="pun">);</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>The actual result of parsing the method depends on the persistence 
store for which you create the query. However, there are some general 
things to notice.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>The expressions are usually property traversals combined with 
operators that can be concatenated. You can combine property expressions
 with <code>AND</code> and <code>OR</code>. You also get support for operators such as <code>Between</code>, <code>LessThan</code>, <code>GreaterThan</code>, <code>Like</code>
 for the property expressions. The supported operators can vary by 
datastore, so consult the appropriate part of your reference 
documentation.</p>
</li>
<li>
<p>The method parser supports setting an <code>IgnoreCase</code> flag for individual properties (for example, <code>findByLastnameIgnoreCase(…)</code>) or for all properties of a type that support ignoring case (usually <code>String</code> instances, for example, <code>findByLastnameAndFirstnameAllIgnoreCase(…)</code>).
 Whether ignoring cases is supported may vary by store, so consult the 
relevant sections in the reference documentation for the store-specific 
query method.</p>
</li>
<li>
<p>You can apply static ordering by appending an <code>OrderBy</code> clause to the query method that references a property and by providing a sorting direction (<code>Asc</code> or <code>Desc</code>). To create a query method that supports dynamic sorting, see <a href="#repositories.special-parameters">Special parameter handling</a>.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="repositories.query-methods.query-property-expressions"><a class="anchor" href="#repositories.query-methods.query-property-expressions"></a>6.4.3. Property expressions</h4>
<div class="paragraph">
<p>Property expressions can refer only to a direct property of the 
managed entity, as shown in the preceding example. At query creation 
time you already make sure that the parsed property is a property of the
 managed domain class. However, you can also define constraints by 
traversing nested properties. Assume a <code>Person</code> has an <code>Address</code> with a <code>ZipCode</code>. In that case a method name of</p>
</div>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="typ">List</span><span class="pun">&lt;</span><span class="typ">Person</span><span class="pun">&gt;</span><span class="pln"> findByAddressZipCode</span><span class="pun">(</span><span class="typ">ZipCode</span><span class="pln"> zipCode</span><span class="pun">);</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>creates the property traversal <code>x.address.zipCode</code>. The resolution algorithm starts with interpreting the entire part (<code>AddressZipCode</code>)
 as the property and checks the domain class for a property with that 
name (uncapitalized). If the algorithm succeeds it uses that property. 
If not, the algorithm splits up the source at the camel case parts from 
the right side into a head and a tail and tries to find the 
corresponding property, in our example, <code>AddressZip</code> and <code>Code</code>.
 If the algorithm finds a property with that head it takes the tail and 
continue building the tree down from there, splitting the tail up in the
 way just described. If the first split does not match, the algorithm 
move the split point to the left (<code>Address</code>, <code>ZipCode</code>) and continues.</p>
</div>
<div class="paragraph">
<p>Although this should work for most cases, it is possible for the algorithm to select the wrong property. Suppose the <code>Person</code> class has an <code>addressZip</code>
 property as well. The algorithm would match in the first split round 
already and essentially choose the wrong property and finally fail (as 
the type of <code>addressZip</code> probably has no <code>code</code> property).</p>
</div>
<div class="paragraph">
<p>To resolve this ambiguity you can use <code>_</code> inside your method name to manually define traversal points. So our method name would end up like so:</p>
</div>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="typ">List</span><span class="pun">&lt;</span><span class="typ">Person</span><span class="pun">&gt;</span><span class="pln"> findByAddress_ZipCode</span><span class="pun">(</span><span class="typ">ZipCode</span><span class="pln"> zipCode</span><span class="pun">);</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>If your property names contain underscores (e.g. <code>first_name</code>) you can escape the underscore in the method name with a second underscore. For a <code>first_name</code> property the query method would have to be named <code>findByFirst__name(…)</code>.</p>
</div>
</div>
<div class="sect3">
<h4 id="repositories.special-parameters"><a class="anchor" href="#repositories.special-parameters"></a>6.4.4. Special parameter handling</h4>
<div class="paragraph">
<p>To handle parameters in your query you simply define method 
parameters as already seen in the examples above. Besides that the 
infrastructure will recognize certain specific types like <code>Pageable</code> and <code>Sort</code> to apply pagination and sorting to your queries dynamically.</p>
</div>
<div class="exampleblock">
<div class="title">Example 7. Using Pageable, Slice and Sort in query methods</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="typ">Page</span><span class="pun">&lt;</span><span class="typ">User</span><span class="pun">&gt;</span><span class="pln"> findByLastname</span><span class="pun">(</span><span class="typ">String</span><span class="pln"> lastname</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Pageable</span><span class="pln"> pageable</span><span class="pun">);</span><span class="pln">

</span><span class="typ">Slice</span><span class="pun">&lt;</span><span class="typ">User</span><span class="pun">&gt;</span><span class="pln"> findByLastname</span><span class="pun">(</span><span class="typ">String</span><span class="pln"> lastname</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Pageable</span><span class="pln"> pageable</span><span class="pun">);</span><span class="pln">

</span><span class="typ">List</span><span class="pun">&lt;</span><span class="typ">User</span><span class="pun">&gt;</span><span class="pln"> findByLastname</span><span class="pun">(</span><span class="typ">String</span><span class="pln"> lastname</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Sort</span><span class="pln"> sort</span><span class="pun">);</span><span class="pln">

</span><span class="typ">List</span><span class="pun">&lt;</span><span class="typ">User</span><span class="pun">&gt;</span><span class="pln"> findByLastname</span><span class="pun">(</span><span class="typ">String</span><span class="pln"> lastname</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Pageable</span><span class="pln"> pageable</span><span class="pun">);</span></code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>The first method allows you to pass an <code>org.springframework.data.domain.Pageable</code> instance to the query method to dynamically add paging to your statically defined query. A <code>Page</code>
 knows about the total number of elements and pages available. It does 
so by the infrastructure triggering a count query to calculate the 
overall number. As this might be expensive depending on the store used, <code>Slice</code> can be used as return instead. A <code>Slice</code> only knows about whether there’s a next <code>Slice</code> available which might be just sufficient when walking thought a larger result set.</p>
</div>
<div class="paragraph">
<p>Sorting options are handled through the <code>Pageable</code> instance too. If you only need sorting, simply add an <code>org.springframework.data.domain.Sort</code> parameter to your method. As you also can see, simply returning a <code>List</code> is possible as well. In this case the additional metadata required to build the actual <code>Page</code>
 instance will not be created (which in turn means that the additional 
count query that would have been necessary not being issued) but rather 
simply restricts the query to look up only the given range of entities.</p>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
To find out how many pages you get for a query entirely you have to 
trigger an additional count query. By default this query will be derived
 from the query you actually trigger.
</td>
</tr>
</tbody></table>
</div>
</div>
<div class="sect3">
<h4 id="repositories.limit-query-result"><a class="anchor" href="#repositories.limit-query-result"></a>6.4.5. Limiting query results</h4>
<div class="paragraph">
<p>The results of query methods can be limited via the keywords <code>first</code> or <code>top</code>,
 which can be used interchangeably. An optional numeric value can be 
appended to top/first to specify the maximum result size to be returned.
If the number is left out, a result size of 1 is assumed.</p>
</div>
<div class="exampleblock">
<div class="title">Example 8. Limiting the result size of a query with <code>Top</code> and <code>First</code></div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="typ">User</span><span class="pln"> findFirstByOrderByLastnameAsc</span><span class="pun">();</span><span class="pln">

</span><span class="typ">User</span><span class="pln"> findTopByOrderByAgeDesc</span><span class="pun">();</span><span class="pln">

</span><span class="typ">Page</span><span class="pun">&lt;</span><span class="typ">User</span><span class="pun">&gt;</span><span class="pln"> queryFirst10ByLastname</span><span class="pun">(</span><span class="typ">String</span><span class="pln"> lastname</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Pageable</span><span class="pln"> pageable</span><span class="pun">);</span><span class="pln">

</span><span class="typ">Slice</span><span class="pun">&lt;</span><span class="typ">User</span><span class="pun">&gt;</span><span class="pln"> findTop3ByLastname</span><span class="pun">(</span><span class="typ">String</span><span class="pln"> lastname</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Pageable</span><span class="pln"> pageable</span><span class="pun">);</span><span class="pln">

</span><span class="typ">List</span><span class="pun">&lt;</span><span class="typ">User</span><span class="pun">&gt;</span><span class="pln"> findFirst10ByLastname</span><span class="pun">(</span><span class="typ">String</span><span class="pln"> lastname</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Sort</span><span class="pln"> sort</span><span class="pun">);</span><span class="pln">

</span><span class="typ">List</span><span class="pun">&lt;</span><span class="typ">User</span><span class="pun">&gt;</span><span class="pln"> findTop10ByLastname</span><span class="pun">(</span><span class="typ">String</span><span class="pln"> lastname</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Pageable</span><span class="pln"> pageable</span><span class="pun">);</span></code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>The limiting expressions also support the <code>Distinct</code> keyword. Also, for the queries limiting the result set to one instance, wrapping the result into an <code>Optional</code> is supported.</p>
</div>
<div class="paragraph">
<p>If pagination or slicing is applied to a limiting query pagination 
(and the calculation of the number of pages available) then it is 
applied within the limited result.</p>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
Note that limiting the results in combination with dynamic sorting via a <code>Sort</code> parameter allows to express query methods for the 'K' smallest as well as for the 'K' biggest elements.
</td>
</tr>
</tbody></table>
</div>
</div>
<div class="sect3">
<h4 id="repositories.query-streaming"><a class="anchor" href="#repositories.query-streaming"></a>6.4.6. Streaming query results</h4>
<div class="paragraph">
<p>The results of query methods can be processed incrementally by using a Java 8 <code>Stream&lt;T&gt;</code> as return type. Instead of simply wrapping the query results in a <code>Stream</code> data store specific methods are used to perform the streaming.</p>
</div>
<div class="exampleblock">
<div class="title">Example 9. Stream the result of a query with Java 8 <code>Stream&lt;T&gt;</code></div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="lit">@Query</span><span class="pun">(</span><span class="str">"select u from User u"</span><span class="pun">)</span><span class="pln">
</span><span class="typ">Stream</span><span class="pun">&lt;</span><span class="typ">User</span><span class="pun">&gt;</span><span class="pln"> findAllByCustomQueryAndStream</span><span class="pun">();</span><span class="pln">

</span><span class="typ">Stream</span><span class="pun">&lt;</span><span class="typ">User</span><span class="pun">&gt;</span><span class="pln"> readAllByFirstnameNotNull</span><span class="pun">();</span><span class="pln">

</span><span class="lit">@Query</span><span class="pun">(</span><span class="str">"select u from User u"</span><span class="pun">)</span><span class="pln">
</span><span class="typ">Stream</span><span class="pun">&lt;</span><span class="typ">User</span><span class="pun">&gt;</span><span class="pln"> streamAllPaged</span><span class="pun">(</span><span class="typ">Pageable</span><span class="pln"> pageable</span><span class="pun">);</span></code></pre>
</div>
</div>
</div>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
A <code>Stream</code> potentially wraps underlying data store specific 
resources and must therefore be closed after usage. You can either 
manually close the <code>Stream</code> using the <code>close()</code> method or by using a Java 7 try-with-resources block.
</td>
</tr>
</tbody></table>
</div>
<div class="exampleblock">
<div class="title">Example 10. Working with a <code>Stream&lt;T&gt;</code> result in a try-with-resources block</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="kwd">try</span><span class="pln"> </span><span class="pun">(</span><span class="typ">Stream</span><span class="pun">&lt;</span><span class="typ">User</span><span class="pun">&gt;</span><span class="pln"> stream </span><span class="pun">=</span><span class="pln"> repository</span><span class="pun">.</span><span class="pln">findAllByCustomQueryAndStream</span><span class="pun">())</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  stream</span><span class="pun">.</span><span class="pln">forEach</span><span class="pun">(…);</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div>
</div>
</div>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
Not all Spring Data modules currently support <code>Stream&lt;T&gt;</code> as a return type.
</td>
</tr>
</tbody></table>
</div>
</div>
</div>
<div class="sect2">
<h3 id="repositories.create-instances"><a class="anchor" href="#repositories.create-instances"></a>6.5. Creating repository instances</h3>
<div class="paragraph">
<p>In this section you create instances and bean definitions for the 
repository interfaces defined. One way to do so is using the Spring 
namespace that is shipped with each Spring Data module that supports the
 repository mechanism although we generally recommend to use the 
Java-Config style configuration.</p>
</div>
<div class="sect3">
<h4 id="repositories.create-instances.spring"><a class="anchor" href="#repositories.create-instances.spring"></a>6.5.1. XML configuration</h4>
<div class="paragraph">
<p>Each Spring Data module includes a repositories element that allows 
you to simply define a base package that Spring scans for you.</p>
</div>
<div class="exampleblock">
<div class="title">Example 11. Enabling Spring Data repositories via XML</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-xml" data-lang="xml"><span class="pun">&lt;?</span><span class="pln">xml version</span><span class="pun">=</span><span class="str">"1.0"</span><span class="pln"> encoding</span><span class="pun">=</span><span class="str">"UTF-8"</span><span class="pun">?&gt;</span><span class="pln">
</span><span class="tag">&lt;beans:beans</span><span class="pln"> </span><span class="atn">xmlns:beans</span><span class="pun">=</span><span class="atv">"http://www.springframework.org/schema/beans"</span><span class="pln">
  </span><span class="atn">xmlns:xsi</span><span class="pun">=</span><span class="atv">"http://www.w3.org/2001/XMLSchema-instance"</span><span class="pln">
  </span><span class="atn">xmlns</span><span class="pun">=</span><span class="atv">"http://www.springframework.org/schema/data/jpa"</span><span class="pln">
  </span><span class="atn">xsi:schemaLocation</span><span class="pun">=</span><span class="atv">"http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/data/jpa
    http://www.springframework.org/schema/data/jpa/spring-jpa.xsd"</span><span class="tag">&gt;</span><span class="pln">

  </span><span class="tag">&lt;repositories</span><span class="pln"> </span><span class="atn">base-package</span><span class="pun">=</span><span class="atv">"com.acme.repositories"</span><span class="pln"> </span><span class="tag">/&gt;</span><span class="pln">

</span><span class="tag">&lt;/beans:beans&gt;</span></code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>In the preceding example, Spring is instructed to scan <code>com.acme.repositories</code> and all its sub-packages for interfaces extending <code>Repository</code> or one of its sub-interfaces. For each interface found, the infrastructure registers the persistence technology-specific <code>FactoryBean</code>
 to create the appropriate proxies that handle invocations of the query 
methods. Each bean is registered under a bean name that is derived from 
the interface name, so an interface of <code>UserRepository</code> would be registered under <code>userRepository</code>. The <code>base-package</code> attribute allows wildcards, so that you can define a pattern of scanned packages.</p>
</div>
<div class="sect4">
<h5 id="_using_filters"><a class="anchor" href="#_using_filters"></a>Using filters</h5>
<div class="paragraph">
<p>By default the infrastructure picks up every interface extending the persistence technology-specific <code>Repository</code>
 sub-interface located under the configured base package and creates a 
bean instance for it. However, you might want more fine-grained control 
over which interfaces bean instances get created for. To do this you use
 <code>&lt;include-filter /&gt;</code> and <code>&lt;exclude-filter /&gt;</code> elements inside <code>&lt;repositories /&gt;</code>. The semantics are exactly equivalent to the elements in Spring’s context namespace. For details, see <a href="http://docs.spring.io/spring-data/mongodb/docs/current/reference/html/%7Bspring-framework-docs%7D/beans.html#beans-scanning-filters">Spring reference documentation</a> on these elements.</p>
</div>
<div class="paragraph">
<p>For example, to exclude certain interfaces from instantiation as repository, you could use the following configuration:</p>
</div>
<div class="exampleblock">
<div class="title">Example 12. Using exclude-filter element</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-xml" data-lang="xml"><span class="tag">&lt;repositories</span><span class="pln"> </span><span class="atn">base-package</span><span class="pun">=</span><span class="atv">"com.acme.repositories"</span><span class="tag">&gt;</span><span class="pln">
  </span><span class="tag">&lt;context:exclude-filter</span><span class="pln"> </span><span class="atn">type</span><span class="pun">=</span><span class="atv">"regex"</span><span class="pln"> </span><span class="atn">expression</span><span class="pun">=</span><span class="atv">".*SomeRepository"</span><span class="pln"> </span><span class="tag">/&gt;</span><span class="pln">
</span><span class="tag">&lt;/repositories&gt;</span></code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>This example excludes all interfaces ending in <code>SomeRepository</code> from being instantiated.</p>
</div>
</div>
</div>
<div class="sect3">
<h4 id="repositories.create-instances.java-config"><a class="anchor" href="#repositories.create-instances.java-config"></a>6.5.2. JavaConfig</h4>
<div class="paragraph">
<p>The repository infrastructure can also be triggered using a store-specific <code>@Enable${store}Repositories</code>
 annotation on a JavaConfig class. For an introduction into Java-based 
configuration of the Spring container, see the reference documentation.<span class="footnote">[<a id="_footnoteref_1" class="footnote" href="#_footnote_1" title="View footnote.">1</a>]</span></p>
</div>
<div class="paragraph">
<p>A sample configuration to enable Spring Data repositories looks something like this.</p>
</div>
<div class="exampleblock">
<div class="title">Example 13. Sample annotation based repository configuration</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="lit">@Configuration</span><span class="pln">
</span><span class="lit">@EnableJpaRepositories</span><span class="pun">(</span><span class="str">"com.acme.repositories"</span><span class="pun">)</span><span class="pln">
</span><span class="kwd">class</span><span class="pln"> </span><span class="typ">ApplicationConfiguration</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

  </span><span class="lit">@Bean</span><span class="pln">
  </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">EntityManagerFactory</span><span class="pln"> entityManagerFactory</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="com">// …</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div>
</div>
</div>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
The sample uses the JPA-specific annotation, which you would change 
according to the store module you actually use. The same applies to the 
definition of the <code>EntityManagerFactory</code> bean. Consult the sections covering the store-specific configuration.
</td>
</tr>
</tbody></table>
</div>
</div>
<div class="sect3">
<h4 id="repositories.create-instances.standalone"><a class="anchor" href="#repositories.create-instances.standalone"></a>6.5.3. Standalone usage</h4>
<div class="paragraph">
<p>You can also use the repository infrastructure outside of a Spring 
container, e.g. in CDI environments. You still need some Spring 
libraries in your classpath, but generally you can set up repositories 
programmatically as well. The Spring Data modules that provide 
repository support ship a persistence technology-specific 
RepositoryFactory that you can use as follows.</p>
</div>
<div class="exampleblock">
<div class="title">Example 14. Standalone usage of repository factory</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="typ">RepositoryFactorySupport</span><span class="pln"> factory </span><span class="pun">=</span><span class="pln"> </span><span class="pun">…</span><span class="pln"> </span><span class="com">// Instantiate factory here</span><span class="pln">
</span><span class="typ">UserRepository</span><span class="pln"> repository </span><span class="pun">=</span><span class="pln"> factory</span><span class="pun">.</span><span class="pln">getRepository</span><span class="pun">(</span><span class="typ">UserRepository</span><span class="pun">.</span><span class="kwd">class</span><span class="pun">);</span></code></pre>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="repositories.custom-implementations"><a class="anchor" href="#repositories.custom-implementations"></a>6.6. Custom implementations for Spring Data repositories</h3>
<div class="paragraph">
<p>Often it is necessary to provide a custom implementation for a few 
repository methods. Spring Data repositories easily allow you to provide
 custom repository code and integrate it with generic CRUD abstraction 
and query method functionality.</p>
</div>
<div class="sect3">
<h4 id="repositories.single-repository-behaviour"><a class="anchor" href="#repositories.single-repository-behaviour"></a>6.6.1. Adding custom behavior to single repositories</h4>
<div class="paragraph">
<p>To enrich a repository with custom functionality you first define an 
interface and an implementation for the custom functionality. Use the 
repository interface you provided to extend the custom interface.</p>
</div>
<div class="exampleblock">
<div class="title">Example 15. Interface for custom repository functionality</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="kwd">interface</span><span class="pln"> </span><span class="typ">UserRepositoryCustom</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> someCustomMethod</span><span class="pun">(</span><span class="typ">User</span><span class="pln"> user</span><span class="pun">);</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div>
</div>
</div>
</div>
<div class="exampleblock">
<div class="title">Example 16. Implementation of custom repository functionality</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="kwd">class</span><span class="pln"> </span><span class="typ">UserRepositoryImpl</span><span class="pln"> </span><span class="kwd">implements</span><span class="pln"> </span><span class="typ">UserRepositoryCustom</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

  </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> someCustomMethod</span><span class="pun">(</span><span class="typ">User</span><span class="pln"> user</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="com">// Your custom implementation</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div>
</div>
</div>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
The most important bit for the class to be found is the <code>Impl</code> postfix of the name on it compared to the core repository interface (see below).
</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>The implementation itself does not depend on Spring Data and can be a
 regular Spring bean. So you can use standard dependency injection 
behavior to inject references to other beans like a JdbTemplate, take 
part in aspects, and so on.</p>
</div>
<div class="exampleblock">
<div class="title">Example 17. Changes to the your basic repository interface</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="kwd">interface</span><span class="pln"> </span><span class="typ">UserRepository</span><span class="pln"> </span><span class="kwd">extends</span><span class="pln"> </span><span class="typ">CrudRepository</span><span class="pun">&lt;</span><span class="typ">User</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Long</span><span class="pun">&gt;,</span><span class="pln"> </span><span class="typ">UserRepositoryCustom</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

  </span><span class="com">// Declare query methods here</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>Let your standard repository interface extend the custom one. Doing 
so combines the CRUD and custom functionality and makes it available to 
clients.</p>
</div>
<div class="sect4">
<h5 id="_configuration"><a class="anchor" href="#_configuration"></a>Configuration</h5>
<div class="paragraph">
<p>If you use namespace configuration, the repository infrastructure 
tries to autodetect custom implementations by scanning for classes below
 the package we found a repository in. These classes need to follow the 
naming convention of appending the namespace element’s attribute <code>repository-impl-postfix</code> to the found repository interface name. This postfix defaults to <code>Impl</code>.</p>
</div>
<div class="exampleblock">
<div class="title">Example 18. Configuration example</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-xml" data-lang="xml"><span class="tag">&lt;repositories</span><span class="pln"> </span><span class="atn">base-package</span><span class="pun">=</span><span class="atv">"com.acme.repository"</span><span class="pln"> </span><span class="tag">/&gt;</span><span class="pln">

</span><span class="tag">&lt;repositories</span><span class="pln"> </span><span class="atn">base-package</span><span class="pun">=</span><span class="atv">"com.acme.repository"</span><span class="pln"> </span><span class="atn">repository-impl-postfix</span><span class="pun">=</span><span class="atv">"FooBar"</span><span class="pln"> </span><span class="tag">/&gt;</span></code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>The first configuration example will try to look up a class <code>com.acme.repository.UserRepositoryImpl</code> to act as custom repository implementation, whereas the second example will try to lookup <code>com.acme.repository.UserRepositoryFooBar</code>.</p>
</div>
<div class="sect5">
<h6 id="_manual_wiring"><a class="anchor" href="#_manual_wiring"></a>Manual wiring</h6>
<div class="paragraph">
<p>The approach just shown works well if your custom implementation uses
 annotation-based configuration and autowiring only, as it will be 
treated as any other Spring bean. If your custom implementation bean 
needs special wiring, you simply declare the bean and name it after the 
conventions just described. The infrastructure will then refer to the 
manually defined bean definition by name instead of creating one itself.</p>
</div>
<div class="exampleblock">
<div class="title">Example 19. Manual wiring of custom implementations</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-xml" data-lang="xml"><span class="tag">&lt;repositories</span><span class="pln"> </span><span class="atn">base-package</span><span class="pun">=</span><span class="atv">"com.acme.repository"</span><span class="pln"> </span><span class="tag">/&gt;</span><span class="pln">

</span><span class="tag">&lt;beans:bean</span><span class="pln"> </span><span class="atn">id</span><span class="pun">=</span><span class="atv">"userRepositoryImpl"</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"…"</span><span class="tag">&gt;</span><span class="pln">
  </span><span class="com">&lt;!-- further configuration --&gt;</span><span class="pln">
</span><span class="tag">&lt;/beans:bean&gt;</span></code></pre>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="repositories.custom-behaviour-for-all-repositories"><a class="anchor" href="#repositories.custom-behaviour-for-all-repositories"></a>6.6.2. Adding custom behavior to all repositories</h4>
<div class="paragraph">
<p>The preceding approach is not feasible when you want to add a single method to all your repository interfaces.</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>To add custom behavior to all repositories, you first add an intermediate interface to declare the shared behavior.</p>
<div class="exampleblock">
<div class="title">Example 20. An interface declaring custom shared behavior</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="lit">@NoRepositoryBean</span><span class="pln">
</span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">interface</span><span class="pln"> </span><span class="typ">MyRepository</span><span class="pun">&lt;</span><span class="pln">T</span><span class="pun">,</span><span class="pln"> ID </span><span class="kwd">extends</span><span class="pln"> </span><span class="typ">Serializable</span><span class="pun">&gt;</span><span class="pln">
  </span><span class="kwd">extends</span><span class="pln"> </span><span class="typ">PagingAndSortingRepository</span><span class="pun">&lt;</span><span class="pln">T</span><span class="pun">,</span><span class="pln"> ID</span><span class="pun">&gt;</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

  </span><span class="kwd">void</span><span class="pln"> sharedCustomMethod</span><span class="pun">(</span><span class="pln">ID id</span><span class="pun">);</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div>
</div>
</div>
</div>
</li>
<li>
<p>Now your individual repository interfaces will extend this intermediate interface instead of the <code>Repository</code> interface to include the functionality declared.</p>
</li>
<li>
<p>Next, create an implementation of the intermediate interface that 
extends the persistence technology-specific repository base class. This 
class will then act as a custom base class for the repository proxies.</p>
<div class="exampleblock">
<div class="title">Example 21. Custom repository base class</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">MyRepositoryImpl</span><span class="pun">&lt;</span><span class="pln">T</span><span class="pun">,</span><span class="pln"> ID </span><span class="kwd">extends</span><span class="pln"> </span><span class="typ">Serializable</span><span class="pun">&gt;</span><span class="pln">
  </span><span class="kwd">extends</span><span class="pln"> </span><span class="typ">SimpleJpaRepository</span><span class="pun">&lt;</span><span class="pln">T</span><span class="pun">,</span><span class="pln"> ID</span><span class="pun">&gt;</span><span class="pln"> </span><span class="kwd">implements</span><span class="pln"> </span><span class="typ">MyRepository</span><span class="pun">&lt;</span><span class="pln">T</span><span class="pun">,</span><span class="pln"> ID</span><span class="pun">&gt;</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

  </span><span class="kwd">private</span><span class="pln"> </span><span class="kwd">final</span><span class="pln"> </span><span class="typ">EntityManager</span><span class="pln"> entityManager</span><span class="pun">;</span><span class="pln">

  </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">MyRepositoryImpl</span><span class="pun">(</span><span class="typ">Class</span><span class="pun">&lt;</span><span class="pln">T</span><span class="pun">&gt;</span><span class="pln"> domainClass</span><span class="pun">,</span><span class="pln"> </span><span class="typ">EntityManager</span><span class="pln"> entityManager</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">super</span><span class="pun">(</span><span class="pln">domainClass</span><span class="pun">,</span><span class="pln"> entityManager</span><span class="pun">);</span><span class="pln">

    </span><span class="com">// Keep the EntityManager around to used from the newly introduced methods.</span><span class="pln">
    </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">entityManager </span><span class="pun">=</span><span class="pln"> entityManager</span><span class="pun">;</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">

  </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> sharedCustomMethod</span><span class="pun">(</span><span class="pln">ID id</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="com">// implementation goes here</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>The default behavior of the Spring <code>&lt;repositories /&gt;</code> namespace is to provide an implementation for all interfaces that fall under the <code>base-package</code>. This means that if left in its current state, an implementation instance of <code>MyRepository</code> will be created by Spring. This is of course not desired as it is just supposed to act as an intermediary between <code>Repository</code> and the actual repository interfaces you want to define for each entity. To exclude an interface that extends <code>Repository</code> from being instantiated as a repository instance, you can either annotate it with <code>@NoRepositoryBean</code> (as seen above) or move it outside of the configured <code>base-package</code>.</p>
</div>
</li>
<li>
<p>Then create a custom repository factory to replace the default <code>RepositoryFactoryBean</code> that will in turn produce a custom <code>RepositoryFactory</code>. The new repository factory will then provide your <code>MyRepositoryImpl</code> as the implementation of any interfaces that extend the <code>Repository</code> interface, replacing the <code>SimpleJpaRepository</code> implementation you just extended.</p>
<div class="exampleblock">
<div class="title">Example 22. Custom repository factory bean</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">MyRepositoryFactoryBean</span><span class="pun">&lt;</span><span class="pln">R </span><span class="kwd">extends</span><span class="pln"> </span><span class="typ">JpaRepository</span><span class="pun">&lt;</span><span class="pln">T</span><span class="pun">,</span><span class="pln"> I</span><span class="pun">&gt;,</span><span class="pln"> T</span><span class="pun">,</span><span class="pln">
  I </span><span class="kwd">extends</span><span class="pln"> </span><span class="typ">Serializable</span><span class="pun">&gt;</span><span class="pln"> </span><span class="kwd">extends</span><span class="pln"> </span><span class="typ">JpaRepositoryFactoryBean</span><span class="pun">&lt;</span><span class="pln">R</span><span class="pun">,</span><span class="pln"> T</span><span class="pun">,</span><span class="pln"> I</span><span class="pun">&gt;</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

  </span><span class="kwd">protected</span><span class="pln"> </span><span class="typ">RepositoryFactorySupport</span><span class="pln"> createRepositoryFactory</span><span class="pun">(</span><span class="typ">EntityManager</span><span class="pln"> em</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">MyRepositoryFactory</span><span class="pun">(</span><span class="pln">em</span><span class="pun">);</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">

  </span><span class="kwd">private</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">MyRepositoryFactory</span><span class="pun">&lt;</span><span class="pln">T</span><span class="pun">,</span><span class="pln"> I </span><span class="kwd">extends</span><span class="pln"> </span><span class="typ">Serializable</span><span class="pun">&gt;</span><span class="pln">
    </span><span class="kwd">extends</span><span class="pln"> </span><span class="typ">JpaRepositoryFactory</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

    </span><span class="kwd">private</span><span class="pln"> </span><span class="kwd">final</span><span class="pln"> </span><span class="typ">EntityManager</span><span class="pln"> em</span><span class="pun">;</span><span class="pln">

    </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">MyRepositoryFactory</span><span class="pun">(</span><span class="typ">EntityManager</span><span class="pln"> em</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

      </span><span class="kwd">super</span><span class="pun">(</span><span class="pln">em</span><span class="pun">);</span><span class="pln">
      </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">em </span><span class="pun">=</span><span class="pln"> em</span><span class="pun">;</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">

    </span><span class="kwd">protected</span><span class="pln"> </span><span class="typ">Object</span><span class="pln"> getTargetRepository</span><span class="pun">(</span><span class="typ">RepositoryMetadata</span><span class="pln"> metadata</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
      </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">MyRepositoryImpl</span><span class="pun">&lt;</span><span class="pln">T</span><span class="pun">,</span><span class="pln"> I</span><span class="pun">&gt;((</span><span class="typ">Class</span><span class="pun">&lt;</span><span class="pln">T</span><span class="pun">&gt;)</span><span class="pln"> metadata</span><span class="pun">.</span><span class="pln">getDomainClass</span><span class="pun">(),</span><span class="pln"> em</span><span class="pun">);</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">

    </span><span class="kwd">protected</span><span class="pln"> </span><span class="typ">Class</span><span class="pun">&lt;?&gt;</span><span class="pln"> getRepositoryBaseClass</span><span class="pun">(</span><span class="typ">RepositoryMetadata</span><span class="pln"> metadata</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
      </span><span class="kwd">return</span><span class="pln"> </span><span class="typ">MyRepositoryImpl</span><span class="pun">.</span><span class="kwd">class</span><span class="pun">;</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div>
</div>
</div>
</div>
</li>
<li>
<p>Finally, either declare beans of the custom factory directly or use the <code>factory-class</code> attribute of the Spring namespace or <code>@Enable…</code> annotation to instruct the repository infrastructure to use your custom factory implementation.</p>
<div class="exampleblock">
<div class="title">Example 23. Using the custom factory with the namespace</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-xml" data-lang="xml"><span class="tag">&lt;repositories</span><span class="pln"> </span><span class="atn">base-package</span><span class="pun">=</span><span class="atv">"com.acme.repository"</span><span class="pln">
  </span><span class="atn">factory-class</span><span class="pun">=</span><span class="atv">"com.acme.MyRepositoryFactoryBean"</span><span class="pln"> </span><span class="tag">/&gt;</span></code></pre>
</div>
</div>
</div>
</div>
<div class="exampleblock">
<div class="title">Example 24. Using the custom factory with the <code>@Enable…</code> annotation</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="lit">@EnableJpaRepositories</span><span class="pun">(</span><span class="pln">factoryClass </span><span class="pun">=</span><span class="pln"> </span><span class="str">"com.acme.MyRepositoryFactoryBean"</span><span class="pun">)</span><span class="pln">
</span><span class="kwd">class</span><span class="pln"> </span><span class="typ">Config</span><span class="pln"> </span><span class="pun">{}</span></code></pre>
</div>
</div>
</div>
</div>
</li>
</ol>
</div>
</div>
</div>
<div class="sect2">
<h3 id="core.extensions"><a class="anchor" href="#core.extensions"></a>6.7. Spring Data extensions</h3>
<div class="paragraph">
<p>This section documents a set of Spring Data extensions that enable 
Spring Data usage in a variety of contexts. Currently most of the 
integration is targeted towards Spring MVC.</p>
</div>
<div class="sect3">
<h4 id="core.web"><a class="anchor" href="#core.web"></a>6.7.1. Web support</h4>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
This section contains the documentation for the Spring Data web support 
as it is implemented as of Spring Data Commons in the 1.6 range. As it 
the newly introduced support changes quite a lot of things we kept the 
documentation of the former behavior in <a href="#web.legacy">Legacy web support</a>.
</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>Spring Data modules ships with a variety of web support if the module
 supports the repository programming model. The web related stuff 
requires Spring MVC JARs on the classpath, some of them even provide 
integration with Spring HATEOAS <span class="footnote">[<a id="_footnoteref_2" class="footnote" href="#_footnote_2" title="View footnote.">2</a>]</span>. In general, the integration support is enabled by using the <code>@EnableSpringDataWebSupport</code> annotation in your JavaConfig configuration class.</p>
</div>
<div class="exampleblock">
<div class="title">Example 25. Enabling Spring Data web support</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="lit">@Configuration</span><span class="pln">
</span><span class="lit">@EnableWebMvc</span><span class="pln">
</span><span class="lit">@EnableSpringDataWebSupport</span><span class="pln">
</span><span class="kwd">class</span><span class="pln"> </span><span class="typ">WebConfiguration</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="pun">}</span></code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>The <code>@EnableSpringDataWebSupport</code> annotation registers a 
few components we will discuss in a bit. It will also detect Spring 
HATEOAS on the classpath and register integration components for it as 
well if present.</p>
</div>
<div class="paragraph">
<p>Alternatively, if you are using XML configuration, register either <code>SpringDataWebSupport</code> or <code>HateoasAwareSpringDataWebSupport</code> as Spring beans:</p>
</div>
<div class="exampleblock">
<div class="title">Example 26. Enabling Spring Data web support in XML</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-xml" data-lang="xml"><span class="tag">&lt;bean</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"org.springframework.data.web.config.SpringDataWebConfiguration"</span><span class="pln"> </span><span class="tag">/&gt;</span><span class="pln">

</span><span class="com">&lt;!-- If you're using Spring HATEOAS as well register this one *instead* of the former --&gt;</span><span class="pln">
</span><span class="tag">&lt;bean</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"org.springframework.data.web.config.HateoasAwareSpringDataWebConfiguration"</span><span class="pln"> </span><span class="tag">/&gt;</span></code></pre>
</div>
</div>
</div>
</div>
<div class="sect4">
<h5 id="core.web.basic"><a class="anchor" href="#core.web.basic"></a>Basic web support</h5>
<div class="paragraph">
<p>The configuration setup shown above will register a few basic components:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>A <code>DomainClassConverter</code> to enable Spring MVC to resolve instances of repository managed domain classes from request parameters or path variables.</p>
</li>
<li>
<p><code>HandlerMethodArgumentResolver</code> implementations to let Spring MVC resolve Pageable and Sort instances from request parameters.</p>
</li>
</ul>
</div>
<div class="sect5">
<h6 id="_domainclassconverter"><a class="anchor" href="#_domainclassconverter"></a>DomainClassConverter</h6>
<div class="paragraph">
<p>The <code>DomainClassConverter</code> allows you to use domain types 
in your Spring MVC controller method signatures directly, so that you 
don’t have to manually lookup the instances via the repository:</p>
</div>
<div class="exampleblock">
<div class="title">Example 27. A Spring MVC controller using domain types in method signatures</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="lit">@Controller</span><span class="pln">
</span><span class="lit">@RequestMapping</span><span class="pun">(</span><span class="str">"/users"</span><span class="pun">)</span><span class="pln">
</span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">UserController</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

  </span><span class="lit">@RequestMapping</span><span class="pun">(</span><span class="str">"/{id}"</span><span class="pun">)</span><span class="pln">
  </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> showUserForm</span><span class="pun">(</span><span class="lit">@PathVariable</span><span class="pun">(</span><span class="str">"id"</span><span class="pun">)</span><span class="pln"> </span><span class="typ">User</span><span class="pln"> user</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Model</span><span class="pln"> model</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

    model</span><span class="pun">.</span><span class="pln">addAttribute</span><span class="pun">(</span><span class="str">"user"</span><span class="pun">,</span><span class="pln"> user</span><span class="pun">);</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> </span><span class="str">"userForm"</span><span class="pun">;</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>As you can see the method receives a User instance directly and no 
further lookup is necessary. The instance can be resolved by letting 
Spring MVC convert the path variable into the id type of the domain 
class first and eventually access the instance through calling <code>findOne(…)</code> on the repository instance registered for the domain type.</p>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
Currently the repository has to implement <code>CrudRepository</code> to be eligible to be discovered for conversion.
</td>
</tr>
</tbody></table>
</div>
</div>
<div class="sect5">
<h6 id="_handlermethodargumentresolvers_for_pageable_and_sort"><a class="anchor" href="#_handlermethodargumentresolvers_for_pageable_and_sort"></a>HandlerMethodArgumentResolvers for Pageable and Sort</h6>
<div class="paragraph">
<p>The configuration snippet above also registers a <code>PageableHandlerMethodArgumentResolver</code> as well as an instance of <code>SortHandlerMethodArgumentResolver</code>. The registration enables <code>Pageable</code> and <code>Sort</code> being valid controller method arguments</p>
</div>
<div class="exampleblock">
<div class="title">Example 28. Using Pageable as controller method argument</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="lit">@Controller</span><span class="pln">
</span><span class="lit">@RequestMapping</span><span class="pun">(</span><span class="str">"/users"</span><span class="pun">)</span><span class="pln">
</span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">UserController</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

  </span><span class="lit">@Autowired</span><span class="pln"> </span><span class="typ">UserRepository</span><span class="pln"> repository</span><span class="pun">;</span><span class="pln">

  </span><span class="lit">@RequestMapping</span><span class="pln">
  </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> showUsers</span><span class="pun">(</span><span class="typ">Model</span><span class="pln"> model</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Pageable</span><span class="pln"> pageable</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

    model</span><span class="pun">.</span><span class="pln">addAttribute</span><span class="pun">(</span><span class="str">"users"</span><span class="pun">,</span><span class="pln"> repository</span><span class="pun">.</span><span class="pln">findAll</span><span class="pun">(</span><span class="pln">pageable</span><span class="pun">));</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> </span><span class="str">"users"</span><span class="pun">;</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>This method signature will cause Spring MVC try to derive a Pageable 
instance from the request parameters using the following default 
configuration:</p>
</div>
<table class="tableblock frame-all grid-all">
<caption class="title">Table 1. Request parameters evaluated for Pageable instances</caption>
<colgroup>
<col>
<col>
</colgroup>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>page</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Page you want to retrieve.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>size</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Size of the page you want to retrieve.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>sort</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Properties that should be sorted by in the format <code>property,property(,ASC|DESC)</code>. Default sort direction is ascending. Use multiple <code>sort</code> parameters if you want to switch directions, e.g. <code>?sort=firstname&amp;sort=lastname,asc</code>.</p></td>
</tr>
</tbody>
</table>
<div class="paragraph">
<p>To customize this behavior extend either <code>SpringDataWebConfiguration</code> or the HATEOAS-enabled equivalent and override the <code>pageableResolver()</code> or <code>sortResolver()</code> methods and import your customized configuration file instead of using the <code>@Enable</code>-annotation.</p>
</div>
<div class="paragraph">
<p>In case you need multiple <code>Pageable</code> or <code>Sort</code> instances to be resolved from the request (for multiple tables, for example) you can use Spring’s <code>@Qualifier</code> annotation to distinguish one from another. The request parameters then have to be prefixed with <code>${qualifier}_</code>. So for a method signature like this:</p>
</div>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="kwd">public</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> showUsers</span><span class="pun">(</span><span class="typ">Model</span><span class="pln"> model</span><span class="pun">,</span><span class="pln">
      </span><span class="lit">@Qualifier</span><span class="pun">(</span><span class="str">"foo"</span><span class="pun">)</span><span class="pln"> </span><span class="typ">Pageable</span><span class="pln"> first</span><span class="pun">,</span><span class="pln">
      </span><span class="lit">@Qualifier</span><span class="pun">(</span><span class="str">"bar"</span><span class="pun">)</span><span class="pln"> </span><span class="typ">Pageable</span><span class="pln"> second</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="pun">…</span><span class="pln"> </span><span class="pun">}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>you have to populate <code>foo_page</code> and <code>bar_page</code> etc.</p>
</div>
<div class="paragraph">
<p>The default <code>Pageable</code> handed into the method is equivalent to a <code>new PageRequest(0, 20)</code> but can be customized using the <code>@PageableDefaults</code> annotation on the <code>Pageable</code> parameter.</p>
</div>
</div>
</div>
<div class="sect4">
<h5 id="core.web.pageables"><a class="anchor" href="#core.web.pageables"></a>Hypermedia support for Pageables</h5>
<div class="paragraph">
<p>Spring HATEOAS ships with a representation model class <code>PagedResources</code> that allows enrichting the content of a <code>Page</code> instance with the necessary <code>Page</code> metadata as well as links to let the clients easily navigate the pages. The conversion of a Page to a <code>PagedResources</code> is done by an implementation of the Spring HATEOAS <code>ResourceAssembler</code> interface, the <code>PagedResourcesAssembler</code>.</p>
</div>
<div class="exampleblock">
<div class="title">Example 29. Using a PagedResourcesAssembler as controller method argument</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="lit">@Controller</span><span class="pln">
</span><span class="kwd">class</span><span class="pln"> </span><span class="typ">PersonController</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

  </span><span class="lit">@Autowired</span><span class="pln"> </span><span class="typ">PersonRepository</span><span class="pln"> repository</span><span class="pun">;</span><span class="pln">

  </span><span class="lit">@RequestMapping</span><span class="pun">(</span><span class="pln">value </span><span class="pun">=</span><span class="pln"> </span><span class="str">"/persons"</span><span class="pun">,</span><span class="pln"> method </span><span class="pun">=</span><span class="pln"> </span><span class="typ">RequestMethod</span><span class="pun">.</span><span class="pln">GET</span><span class="pun">)</span><span class="pln">
  </span><span class="typ">HttpEntity</span><span class="pun">&lt;</span><span class="typ">PagedResources</span><span class="pun">&lt;</span><span class="typ">Person</span><span class="pun">&gt;&gt;</span><span class="pln"> persons</span><span class="pun">(</span><span class="typ">Pageable</span><span class="pln"> pageable</span><span class="pun">,</span><span class="pln">
    </span><span class="typ">PagedResourcesAssembler</span><span class="pln"> assembler</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

    </span><span class="typ">Page</span><span class="pun">&lt;</span><span class="typ">Person</span><span class="pun">&gt;</span><span class="pln"> persons </span><span class="pun">=</span><span class="pln"> repository</span><span class="pun">.</span><span class="pln">findAll</span><span class="pun">(</span><span class="pln">pageable</span><span class="pun">);</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">ResponseEntity</span><span class="pun">&lt;&gt;(</span><span class="pln">assembler</span><span class="pun">.</span><span class="pln">toResources</span><span class="pun">(</span><span class="pln">persons</span><span class="pun">),</span><span class="pln"> </span><span class="typ">HttpStatus</span><span class="pun">.</span><span class="pln">OK</span><span class="pun">);</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>Enabling the configuration as shown above allows the <code>PagedResourcesAssembler</code> to be used as controller method argument. Calling <code>toResources(…)</code> on it will cause the following:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>The content of the <code>Page</code> will become the content of the <code>PagedResources</code> instance.</p>
</li>
<li>
<p>The <code>PagedResources</code> will get a <code>PageMetadata</code> instance attached populated with information form the <code>Page</code> and the underlying <code>PageRequest</code>.</p>
</li>
<li>
<p>The <code>PagedResources</code> gets <code>prev</code> and <code>next</code>
 links attached depending on the page’s state. The links will point to 
the URI the method invoked is mapped to. The pagination parameters added
 to the method will match the setup of the <code>PageableHandlerMethodArgumentResolver</code> to make sure the links can be resolved later on.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Assume we have 30 Person instances in the database. You can now trigger a request <code>GET <a href="http://localhost:8080/persons" class="bare">http://localhost:8080/persons</a></code> and you’ll see something similar to this:</p>
</div>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-javascript" data-lang="javascript"><span class="pun">{</span><span class="pln"> </span><span class="str">"links"</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="str">"rel"</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="str">"next"</span><span class="pun">,</span><span class="pln">
                </span><span class="str">"href"</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="str">"</span><span class="pln">http</span><span class="pun">:</span><span class="com">//localhost:8080/persons?page=1&amp;size=20 }</span><span class="pln">
  </span><span class="pun">],</span><span class="pln">
  </span><span class="str">"content"</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="pln">
     </span><span class="pun">…</span><span class="pln"> </span><span class="com">// 20 Person instances rendered here</span><span class="pln">
  </span><span class="pun">],</span><span class="pln">
  </span><span class="str">"pageMetadata"</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="str">"size"</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="lit">20</span><span class="pun">,</span><span class="pln">
    </span><span class="str">"totalElements"</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="lit">30</span><span class="pun">,</span><span class="pln">
    </span><span class="str">"totalPages"</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="lit">2</span><span class="pun">,</span><span class="pln">
    </span><span class="str">"number"</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="lit">0</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>You see that the assembler produced the correct URI and also picks up
 the default configuration present to resolve the parameters into a <code>Pageable</code>
 for an upcoming request. This means, if you change that configuration, 
the links will automatically adhere to the change. By default the 
assembler points to the controller method it was invoked in but that can
 be customized by handing in a custom <code>Link</code> to be used as base to build the pagination links to overloads of the <code>PagedResourcesAssembler.toResource(…)</code> method.</p>
</div>
</div>
</div>
<div class="sect3">
<h4 id="core.repository-populators"><a class="anchor" href="#core.repository-populators"></a>6.7.2. Repository populators</h4>
<div class="paragraph">
<p>If you work with the Spring JDBC module, you probably are familiar with the support to populate a <code>DataSource</code>
 using SQL scripts. A similar abstraction is available on the 
repositories level, although it does not use SQL as the data definition 
language because it must be store-independent. Thus the populators 
support XML (through Spring’s OXM abstraction) and JSON (through 
Jackson) to define data with which to populate the repositories.</p>
</div>
<div class="paragraph">
<p>Assume you have a file <code>data.json</code> with the following content:</p>
</div>
<div class="exampleblock">
<div class="title">Example 30. Data defined in JSON</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-javascript" data-lang="javascript"><span class="pun">[</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="str">"_class"</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="str">"com.acme.Person"</span><span class="pun">,</span><span class="pln">
 </span><span class="str">"firstname"</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="str">"Dave"</span><span class="pun">,</span><span class="pln">
  </span><span class="str">"lastname"</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="str">"Matthews"</span><span class="pln"> </span><span class="pun">},</span><span class="pln">
  </span><span class="pun">{</span><span class="pln"> </span><span class="str">"_class"</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="str">"com.acme.Person"</span><span class="pun">,</span><span class="pln">
 </span><span class="str">"firstname"</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="str">"Carter"</span><span class="pun">,</span><span class="pln">
  </span><span class="str">"lastname"</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="str">"Beauford"</span><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="pun">]</span></code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>You can easily populate your repositories by using the populator 
elements of the repository namespace provided in Spring Data Commons. To
 populate the preceding data to your PersonRepository , do the 
following:</p>
</div>
<div class="exampleblock">
<div class="title">Example 31. Declaring a Jackson repository populator</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-xml" data-lang="xml"><span class="pun">&lt;?</span><span class="pln">xml version</span><span class="pun">=</span><span class="str">"1.0"</span><span class="pln"> encoding</span><span class="pun">=</span><span class="str">"UTF-8"</span><span class="pun">?&gt;</span><span class="pln">
</span><span class="tag">&lt;beans</span><span class="pln"> </span><span class="atn">xmlns</span><span class="pun">=</span><span class="atv">"http://www.springframework.org/schema/beans"</span><span class="pln">
  </span><span class="atn">xmlns:xsi</span><span class="pun">=</span><span class="atv">"http://www.w3.org/2001/XMLSchema-instance"</span><span class="pln">
  </span><span class="atn">xmlns:repository</span><span class="pun">=</span><span class="atv">"http://www.springframework.org/schema/data/repository"</span><span class="pln">
  </span><span class="atn">xsi:schemaLocation</span><span class="pun">=</span><span class="atv">"http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/data/repository
    http://www.springframework.org/schema/data/repository/spring-repository.xsd"</span><span class="tag">&gt;</span><span class="pln">

  </span><span class="tag">&lt;repository:jackson-populator</span><span class="pln"> </span><span class="atn">locations</span><span class="pun">=</span><span class="atv">"classpath:data.json"</span><span class="pln"> </span><span class="tag">/&gt;</span><span class="pln">

</span><span class="tag">&lt;/beans&gt;</span></code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>This declaration causes the <code>data.json</code> file to
be read and deserialized via a Jackson <code>ObjectMapper</code>.</p>
</div>
<div class="paragraph">
<p>The type to which the JSON object will be unmarshalled to will be determined by inspecting the <code>_class</code>
 attribute of the JSON document. The infrastructure will eventually 
select the appropriate repository to handle the object just 
deserialized.</p>
</div>
<div class="paragraph">
<p>To rather use XML to define the data the repositories shall be populated with, you can use the <code>unmarshaller-populator</code> element. You configure it to use one of the XML marshaller options Spring OXM provides you with. See the <a href="http://docs.spring.io/spring-data/mongodb/docs/current/reference/html/%7Bspring-framework-docs%7D/oxm.html">Spring reference documentation</a> for details.</p>
</div>
<div class="exampleblock">
<div class="title">Example 32. Declaring an unmarshalling repository populator (using JAXB)</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-xml" data-lang="xml"><span class="pun">&lt;?</span><span class="pln">xml version</span><span class="pun">=</span><span class="str">"1.0"</span><span class="pln"> encoding</span><span class="pun">=</span><span class="str">"UTF-8"</span><span class="pun">?&gt;</span><span class="pln">
</span><span class="tag">&lt;beans</span><span class="pln"> </span><span class="atn">xmlns</span><span class="pun">=</span><span class="atv">"http://www.springframework.org/schema/beans"</span><span class="pln">
  </span><span class="atn">xmlns:xsi</span><span class="pun">=</span><span class="atv">"http://www.w3.org/2001/XMLSchema-instance"</span><span class="pln">
  </span><span class="atn">xmlns:repository</span><span class="pun">=</span><span class="atv">"http://www.springframework.org/schema/data/repository"</span><span class="pln">
  </span><span class="atn">xmlns:oxm</span><span class="pun">=</span><span class="atv">"http://www.springframework.org/schema/oxm"</span><span class="pln">
  </span><span class="atn">xsi:schemaLocation</span><span class="pun">=</span><span class="atv">"http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/data/repository
    http://www.springframework.org/schema/data/repository/spring-repository.xsd
    http://www.springframework.org/schema/oxm
    http://www.springframework.org/schema/oxm/spring-oxm.xsd"</span><span class="tag">&gt;</span><span class="pln">

  </span><span class="tag">&lt;repository:unmarshaller-populator</span><span class="pln"> </span><span class="atn">locations</span><span class="pun">=</span><span class="atv">"classpath:data.json"</span><span class="pln">
    </span><span class="atn">unmarshaller-ref</span><span class="pun">=</span><span class="atv">"unmarshaller"</span><span class="pln"> </span><span class="tag">/&gt;</span><span class="pln">

  </span><span class="tag">&lt;oxm:jaxb2-marshaller</span><span class="pln"> </span><span class="atn">contextPath</span><span class="pun">=</span><span class="atv">"com.acme"</span><span class="pln"> </span><span class="tag">/&gt;</span><span class="pln">

</span><span class="tag">&lt;/beans&gt;</span></code></pre>
</div>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="web.legacy"><a class="anchor" href="#web.legacy"></a>6.7.3. Legacy web support</h4>
<div class="sect4">
<h5 id="web-domain-class-binding"><a class="anchor" href="#web-domain-class-binding"></a>Domain class web binding for Spring MVC</h5>
<div class="paragraph">
<p>Given you are developing a Spring MVC web application you typically 
have to resolve domain class ids from URLs. By default your task is to 
transform that request parameter or URL part into the domain class to 
hand it to layers below then or execute business logic on the entities 
directly. This would look something like this:</p>
</div>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="lit">@Controller</span><span class="pln">
</span><span class="lit">@RequestMapping</span><span class="pun">(</span><span class="str">"/users"</span><span class="pun">)</span><span class="pln">
</span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">UserController</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

  </span><span class="kwd">private</span><span class="pln"> </span><span class="kwd">final</span><span class="pln"> </span><span class="typ">UserRepository</span><span class="pln"> userRepository</span><span class="pun">;</span><span class="pln">

  </span><span class="lit">@Autowired</span><span class="pln">
  </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">UserController</span><span class="pun">(</span><span class="typ">UserRepository</span><span class="pln"> userRepository</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="typ">Assert</span><span class="pun">.</span><span class="pln">notNull</span><span class="pun">(</span><span class="pln">repository</span><span class="pun">,</span><span class="pln"> </span><span class="str">"Repository must not be null!"</span><span class="pun">);</span><span class="pln">
    </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">userRepository </span><span class="pun">=</span><span class="pln"> userRepository</span><span class="pun">;</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">

  </span><span class="lit">@RequestMapping</span><span class="pun">(</span><span class="str">"/{id}"</span><span class="pun">)</span><span class="pln">
  </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> showUserForm</span><span class="pun">(</span><span class="lit">@PathVariable</span><span class="pun">(</span><span class="str">"id"</span><span class="pun">)</span><span class="pln"> </span><span class="typ">Long</span><span class="pln"> id</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Model</span><span class="pln"> model</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

    </span><span class="com">// Do null check for id</span><span class="pln">
    </span><span class="typ">User</span><span class="pln"> user </span><span class="pun">=</span><span class="pln"> userRepository</span><span class="pun">.</span><span class="pln">findOne</span><span class="pun">(</span><span class="pln">id</span><span class="pun">);</span><span class="pln">
    </span><span class="com">// Do null check for user</span><span class="pln">

    model</span><span class="pun">.</span><span class="pln">addAttribute</span><span class="pun">(</span><span class="str">"user"</span><span class="pun">,</span><span class="pln"> user</span><span class="pun">);</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> </span><span class="str">"user"</span><span class="pun">;</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>First you declare a repository dependency for each controller to look
 up the entity managed by the controller or repository respectively. 
Looking up the entity is boilerplate as well, as it’s always a <code>findOne(…)</code> call. Fortunately Spring provides means to register custom components that allow conversion between a <code>String</code> value to an arbitrary type.</p>
</div>
<div class="sect5">
<h6 id="_propertyeditors"><a class="anchor" href="#_propertyeditors"></a>PropertyEditors</h6>
<div class="paragraph">
<p>For Spring versions before 3.0 simple Java <code>PropertyEditors</code> had to be used. To integrate with that, Spring Data offers a <code>DomainClassPropertyEditorRegistrar</code>, which looks up all Spring Data repositories registered in the <code>ApplicationContext</code> and registers a custom <code>PropertyEditor</code> for the managed domain class.</p>
</div>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-xml" data-lang="xml"><span class="tag">&lt;bean</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"….web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter"</span><span class="tag">&gt;</span><span class="pln">
  </span><span class="tag">&lt;property</span><span class="pln"> </span><span class="atn">name</span><span class="pun">=</span><span class="atv">"webBindingInitializer"</span><span class="tag">&gt;</span><span class="pln">
    </span><span class="tag">&lt;bean</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"….web.bind.support.ConfigurableWebBindingInitializer"</span><span class="tag">&gt;</span><span class="pln">
      </span><span class="tag">&lt;property</span><span class="pln"> </span><span class="atn">name</span><span class="pun">=</span><span class="atv">"propertyEditorRegistrars"</span><span class="tag">&gt;</span><span class="pln">
        </span><span class="tag">&lt;bean</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"org.springframework.data.repository.support.DomainClassPropertyEditorRegistrar"</span><span class="pln"> </span><span class="tag">/&gt;</span><span class="pln">
      </span><span class="tag">&lt;/property&gt;</span><span class="pln">
    </span><span class="tag">&lt;/bean&gt;</span><span class="pln">
  </span><span class="tag">&lt;/property&gt;</span><span class="pln">
</span><span class="tag">&lt;/bean&gt;</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>If you have configured Spring MVC as in the preceding example, you 
can configure your controller as follows, which reduces a lot of the 
clutter and boilerplate.</p>
</div>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="lit">@Controller</span><span class="pln">
</span><span class="lit">@RequestMapping</span><span class="pun">(</span><span class="str">"/users"</span><span class="pun">)</span><span class="pln">
</span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">UserController</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

  </span><span class="lit">@RequestMapping</span><span class="pun">(</span><span class="str">"/{id}"</span><span class="pun">)</span><span class="pln">
  </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> showUserForm</span><span class="pun">(</span><span class="lit">@PathVariable</span><span class="pun">(</span><span class="str">"id"</span><span class="pun">)</span><span class="pln"> </span><span class="typ">User</span><span class="pln"> user</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Model</span><span class="pln"> model</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

    model</span><span class="pun">.</span><span class="pln">addAttribute</span><span class="pun">(</span><span class="str">"user"</span><span class="pun">,</span><span class="pln"> user</span><span class="pun">);</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> </span><span class="str">"userForm"</span><span class="pun">;</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>ConversionServiceIn Spring 3.0 and later the <code>PropertyEditor</code> support is superseded by a new conversion infrastructure that eliminates the drawbacks of <code>PropertyEditors</code> and uses a stateless X to Y conversion approach. Spring Data now ships with a <code>DomainClassConverter</code> that mimics the behavior of <code>DomainClassPropertyEditorRegistrar</code>. To configure, simply declare a bean instance and pipe the <code>ConversionService</code> being used into its constructor:</p>
</div>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-xml" data-lang="xml"><span class="tag">&lt;mvc:annotation-driven</span><span class="pln"> </span><span class="atn">conversion-service</span><span class="pun">=</span><span class="atv">"conversionService"</span><span class="pln"> </span><span class="tag">/&gt;</span><span class="pln">

</span><span class="tag">&lt;bean</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"org.springframework.data.repository.support.DomainClassConverter"</span><span class="tag">&gt;</span><span class="pln">
  </span><span class="tag">&lt;constructor-arg</span><span class="pln"> </span><span class="atn">ref</span><span class="pun">=</span><span class="atv">"conversionService"</span><span class="pln"> </span><span class="tag">/&gt;</span><span class="pln">
</span><span class="tag">&lt;/bean&gt;</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>If you are using JavaConfig, you can simply extend Spring MVC’s <code>WebMvcConfigurationSupport</code> and hand the <code>FormatingConversionService</code> that the configuration superclass provides into the <code>DomainClassConverter</code> instance you create.</p>
</div>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="kwd">class</span><span class="pln"> </span><span class="typ">WebConfiguration</span><span class="pln"> </span><span class="kwd">extends</span><span class="pln"> </span><span class="typ">WebMvcConfigurationSupport</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

  </span><span class="com">// Other configuration omitted</span><span class="pln">

  </span><span class="lit">@Bean</span><span class="pln">
  </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">DomainClassConverter</span><span class="pun">&lt;?&gt;</span><span class="pln"> domainClassConverter</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">DomainClassConverter</span><span class="pun">&lt;</span><span class="typ">FormattingConversionService</span><span class="pun">&gt;(</span><span class="pln">mvcConversionService</span><span class="pun">());</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div>
</div>
</div>
</div>
<div class="sect4">
<h5 id="web-pagination"><a class="anchor" href="#web-pagination"></a>Web pagination</h5>
<div class="paragraph">
<p>When working with pagination in the web layer you usually have to 
write a lot of boilerplate code yourself to extract the necessary 
metadata from the request. The less desirable approach shown in the 
example below requires the method to contain an <code>HttpServletRequest</code>
 parameter that has to be parsed manually. This example also omits 
appropriate failure handling, which would make the code even more 
verbose.</p>
</div>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="lit">@Controller</span><span class="pln">
</span><span class="lit">@RequestMapping</span><span class="pun">(</span><span class="str">"/users"</span><span class="pun">)</span><span class="pln">
</span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">UserController</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

  </span><span class="com">// DI code omitted</span><span class="pln">

  </span><span class="lit">@RequestMapping</span><span class="pln">
  </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> showUsers</span><span class="pun">(</span><span class="typ">Model</span><span class="pln"> model</span><span class="pun">,</span><span class="pln"> </span><span class="typ">HttpServletRequest</span><span class="pln"> request</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

    </span><span class="kwd">int</span><span class="pln"> page </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Integer</span><span class="pun">.</span><span class="pln">parseInt</span><span class="pun">(</span><span class="pln">request</span><span class="pun">.</span><span class="pln">getParameter</span><span class="pun">(</span><span class="str">"page"</span><span class="pun">));</span><span class="pln">
    </span><span class="kwd">int</span><span class="pln"> pageSize </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Integer</span><span class="pun">.</span><span class="pln">parseInt</span><span class="pun">(</span><span class="pln">request</span><span class="pun">.</span><span class="pln">getParameter</span><span class="pun">(</span><span class="str">"pageSize"</span><span class="pun">));</span><span class="pln">

    </span><span class="typ">Pageable</span><span class="pln"> pageable </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">PageRequest</span><span class="pun">(</span><span class="pln">page</span><span class="pun">,</span><span class="pln"> pageSize</span><span class="pun">);</span><span class="pln">

    model</span><span class="pun">.</span><span class="pln">addAttribute</span><span class="pun">(</span><span class="str">"users"</span><span class="pun">,</span><span class="pln"> userService</span><span class="pun">.</span><span class="pln">getUsers</span><span class="pun">(</span><span class="pln">pageable</span><span class="pun">));</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> </span><span class="str">"users"</span><span class="pun">;</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>The bottom line is that the controller should not have to handle the 
functionality of extracting pagination information from the request. So 
Spring Data ships with a <code>PageableHandlerMethodArgumentResolver</code> that will do the work for you. The Spring MVC JavaConfig support exposes a <code>WebMvcConfigurationSupport</code> helper class to customize the configuration as follows:</p>
</div>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="lit">@Configuration</span><span class="pln">
</span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">WebConfig</span><span class="pln"> </span><span class="kwd">extends</span><span class="pln"> </span><span class="typ">WebMvcConfigurationSupport</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

  </span><span class="lit">@Override</span><span class="pln">
  </span><span class="kwd">protected</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> addArgumentResolvers</span><span class="pun">(</span><span class="typ">List</span><span class="pun">&lt;</span><span class="typ">HandlerMethodArgumentResolver</span><span class="pun">&gt;</span><span class="pln"> argumentResolvers</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    argumentResolvers</span><span class="pun">.</span><span class="pln">add</span><span class="pun">(</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">PageableHandlerMethodArgumentResolver</span><span class="pun">());</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>If you’re stuck with XML configuration you can register the resolver as follows:</p>
</div>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-xml" data-lang="xml"><span class="tag">&lt;bean</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"….web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"</span><span class="tag">&gt;</span><span class="pln">
  </span><span class="tag">&lt;property</span><span class="pln"> </span><span class="atn">name</span><span class="pun">=</span><span class="atv">"customArgumentResolvers"</span><span class="tag">&gt;</span><span class="pln">
    </span><span class="tag">&lt;list&gt;</span><span class="pln">
      </span><span class="tag">&lt;bean</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"org.springframework.data.web.PageableHandlerMethodArgumentResolver"</span><span class="pln"> </span><span class="tag">/&gt;</span><span class="pln">
    </span><span class="tag">&lt;/list&gt;</span><span class="pln">
  </span><span class="tag">&lt;/property&gt;</span><span class="pln">
</span><span class="tag">&lt;/bean&gt;</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Once you’ve configured the resolver with Spring MVC it allows you to simplify controllers down to something like this:</p>
</div>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="lit">@Controller</span><span class="pln">
</span><span class="lit">@RequestMapping</span><span class="pun">(</span><span class="str">"/users"</span><span class="pun">)</span><span class="pln">
</span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">UserController</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

  </span><span class="lit">@RequestMapping</span><span class="pln">
  </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> showUsers</span><span class="pun">(</span><span class="typ">Model</span><span class="pln"> model</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Pageable</span><span class="pln"> pageable</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

    model</span><span class="pun">.</span><span class="pln">addAttribute</span><span class="pun">(</span><span class="str">"users"</span><span class="pun">,</span><span class="pln"> userRepository</span><span class="pun">.</span><span class="pln">findAll</span><span class="pun">(</span><span class="pln">pageable</span><span class="pun">));</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> </span><span class="str">"users"</span><span class="pun">;</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>The <code>PageableArgumentResolver</code> automatically resolves request parameters to build a <code>PageRequest</code> instance. By default it expects the following structure for the request parameters.</p>
</div>
<table class="tableblock frame-all grid-all">
<caption class="title">Table 2. Request parameters evaluated by PageableHandlerMethodArgumentResolver</caption>
<colgroup>
<col>
<col>
</colgroup>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>page</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Page you want to retrieve, 0 indexed and defaults to 0.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>size</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Size of the page you want to retrieve, defaults to 20.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>sort</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">A collection of sort directives in the format <code>($propertyname,)[asc|desc]?</code>.</p></td>
</tr>
</tbody>
</table>
<div class="paragraph">
<div class="title">Pagination URL parameter examples</div>
<p>To retrieve the third page with a maximum page size of 100 with the 
data sorted by the email property in ascending order use the following 
url parameter:</p>
</div>
<div class="exampleblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre>?page=2&amp;size=100&amp;sort=email,asc</pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>To sort the data by multiple properties in different sort order use the following URL parameter:</p>
</div>
<div class="exampleblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre>?sort=foo,asc&amp;sort=bar,desc</pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>In case you need multiple <code>Pageable</code> instances to be resolved from the request (for multiple tables, for example) you can use Spring’s <code>@Qualifier</code> annotation to distinguish one from another. The request parameters then have to be prefixed with <code>${qualifier}_</code>. So for a method signature like this:</p>
</div>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="kwd">public</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> showUsers</span><span class="pun">(</span><span class="typ">Model</span><span class="pln"> model</span><span class="pun">,</span><span class="pln">
  </span><span class="lit">@Qualifier</span><span class="pun">(</span><span class="str">"foo"</span><span class="pun">)</span><span class="pln"> </span><span class="typ">Pageable</span><span class="pln"> first</span><span class="pun">,</span><span class="pln">
  </span><span class="lit">@Qualifier</span><span class="pun">(</span><span class="str">"bar"</span><span class="pun">)</span><span class="pln"> </span><span class="typ">Pageable</span><span class="pln"> second</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="pun">…</span><span class="pln"> </span><span class="pun">}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>you have to populate <code>foo_page</code> and <code>bar_page</code> and the related subproperties.</p>
</div>
<div class="paragraph">
<p>Configuring a global default on bean declaration the <code>PageableArgumentResolver</code> will use a <code>PageRequest</code> with the first page and a page size of 10 by default. It will use that value if it cannot resolve a <code>PageRequest</code>
 from the request (because of missing parameters, for example). You can 
configure a global default on the bean declaration directly. If you 
might need controller method specific defaults for the <code>Pageable</code>, annotate the method parameter with <code>@PageableDefaults</code> and specify page (through <code>pageNumber</code>), page size (through <code>value</code>), <code>sort</code> (list of properties to sort by), and <code>sortDir</code> (the direction to sort by) as annotation attributes:</p>
</div>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="kwd">public</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> showUsers</span><span class="pun">(</span><span class="typ">Model</span><span class="pln"> model</span><span class="pun">,</span><span class="pln">
  </span><span class="lit">@PageableDefaults</span><span class="pun">(</span><span class="pln">pageNumber </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">,</span><span class="pln"> value </span><span class="pun">=</span><span class="pln"> </span><span class="lit">30</span><span class="pun">)</span><span class="pln"> </span><span class="typ">Pageable</span><span class="pln"> pageable</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="pun">…</span><span class="pln"> </span><span class="pun">}</span></code></pre>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
<h1 id="reference" class="sect0"><a class="anchor" href="#reference"></a>Reference Documentation</h1>
<div class="sect1">
<h2 id="introduction"><a class="anchor" href="#introduction"></a>7. Introduction</h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="_document_structure"><a class="anchor" href="#_document_structure"></a>7.1. Document Structure</h3>
<div class="paragraph">
<p>This part of the reference documentation explains the core functionality offered by Spring Data Document.</p>
</div>
<div class="paragraph">
<p><a href="#mongo.core">MongoDB support</a> introduces the MongoDB module feature set.</p>
</div>
<div class="paragraph">
<p><a href="#mongo.repositories">MongoDB repositories</a> introduces the repository support for MongoDB.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="mongo.core"><a class="anchor" href="#mongo.core"></a>8. MongoDB support</h2>
<div class="sectionbody">
<div class="paragraph">
<p>The MongoDB support contains a wide range of features which are summarized below.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Spring configuration support using Java based @Configuration classes 
or an XML namespace for a Mongo driver instance and replica sets</p>
</li>
<li>
<p>MongoTemplate helper class that increases productivity performing 
common Mongo operations. Includes integrated object mapping between 
documents and POJOs.</p>
</li>
<li>
<p>Exception translation into Spring’s portable Data Access Exception hierarchy</p>
</li>
<li>
<p>Feature Rich Object Mapping integrated with Spring’s Conversion Service</p>
</li>
<li>
<p>Annotation based mapping metadata but extensible to support other metadata formats</p>
</li>
<li>
<p>Persistence and mapping lifecycle events</p>
</li>
<li>
<p>Java based Query, Criteria, and Update DSLs</p>
</li>
<li>
<p>Automatic implementation of Repository interfaces including support for custom finder methods.</p>
</li>
<li>
<p>QueryDSL integration to support type-safe queries.</p>
</li>
<li>
<p>Cross-store persistance - support for JPA Entities with fields transparently persisted/retrieved using MongoDB</p>
</li>
<li>
<p>Log4j log appender</p>
</li>
<li>
<p>GeoSpatial integration</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>For most tasks you will find yourself using <code>MongoTemplate</code>
 or the Repository support that both leverage the rich mapping 
functionality. MongoTemplate is the place to look for accessing 
functionality such as incrementing counters or ad-hoc CRUD operations. 
MongoTemplate also provides callback methods so that it is easy for you 
to get a hold of the low level API artifacts such as <code>org.mongo.DB</code>
 to communicate directly with MongoDB. The goal with naming conventions 
on various API artifacts is to copy those in the base MongoDB Java 
driver so you can easily map your existing knowledge onto the Spring 
APIs.</p>
</div>
<div class="sect2">
<h3 id="mongodb-getting-started"><a class="anchor" href="#mongodb-getting-started"></a>8.1. Getting Started</h3>
<div class="paragraph">
<p>Spring MongoDB support requires MongoDB 2.6 or higher and Java SE 6 
or higher. An easy way to bootstrap setting up a working environment is 
to create a Spring based project in <a href="http://spring.io/tools/sts">STS</a>.</p>
</div>
<div class="paragraph">
<p>First you need to set up a running Mongodb server. Refer to the <a href="http://docs.mongodb.org/manual/core/introduction/">Mongodb Quick Start guide</a>
 for an explanation on how to startup a MongoDB instance. Once installed
 starting MongoDB is typically a matter of executing the following 
command: <code>MONGO_HOME/bin/mongod</code></p>
</div>
<div class="paragraph">
<p>To create a Spring project in STS go to File → New → Spring Template 
Project → Simple Spring Utility Project → press Yes when prompted. Then 
enter a project and a package name such as org.spring.mongodb.example.</p>
</div>
<div class="paragraph">
<p>Then add the following to pom.xml dependencies section.</p>
</div>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-xml" data-lang="xml"><span class="tag">&lt;dependencies&gt;</span><span class="pln">

  </span><span class="com">&lt;!-- other dependency elements omitted --&gt;</span><span class="pln">

  </span><span class="tag">&lt;dependency&gt;</span><span class="pln">
    </span><span class="tag">&lt;groupId&gt;</span><span class="pln">org.springframework.data</span><span class="tag">&lt;/groupId&gt;</span><span class="pln">
    </span><span class="tag">&lt;artifactId&gt;</span><span class="pln">spring-data-mongodb</span><span class="tag">&lt;/artifactId&gt;</span><span class="pln">
    </span><span class="tag">&lt;version&gt;</span><span class="pln">1.7.0.RELEASE</span><span class="tag">&lt;/version&gt;</span><span class="pln">
  </span><span class="tag">&lt;/dependency&gt;</span><span class="pln">

</span><span class="tag">&lt;/dependencies&gt;</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Also change the version of Spring in the pom.xml to be</p>
</div>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-xml" data-lang="xml"><span class="tag">&lt;spring.framework.version&gt;</span><span class="pln">4.0.9.RELEASE</span><span class="tag">&lt;/spring.framework.version&gt;</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>You will also need to add the location of the Spring Milestone 
repository for maven to your pom.xml which is at the same level of your 
&lt;dependencies/&gt; element</p>
</div>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-xml" data-lang="xml"><span class="tag">&lt;repositories&gt;</span><span class="pln">
  </span><span class="tag">&lt;repository&gt;</span><span class="pln">
    </span><span class="tag">&lt;id&gt;</span><span class="pln">spring-milestone</span><span class="tag">&lt;/id&gt;</span><span class="pln">
    </span><span class="tag">&lt;name&gt;</span><span class="pln">Spring Maven MILESTONE Repository</span><span class="tag">&lt;/name&gt;</span><span class="pln">
    </span><span class="tag">&lt;url&gt;</span><span class="pln">http://repo.spring.io/libs-milestone</span><span class="tag">&lt;/url&gt;</span><span class="pln">
  </span><span class="tag">&lt;/repository&gt;</span><span class="pln">
</span><span class="tag">&lt;/repositories&gt;</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>The repository is also <a href="http://shrub.appspot.com/maven.springframework.org/milestone/org/springframework/data/">browseable here</a>.</p>
</div>
<div class="paragraph">
<p>You may also want to set the logging level to <code>DEBUG</code> to see some additional information, edit the log4j.properties file to have</p>
</div>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code><span class="pln">log4j</span><span class="pun">.</span><span class="pln">category</span><span class="pun">.</span><span class="pln">org</span><span class="pun">.</span><span class="pln">springframework</span><span class="pun">.</span><span class="pln">data</span><span class="pun">.</span><span class="pln">document</span><span class="pun">.</span><span class="pln">mongodb</span><span class="pun">=</span><span class="pln">DEBUG
log4j</span><span class="pun">.</span><span class="pln">appender</span><span class="pun">.</span><span class="pln">stdout</span><span class="pun">.</span><span class="pln">layout</span><span class="pun">.</span><span class="typ">ConversionPattern</span><span class="pun">=%</span><span class="pln">d</span><span class="pun">{</span><span class="pln">ABSOLUTE</span><span class="pun">}</span><span class="pln"> </span><span class="pun">%</span><span class="lit">5p</span><span class="pln"> </span><span class="pun">%</span><span class="lit">40.40c</span><span class="pun">:%</span><span class="lit">4L</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> </span><span class="pun">%</span><span class="pln">m</span><span class="pun">%</span><span class="pln">n</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Create a simple Person class to persist:</p>
</div>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="kwd">package</span><span class="pln"> org</span><span class="pun">.</span><span class="pln">spring</span><span class="pun">.</span><span class="pln">mongodb</span><span class="pun">.</span><span class="pln">example</span><span class="pun">;</span><span class="pln">

</span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">Person</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

  </span><span class="kwd">private</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> id</span><span class="pun">;</span><span class="pln">
  </span><span class="kwd">private</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> name</span><span class="pun">;</span><span class="pln">
  </span><span class="kwd">private</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> age</span><span class="pun">;</span><span class="pln">

  </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">Person</span><span class="pun">(</span><span class="typ">String</span><span class="pln"> name</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> age</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">name </span><span class="pun">=</span><span class="pln"> name</span><span class="pun">;</span><span class="pln">
    </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">age </span><span class="pun">=</span><span class="pln"> age</span><span class="pun">;</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">

  </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> getId</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> id</span><span class="pun">;</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">
  </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> getName</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> name</span><span class="pun">;</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">
  </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> getAge</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> age</span><span class="pun">;</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">

  </span><span class="lit">@Override</span><span class="pln">
  </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> toString</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> </span><span class="str">"Person [id="</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> id </span><span class="pun">+</span><span class="pln"> </span><span class="str">", name="</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> name </span><span class="pun">+</span><span class="pln"> </span><span class="str">", age="</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> age </span><span class="pun">+</span><span class="pln"> </span><span class="str">"]"</span><span class="pun">;</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>And a main application to run</p>
</div>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="kwd">package</span><span class="pln"> org</span><span class="pun">.</span><span class="pln">spring</span><span class="pun">.</span><span class="pln">mongodb</span><span class="pun">.</span><span class="pln">example</span><span class="pun">;</span><span class="pln">

</span><span class="kwd">import</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> org</span><span class="pun">.</span><span class="pln">springframework</span><span class="pun">.</span><span class="pln">data</span><span class="pun">.</span><span class="pln">mongodb</span><span class="pun">.</span><span class="pln">core</span><span class="pun">.</span><span class="pln">query</span><span class="pun">.</span><span class="typ">Criteria</span><span class="pun">.</span><span class="pln">where</span><span class="pun">;</span><span class="pln">

</span><span class="kwd">import</span><span class="pln"> org</span><span class="pun">.</span><span class="pln">apache</span><span class="pun">.</span><span class="pln">commons</span><span class="pun">.</span><span class="pln">logging</span><span class="pun">.</span><span class="typ">Log</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> org</span><span class="pun">.</span><span class="pln">apache</span><span class="pun">.</span><span class="pln">commons</span><span class="pun">.</span><span class="pln">logging</span><span class="pun">.</span><span class="typ">LogFactory</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> org</span><span class="pun">.</span><span class="pln">springframework</span><span class="pun">.</span><span class="pln">data</span><span class="pun">.</span><span class="pln">mongodb</span><span class="pun">.</span><span class="pln">core</span><span class="pun">.</span><span class="typ">MongoOperations</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> org</span><span class="pun">.</span><span class="pln">springframework</span><span class="pun">.</span><span class="pln">data</span><span class="pun">.</span><span class="pln">mongodb</span><span class="pun">.</span><span class="pln">core</span><span class="pun">.</span><span class="typ">MongoTemplate</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> org</span><span class="pun">.</span><span class="pln">springframework</span><span class="pun">.</span><span class="pln">data</span><span class="pun">.</span><span class="pln">mongodb</span><span class="pun">.</span><span class="pln">core</span><span class="pun">.</span><span class="pln">query</span><span class="pun">.</span><span class="typ">Query</span><span class="pun">;</span><span class="pln">

</span><span class="kwd">import</span><span class="pln"> com</span><span class="pun">.</span><span class="pln">mongodb</span><span class="pun">.</span><span class="typ">Mongo</span><span class="pun">;</span><span class="pln">

</span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">MongoApp</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

  </span><span class="kwd">private</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">final</span><span class="pln"> </span><span class="typ">Log</span><span class="pln"> log </span><span class="pun">=</span><span class="pln"> </span><span class="typ">LogFactory</span><span class="pun">.</span><span class="pln">getLog</span><span class="pun">(</span><span class="typ">MongoApp</span><span class="pun">.</span><span class="kwd">class</span><span class="pun">);</span><span class="pln">

  </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> main</span><span class="pun">(</span><span class="typ">String</span><span class="pun">[]</span><span class="pln"> args</span><span class="pun">)</span><span class="pln"> </span><span class="kwd">throws</span><span class="pln"> </span><span class="typ">Exception</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

    </span><span class="typ">MongoOperations</span><span class="pln"> mongoOps </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">MongoTemplate</span><span class="pun">(</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Mongo</span><span class="pun">(),</span><span class="pln"> </span><span class="str">"database"</span><span class="pun">);</span><span class="pln">
    mongoOps</span><span class="pun">.</span><span class="pln">insert</span><span class="pun">(</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Person</span><span class="pun">(</span><span class="str">"Joe"</span><span class="pun">,</span><span class="pln"> </span><span class="lit">34</span><span class="pun">));</span><span class="pln">

    log</span><span class="pun">.</span><span class="pln">info</span><span class="pun">(</span><span class="pln">mongoOps</span><span class="pun">.</span><span class="pln">findOne</span><span class="pun">(</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Query</span><span class="pun">(</span><span class="pln">where</span><span class="pun">(</span><span class="str">"name"</span><span class="pun">).</span><span class="pln">is</span><span class="pun">(</span><span class="str">"Joe"</span><span class="pun">)),</span><span class="pln"> </span><span class="typ">Person</span><span class="pun">.</span><span class="kwd">class</span><span class="pun">));</span><span class="pln">

    mongoOps</span><span class="pun">.</span><span class="pln">dropCollection</span><span class="pun">(</span><span class="str">"person"</span><span class="pun">);</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>This will produce the following output</p>
</div>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code><span class="lit">10</span><span class="pun">:</span><span class="lit">01</span><span class="pun">:</span><span class="lit">32</span><span class="pun">,</span><span class="lit">062</span><span class="pln"> DEBUG apping</span><span class="pun">.</span><span class="typ">MongoPersistentEntityIndexCreator</span><span class="pun">:</span><span class="pln">  </span><span class="lit">80</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> </span><span class="typ">Analyzing</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> org</span><span class="pun">.</span><span class="pln">spring</span><span class="pun">.</span><span class="pln">example</span><span class="pun">.</span><span class="typ">Person</span><span class="pln"> </span><span class="kwd">for</span><span class="pln"> index information</span><span class="pun">.</span><span class="pln">
</span><span class="lit">10</span><span class="pun">:</span><span class="lit">01</span><span class="pun">:</span><span class="lit">32</span><span class="pun">,</span><span class="lit">265</span><span class="pln"> DEBUG ramework</span><span class="pun">.</span><span class="pln">data</span><span class="pun">.</span><span class="pln">mongodb</span><span class="pun">.</span><span class="pln">core</span><span class="pun">.</span><span class="typ">MongoTemplate</span><span class="pun">:</span><span class="pln"> </span><span class="lit">631</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> insert </span><span class="typ">DBObject</span><span class="pln"> containing fields</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="pln">_class</span><span class="pun">,</span><span class="pln"> age</span><span class="pun">,</span><span class="pln"> name</span><span class="pun">]</span><span class="pln"> </span><span class="kwd">in</span><span class="pln"> collection</span><span class="pun">:</span><span class="pln"> </span><span class="typ">Person</span><span class="pln">
</span><span class="lit">10</span><span class="pun">:</span><span class="lit">01</span><span class="pun">:</span><span class="lit">32</span><span class="pun">,</span><span class="lit">765</span><span class="pln"> DEBUG ramework</span><span class="pun">.</span><span class="pln">data</span><span class="pun">.</span><span class="pln">mongodb</span><span class="pun">.</span><span class="pln">core</span><span class="pun">.</span><span class="typ">MongoTemplate</span><span class="pun">:</span><span class="lit">1243</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> findOne </span><span class="kwd">using</span><span class="pln"> query</span><span class="pun">:</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="str">"name"</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="str">"Joe"</span><span class="pun">}</span><span class="pln"> </span><span class="kwd">in</span><span class="pln"> db</span><span class="pun">.</span><span class="pln">collection</span><span class="pun">:</span><span class="pln"> database</span><span class="pun">.</span><span class="typ">Person</span><span class="pln">
</span><span class="lit">10</span><span class="pun">:</span><span class="lit">01</span><span class="pun">:</span><span class="lit">32</span><span class="pun">,</span><span class="lit">953</span><span class="pln">  INFO      org</span><span class="pun">.</span><span class="pln">spring</span><span class="pun">.</span><span class="pln">mongodb</span><span class="pun">.</span><span class="pln">example</span><span class="pun">.</span><span class="typ">MongoApp</span><span class="pun">:</span><span class="pln">  </span><span class="lit">25</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> </span><span class="typ">Person</span><span class="pln"> </span><span class="pun">[</span><span class="pln">id</span><span class="pun">=</span><span class="lit">4ddbba3c0be56b7e1b210166</span><span class="pun">,</span><span class="pln"> name</span><span class="pun">=</span><span class="typ">Joe</span><span class="pun">,</span><span class="pln"> age</span><span class="pun">=</span><span class="lit">34</span><span class="pun">]</span><span class="pln">
</span><span class="lit">10</span><span class="pun">:</span><span class="lit">01</span><span class="pun">:</span><span class="lit">32</span><span class="pun">,</span><span class="lit">984</span><span class="pln"> DEBUG ramework</span><span class="pun">.</span><span class="pln">data</span><span class="pun">.</span><span class="pln">mongodb</span><span class="pun">.</span><span class="pln">core</span><span class="pun">.</span><span class="typ">MongoTemplate</span><span class="pun">:</span><span class="pln"> </span><span class="lit">375</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> </span><span class="typ">Dropped</span><span class="pln"> collection </span><span class="pun">[</span><span class="pln">database</span><span class="pun">.</span><span class="pln">person</span><span class="pun">]</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Even in this simple example, there are few things to take notice of</p>
</div>
<div class="ulist">
<ul>
<li>
<p>You can instantiate the central helper class of Spring Mongo, <a href="#mongo-template"><code>MongoTemplate</code></a>, using the standard <code>com.mongodb.Mongo</code> object and the name of the database to use.</p>
</li>
<li>
<p>The mapper works against standard POJO objects without the need for 
any additional metadata (though you can optionally provide that 
information. See <a href="#mongo.mapping">here</a>.).</p>
</li>
<li>
<p>Conventions are used for handling the id field, converting it to be a ObjectId when stored in the database.</p>
</li>
<li>
<p>Mapping conventions can use field access. Notice the Person class has only getters.</p>
</li>
<li>
<p>If the constructor argument names match the field names of the stored document, they will be used to instantiate the object</p>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="mongo.examples-repo"><a class="anchor" href="#mongo.examples-repo"></a>8.2. Examples Repository</h3>
<div class="paragraph">
<p>There is an <a href="https://github.com/spring-projects/spring-data-examples">github repository with several examples</a> that you can download and play around with to get a feel for how the library works.</p>
</div>
</div>
<div class="sect2">
<h3 id="mongodb-connectors"><a class="anchor" href="#mongodb-connectors"></a>8.3. Connecting to MongoDB with Spring</h3>
<div class="paragraph">
<p>One of the first tasks when using MongoDB and Spring is to create a <code>com.mongodb.Mongo</code>
 object using the IoC container. There are two main ways to do this, 
either using Java based bean metadata or XML based bean metadata. These 
are discussed in the following sections.</p>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
For those not familiar with how to configure the Spring container using 
Java based bean metadata instead of XML based metadata see the high 
level introduction in the reference docs <a href="http://docs.spring.io/spring/docs/3.2.x/spring-framework-reference/html/new-in-3.0.html#new-java-configuration">here </a>
 as well as the detailed 
documentationhttp://docs.spring.io/spring/docs/3.2.x/spring-framework-reference/html/beans.html#beans-java-instantiating-container[
 here].
</td>
</tr>
</tbody></table>
</div>
<div class="sect3">
<h4 id="mongo.mongo-java-config"><a class="anchor" href="#mongo.mongo-java-config"></a>8.3.1. Registering a Mongo instance using Java based metadata</h4>
<div class="paragraph">
<p>An example of using Java based bean metadata to register an instance of a <code>com.mongodb.Mongo</code> is shown below</p>
</div>
<div class="exampleblock">
<div class="title">Example 33. Registering a com.mongodb.Mongo object using Java based bean metadata</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="lit">@Configuration</span><span class="pln">
</span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">AppConfig</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

  </span><span class="com">/*
   * Use the standard Mongo driver API to create a com.mongodb.Mongo instance.
   */</span><span class="pln">
   </span><span class="kwd">public</span><span class="pln"> </span><span class="lit">@Bean</span><span class="pln"> </span><span class="typ">Mongo</span><span class="pln"> mongo</span><span class="pun">()</span><span class="pln"> </span><span class="kwd">throws</span><span class="pln"> </span><span class="typ">UnknownHostException</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
       </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Mongo</span><span class="pun">(</span><span class="str">"localhost"</span><span class="pun">);</span><span class="pln">
   </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>This approach allows you to use the standard <code>com.mongodb.Mongo</code>
 API that you may already be used to using but also pollutes the code 
with the UnknownHostException checked exception. The use of the checked 
exception is not desirable as Java based bean metadata uses methods as a
 means to set object dependencies, making the calling code cluttered.</p>
</div>
<div class="paragraph">
<p>An alternative is to register an instance of <code>com.mongodb.Mongo</code> instance with the container using Spring’s` MongoFactoryBean`. As compared to instantiating a <code>com.mongodb.Mongo</code>
 instance directly, the FactoryBean approach does not throw a checked 
exception and has the added advantage of also providing the container 
with an ExceptionTranslator implementation that translates MongoDB 
exceptions to exceptions in Spring’s portable <code>DataAccessException</code> hierarchy for data access classes annoated with the <code>@Repository</code> annotation. This hierarchy and use of <code>@Repository</code> is described in <a href="http://docs.spring.io/spring/docs/current/spring-framework-reference/html/dao.html">Spring’s DAO support features</a>.</p>
</div>
<div class="paragraph">
<p>An example of a Java based bean metadata that supports exception translation on <code>@Repository</code> annotated classes is shown below:</p>
</div>
<div class="exampleblock">
<div class="title">Example 34. Registering a com.mongodb.Mongo object 
using Spring’s MongoFactoryBean and enabling Spring’s exception 
translation support</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="lit">@Configuration</span><span class="pln">
</span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">AppConfig</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

    </span><span class="com">/*
     * Factory bean that creates the com.mongodb.Mongo instance
     */</span><span class="pln">
     </span><span class="kwd">public</span><span class="pln"> </span><span class="lit">@Bean</span><span class="pln"> </span><span class="typ">MongoFactoryBean</span><span class="pln"> mongo</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
          </span><span class="typ">MongoFactoryBean</span><span class="pln"> mongo </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">MongoFactoryBean</span><span class="pun">();</span><span class="pln">
          mongo</span><span class="pun">.</span><span class="pln">setHost</span><span class="pun">(</span><span class="str">"localhost"</span><span class="pun">);</span><span class="pln">
          </span><span class="kwd">return</span><span class="pln"> mongo</span><span class="pun">;</span><span class="pln">
     </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>To access the <code>com.mongodb.Mongo</code> object created by the <code>MongoFactoryBean</code> in other <code>@Configuration</code> or your own classes, use a “private @Autowired Mongo mongo;” field.</p>
</div>
</div>
<div class="sect3">
<h4 id="mongo.mongo-xml-config"><a class="anchor" href="#mongo.mongo-xml-config"></a>8.3.2. Registering a Mongo instance using XML based metadata</h4>
<div class="paragraph">
<p>While you can use Spring’s traditional <code>&lt;beans/&gt;</code> XML namespace to register an instance of <code>com.mongodb.Mongo</code>
 with the container, the XML can be quite verbose as it is general 
purpose. XML namespaces are a better alternative to configuring commonly
 used objects such as the Mongo instance. The mongo namespace alows you 
to create a Mongo instance server location, replica-sets, and options.</p>
</div>
<div class="paragraph">
<p>To use the Mongo namespace elements you will need to reference the Mongo schema:</p>
</div>
<div class="exampleblock">
<div class="title">Example 35. XML schema to configure MongoDB</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-xml" data-lang="xml"><span class="pun">&lt;?</span><span class="pln">xml version</span><span class="pun">=</span><span class="str">"1.0"</span><span class="pln"> encoding</span><span class="pun">=</span><span class="str">"UTF-8"</span><span class="pun">?&gt;</span><span class="pln">
</span><span class="tag">&lt;beans</span><span class="pln"> </span><span class="atn">xmlns</span><span class="pun">=</span><span class="atv">"http://www.springframework.org/schema/beans"</span><span class="pln">
          </span><span class="atn">xmlns:xsi</span><span class="pun">=</span><span class="atv">"http://www.w3.org/2001/XMLSchema-instance"</span><span class="pln">
          </span><span class="atn">xmlns:context</span><span class="pun">=</span><span class="atv">"http://www.springframework.org/schema/context"</span><span class="pln">
          </span><span class="atn">xmlns:mongo</span><span class="pun">=</span><span class="atv">"http://www.springframework.org/schema/data/mongo"</span><span class="pln">
          </span><span class="atn">xsi:schemaLocation</span><span class="pun">=</span><span class="pln">
          </span><span class="atv">"http://www.springframework.org/schema/context
          http://www.springframework.org/schema/context/spring-context-3.0.xsd
          *http://www.springframework.org/schema/data/mongo http://www.springframework.org/schema/data/mongo/spring-mongo-1.0.xsd*
          http://www.springframework.org/schema/beans
          http://www.springframework.org/schema/beans/spring-beans-3.0.xsd"</span><span class="tag">&gt;</span><span class="pln">

    </span><span class="com">&lt;!-- Default bean name is 'mongo' --&gt;</span><span class="pln">
    *</span><span class="tag">&lt;mongo:mongo</span><span class="pln"> </span><span class="atn">host</span><span class="pun">=</span><span class="atv">"localhost"</span><span class="pln"> </span><span class="atn">port</span><span class="pun">=</span><span class="atv">"27017"</span><span class="tag">/&gt;</span><span class="pln">*

</span><span class="tag">&lt;/beans&gt;</span></code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>A more advanced configuration with MongoOptions is shown below (note these are not recommended values)</p>
</div>
<div class="exampleblock">
<div class="title">Example 36. XML schema to configure a com.mongodb.Mongo object with MongoOptions</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-xml" data-lang="xml"><span class="tag">&lt;beans&gt;</span><span class="pln">

  </span><span class="tag">&lt;mongo:mongo</span><span class="pln"> </span><span class="atn">host</span><span class="pun">=</span><span class="atv">"localhost"</span><span class="pln"> </span><span class="atn">port</span><span class="pun">=</span><span class="atv">"27017"</span><span class="tag">&gt;</span><span class="pln">
    </span><span class="tag">&lt;mongo:options</span><span class="pln"> </span><span class="atn">connections-per-host</span><span class="pun">=</span><span class="atv">"8"</span><span class="pln">
                   </span><span class="atn">threads-allowed-to-block-for-connection-multiplier</span><span class="pun">=</span><span class="atv">"4"</span><span class="pln">
                   </span><span class="atn">connect-timeout</span><span class="pun">=</span><span class="atv">"1000"</span><span class="pln">
                   </span><span class="atn">max-wait-time</span><span class="pun">=</span><span class="atv">"1500}"</span><span class="pln">
                   </span><span class="atn">auto-connect-retry</span><span class="pun">=</span><span class="atv">"true"</span><span class="pln">
                   </span><span class="atn">socket-keep-alive</span><span class="pun">=</span><span class="atv">"true"</span><span class="pln">
                   </span><span class="atn">socket-timeout</span><span class="pun">=</span><span class="atv">"1500"</span><span class="pln">
                   </span><span class="atn">slave-ok</span><span class="pun">=</span><span class="atv">"true"</span><span class="pln">
                   </span><span class="atn">write-number</span><span class="pun">=</span><span class="atv">"1"</span><span class="pln">
                   </span><span class="atn">write-timeout</span><span class="pun">=</span><span class="atv">"0"</span><span class="pln">
                   </span><span class="atn">write-fsync</span><span class="pun">=</span><span class="atv">"true"</span><span class="tag">/&gt;</span><span class="pln">
  </span><span class="tag">&lt;/mongo:mongo/&gt;</span><span class="pln">

</span><span class="tag">&lt;/beans&gt;</span></code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>A configuration using replica sets is shown below.</p>
</div>
<div class="exampleblock">
<div class="title">Example 37. XML schema to configure com.mongodb.Mongo object with Replica Sets</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-xml" data-lang="xml"><span class="tag">&lt;mongo:mongo</span><span class="pln"> </span><span class="atn">id</span><span class="pun">=</span><span class="atv">"replicaSetMongo"</span><span class="pln"> </span><span class="atn">replica-set</span><span class="pun">=</span><span class="atv">"127.0.0.1:27017,localhost:27018"</span><span class="tag">/&gt;</span></code></pre>
</div>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="mongo.mongo-db-factory"><a class="anchor" href="#mongo.mongo-db-factory"></a>8.3.3. The MongoDbFactory interface</h4>
<div class="paragraph">
<p>While <code>com.mongodb.Mongo</code> is the entry point to the 
MongoDB driver API, connecting to a specific MongoDB database instance 
requires additional information such as the database name and an 
optional username and password. With that information you can obtain a 
com.mongodb.DB object and access all the functionality of a specific 
MongoDB database instance. Spring provides the <code>org.springframework.data.mongodb.core.MongoDbFactory</code> interface shown below to bootstrap connectivity to the database.</p>
</div>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">interface</span><span class="pln"> </span><span class="typ">MongoDbFactory</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

  DB getDb</span><span class="pun">()</span><span class="pln"> </span><span class="kwd">throws</span><span class="pln"> </span><span class="typ">DataAccessException</span><span class="pun">;</span><span class="pln">

  DB getDb</span><span class="pun">(</span><span class="typ">String</span><span class="pln"> dbName</span><span class="pun">)</span><span class="pln"> </span><span class="kwd">throws</span><span class="pln"> </span><span class="typ">DataAccessException</span><span class="pun">;</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>The following sections show how you can use the container with either
 Java or the XML based metadata to configure an instance of the <code>MongoDbFactory</code> interface. In turn, you can use the <code>MongoDbFactory</code> instance to configure MongoTemplate.</p>
</div>
<div class="paragraph">
<p>The class <code>org.springframework.data.mongodb.core.SimpleMongoDbFactory</code> provides implements the MongoDbFactory interface and is created with a standard <code>com.mongodb.Mongo</code> instance, the database name and an optional <code>org.springframework.data.authentication.UserCredentials</code> constructor argument.</p>
</div>
<div class="paragraph">
<p>Instead of using the IoC container to create an instance of 
MongoTemplate, you can just use them in standard Java code as shown 
below.</p>
</div>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">MongoApp</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

  </span><span class="kwd">private</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">final</span><span class="pln"> </span><span class="typ">Log</span><span class="pln"> log </span><span class="pun">=</span><span class="pln"> </span><span class="typ">LogFactory</span><span class="pun">.</span><span class="pln">getLog</span><span class="pun">(</span><span class="typ">MongoApp</span><span class="pun">.</span><span class="kwd">class</span><span class="pun">);</span><span class="pln">

  </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> main</span><span class="pun">(</span><span class="typ">String</span><span class="pun">[]</span><span class="pln"> args</span><span class="pun">)</span><span class="pln"> </span><span class="kwd">throws</span><span class="pln"> </span><span class="typ">Exception</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

    </span><span class="typ">MongoOperations</span><span class="pln"> mongoOps </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">MongoTemplate</span><span class="pun">(*</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">SimpleMongoDbFactory</span><span class="pun">(</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Mongo</span><span class="pun">(),</span><span class="pln"> </span><span class="str">"database"</span><span class="pun">)*);</span><span class="pln">

    mongoOps</span><span class="pun">.</span><span class="pln">insert</span><span class="pun">(</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Person</span><span class="pun">(</span><span class="str">"Joe"</span><span class="pun">,</span><span class="pln"> </span><span class="lit">34</span><span class="pun">));</span><span class="pln">

    log</span><span class="pun">.</span><span class="pln">info</span><span class="pun">(</span><span class="pln">mongoOps</span><span class="pun">.</span><span class="pln">findOne</span><span class="pun">(</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Query</span><span class="pun">(</span><span class="pln">where</span><span class="pun">(</span><span class="str">"name"</span><span class="pun">).</span><span class="pln">is</span><span class="pun">(</span><span class="str">"Joe"</span><span class="pun">)),</span><span class="pln"> </span><span class="typ">Person</span><span class="pun">.</span><span class="kwd">class</span><span class="pun">));</span><span class="pln">

    mongoOps</span><span class="pun">.</span><span class="pln">dropCollection</span><span class="pun">(</span><span class="str">"person"</span><span class="pun">);</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>The code in bold highlights the use of SimpleMongoDbFactory and is the only difference between the listing shown in the <a href="#mongodb-getting-started">getting started section</a>.</p>
</div>
</div>
<div class="sect3">
<h4 id="mongo.mongo-db-factory-java"><a class="anchor" href="#mongo.mongo-db-factory-java"></a>8.3.4. Registering a MongoDbFactory instance using Java based metadata</h4>
<div class="paragraph">
<p>To register a MongoDbFactory instance with the container, you write 
code much like what was highlighted in the previous code listing. A 
simple example is shown below</p>
</div>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="lit">@Configuration</span><span class="pln">
</span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">MongoConfiguration</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

  </span><span class="kwd">public</span><span class="pln"> </span><span class="lit">@Bean</span><span class="pln"> </span><span class="typ">MongoDbFactory</span><span class="pln"> mongoDbFactory</span><span class="pun">()</span><span class="pln"> </span><span class="kwd">throws</span><span class="pln"> </span><span class="typ">Exception</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">SimpleMongoDbFactory</span><span class="pun">(</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Mongo</span><span class="pun">(),</span><span class="pln"> </span><span class="str">"database"</span><span class="pun">);</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>To define the username and password create an instance of <code>org.springframework.data.authentication.UserCredentials</code> and pass it into the constructor as shown below. This listing also shows using <code>MongoDbFactory</code> register an instance of MongoTemplate with the container.</p>
</div>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="lit">@Configuration</span><span class="pln">
</span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">MongoConfiguration</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

  </span><span class="kwd">public</span><span class="pln"> </span><span class="lit">@Bean</span><span class="pln"> </span><span class="typ">MongoDbFactory</span><span class="pln"> mongoDbFactory</span><span class="pun">()</span><span class="pln"> </span><span class="kwd">throws</span><span class="pln"> </span><span class="typ">Exception</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="typ">UserCredentials</span><span class="pln"> userCredentials </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">UserCredentials</span><span class="pun">(</span><span class="str">"joe"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"secret"</span><span class="pun">);</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">SimpleMongoDbFactory</span><span class="pun">(</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Mongo</span><span class="pun">(),</span><span class="pln"> </span><span class="str">"database"</span><span class="pun">,</span><span class="pln"> userCredentials</span><span class="pun">);</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">

  </span><span class="kwd">public</span><span class="pln"> </span><span class="lit">@Bean</span><span class="pln"> </span><span class="typ">MongoTemplate</span><span class="pln"> mongoTemplate</span><span class="pun">()</span><span class="pln"> </span><span class="kwd">throws</span><span class="pln"> </span><span class="typ">Exception</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">MongoTemplate</span><span class="pun">(</span><span class="pln">mongoDbFactory</span><span class="pun">());</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="mongo.mongo-db-factory-xml"><a class="anchor" href="#mongo.mongo-db-factory-xml"></a>8.3.5. Registering a MongoDbFactory instance using XML based metadata</h4>
<div class="paragraph">
<p>The mongo namespace provides a convient way to create a <code>SimpleMongoDbFactory</code> as compared to using the`&lt;beans/&gt;` namespace. Simple usage is shown below</p>
</div>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-xml" data-lang="xml"><span class="tag">&lt;mongo:db-factory</span><span class="pln"> </span><span class="atn">dbname</span><span class="pun">=</span><span class="atv">"database"</span><span class="tag">&gt;</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>In the above example a <code>com.mongodb.Mongo</code> instance is created using the default host and port number. The <code>SimpleMongoDbFactory</code> registered with the container is identified by the id 'mongoDbFactory' unless a value for the id attribute is specified.</p>
</div>
<div class="paragraph">
<p>You can also provide the host and port for the underlying <code>com.mongodb.Mongo</code> instance as shown below, in addition to username and password for the database.</p>
</div>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-xml" data-lang="xml"><span class="tag">&lt;mongo:db-factory</span><span class="pln"> </span><span class="atn">id</span><span class="pun">=</span><span class="atv">"anotherMongoDbFactory"</span><span class="pln">
                  </span><span class="atn">host</span><span class="pun">=</span><span class="atv">"localhost"</span><span class="pln">
                  </span><span class="atn">port</span><span class="pun">=</span><span class="atv">"27017"</span><span class="pln">
                  </span><span class="atn">dbname</span><span class="pun">=</span><span class="atv">"database"</span><span class="pln">
                  </span><span class="atn">username</span><span class="pun">=</span><span class="atv">"joe"</span><span class="pln">
                  </span><span class="atn">password</span><span class="pun">=</span><span class="atv">"secret"</span><span class="tag">/&gt;</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>If you need to configure additional options on the <code>com.mongodb.Mongo</code> instance that is used to create a <code>SimpleMongoDbFactory</code> you can refer to an existing bean using the <code>mongo-ref</code>
 attribute as shown below. To show another common usage pattern, this 
listing show the use of a property placeholder to parameterise the 
configuration and creating <code>MongoTemplate</code>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-xml" data-lang="xml"><span class="tag">&lt;context:property-placeholder</span><span class="pln"> </span><span class="atn">location</span><span class="pun">=</span><span class="atv">"classpath:/com/myapp/mongodb/config/mongo.properties"</span><span class="tag">/&gt;</span><span class="pln">

</span><span class="tag">&lt;mongo:mongo</span><span class="pln"> </span><span class="atn">host</span><span class="pun">=</span><span class="atv">"${mongo.host}"</span><span class="pln"> </span><span class="atn">port</span><span class="pun">=</span><span class="atv">"${mongo.port}"</span><span class="tag">&gt;</span><span class="pln">
  </span><span class="tag">&lt;mongo:options</span><span class="pln">
     </span><span class="atn">connections-per-host</span><span class="pun">=</span><span class="atv">"${mongo.connectionsPerHost}"</span><span class="pln">
     </span><span class="atn">threads-allowed-to-block-for-connection-multiplier</span><span class="pun">=</span><span class="atv">"${mongo.threadsAllowedToBlockForConnectionMultiplier}"</span><span class="pln">
     </span><span class="atn">connect-timeout</span><span class="pun">=</span><span class="atv">"${mongo.connectTimeout}"</span><span class="pln">
     </span><span class="atn">max-wait-time</span><span class="pun">=</span><span class="atv">"${mongo.maxWaitTime}"</span><span class="pln">
     </span><span class="atn">auto-connect-retry</span><span class="pun">=</span><span class="atv">"${mongo.autoConnectRetry}"</span><span class="pln">
     </span><span class="atn">socket-keep-alive</span><span class="pun">=</span><span class="atv">"${mongo.socketKeepAlive}"</span><span class="pln">
     </span><span class="atn">socket-timeout</span><span class="pun">=</span><span class="atv">"${mongo.socketTimeout}"</span><span class="pln">
     </span><span class="atn">slave-ok</span><span class="pun">=</span><span class="atv">"${mongo.slaveOk}"</span><span class="pln">
     </span><span class="atn">write-number</span><span class="pun">=</span><span class="atv">"1"</span><span class="pln">
     </span><span class="atn">write-timeout</span><span class="pun">=</span><span class="atv">"0"</span><span class="pln">
     </span><span class="atn">write-fsync</span><span class="pun">=</span><span class="atv">"true"</span><span class="tag">/&gt;</span><span class="pln">
</span><span class="tag">&lt;/mongo:mongo&gt;</span><span class="pln">

</span><span class="tag">&lt;mongo:db-factory</span><span class="pln"> </span><span class="atn">dbname</span><span class="pun">=</span><span class="atv">"database"</span><span class="pln"> </span><span class="atn">mongo-ref</span><span class="pun">=</span><span class="atv">"mongo"</span><span class="tag">/&gt;</span><span class="pln">

</span><span class="tag">&lt;bean</span><span class="pln"> </span><span class="atn">id</span><span class="pun">=</span><span class="atv">"anotherMongoTemplate"</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"org.springframework.data.mongodb.core.MongoTemplate"</span><span class="tag">&gt;</span><span class="pln">
  </span><span class="tag">&lt;constructor-arg</span><span class="pln"> </span><span class="atn">name</span><span class="pun">=</span><span class="atv">"mongoDbFactory"</span><span class="pln"> </span><span class="atn">ref</span><span class="pun">=</span><span class="atv">"mongoDbFactory"</span><span class="tag">/&gt;</span><span class="pln">
</span><span class="tag">&lt;/bean&gt;</span></code></pre>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="mongo-template"><a class="anchor" href="#mongo-template"></a>8.4. Introduction to MongoTemplate</h3>
<div class="paragraph">
<p>The class <code>MongoTemplate</code>, located in the package <code>org.springframework.data.document.mongodb</code>,
 is the central class of the Spring’s MongoDB support providing a rich 
feature set to interact with the database. The template offers 
convenience operations to create, update, delete and query for MongoDB 
documents and provides a mapping between your domain objects and MongoDB
 documents.</p>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
Once configured, <code>MongoTemplate</code> is thread-safe and can be reused across multiple instances.
</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>The mapping between MongoDB documents and domain classes is done by delegating to an implementation of the interface <code>MongoConverter</code>. Spring provides two implementations, <code>SimpleMappingConverter</code> and <code>MongoMappingConverter</code>, but you can also write your own converter. Please refer to the section on MongoConverters for more detailed information.</p>
</div>
<div class="paragraph">
<p>The <code>MongoTemplate</code> class implements the interface <code>MongoOperations</code>. In as much as possible, the methods on <code>MongoOperations</code> are named after methods available on the MongoDB driver <code>Collection</code>
 object as as to make the API familiar to existing MongoDB developers 
who are used to the driver API. For example, you will find methods such 
as "find", "findAndModify", "findOne", "insert", "remove", "save", 
"update" and "updateMulti". The design goal was to make it as easy as 
possible to transition between the use of the base MongoDB driver and <code>MongoOperations</code>. A major difference in between the two APIs is that MongoOperations can be passed domain objects instead of <code>DBObject</code> and there are fluent APIs for <code>Query</code>, <code>Criteria</code>, and <code>Update</code> operations instead of populating a <code>DBObject</code> to specify the parameters for those operations.</p>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
The preferred way to reference the operations on <code>MongoTemplate</code> instance is via its interface <code>MongoOperations</code>.
</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>The default converter implementation used by <code>MongoTemplate</code> is MongoMappingConverter. While the <code>MongoMappingConverter</code>
 can make use of additional metadata to specify the mapping of objects 
to documents it is also capable of converting objects that contain no 
additional metadata by using some conventions for the mapping of IDs and
 collection names. These conventions as well as the use of mapping 
annotations is explained in the <a href="#mongo.mapping">Mapping chapter</a>.</p>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
In the M2 release <code>SimpleMappingConverter</code>, was the default and this class is now deprecated as its functionality has been subsumed by the MongoMappingConverter.
</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>Another central feature of MongoTemplate is exception translation of 
exceptions thrown in the MongoDB Java driver into Spring’s portable Data
 Access Exception hierarchy. Refer to the section on <a href="#mongo.exception">exception translation</a> for more information.</p>
</div>
<div class="paragraph">
<p>While there are many convenience methods on <code>MongoTemplate</code>
 to help you easily perform common tasks if you should need to access 
the MongoDB driver API directly to access functionality not explicitly 
exposed by the MongoTemplate you can use one of several Execute callback
 methods to access underlying driver APIs. The execute callbacks will 
give you a reference to either a <code>com.mongodb.Collection</code> or a <code>com.mongodb.DB</code> object. Please see the section mongo.executioncallback[Execution Callbacks] for more information.</p>
</div>
<div class="paragraph">
<p>Now let’s look at a examples of how to work with the <code>MongoTemplate</code> in the context of the Spring container.</p>
</div>
<div class="sect3">
<h4 id="mongo-template.instantiating"><a class="anchor" href="#mongo-template.instantiating"></a>8.4.1. Instantiating MongoTemplate</h4>
<div class="paragraph">
<p>You can use Java to create and register an instance of MongoTemplate as shown below.</p>
</div>
<div class="exampleblock">
<div class="title">Example 38. Registering a com.mongodb.Mongo object and enabling Spring’s exception translation support</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="lit">@Configuration</span><span class="pln">
</span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">AppConfig</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

  </span><span class="kwd">public</span><span class="pln"> </span><span class="lit">@Bean</span><span class="pln"> </span><span class="typ">Mongo</span><span class="pln"> mongo</span><span class="pun">()</span><span class="pln"> </span><span class="kwd">throws</span><span class="pln"> </span><span class="typ">Exception</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
      </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Mongo</span><span class="pun">(</span><span class="str">"localhost"</span><span class="pun">);</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">

  </span><span class="kwd">public</span><span class="pln"> </span><span class="lit">@Bean</span><span class="pln"> </span><span class="typ">MongoTemplate</span><span class="pln"> mongoTemplate</span><span class="pun">()</span><span class="pln"> </span><span class="kwd">throws</span><span class="pln"> </span><span class="typ">Exception</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
      </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">MongoTemplate</span><span class="pun">(</span><span class="pln">mongo</span><span class="pun">(),</span><span class="pln"> </span><span class="str">"mydatabase"</span><span class="pun">);</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>There are several overloaded constructors of MongoTemplate. These are</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>MongoTemplate(Mongo mongo, String databaseName)</code> - takes the <code>com.mongodb.Mongo</code> object and the default database name to operate against.</p>
</li>
<li>
<p><code>MongoTemplate(Mongo mongo, String databaseName, UserCredentials userCredentials)</code> - adds the username and password for authenticating with the database.</p>
</li>
<li>
<p><code>MongoTemplate(MongoDbFactory mongoDbFactory)</code> - takes a MongoDbFactory object that encapsulated the <code>com.mongodb.Mongo</code> object, database name, and username and password.</p>
</li>
<li>
<p><code>MongoTemplate(MongoDbFactory mongoDbFactory, MongoConverter mongoConverter)</code> - adds a MongoConverter to use for mapping.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>You can also configure a MongoTemplate using Spring’s XML &lt;beans/&gt; schema.</p>
</div>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="pun">&lt;</span><span class="pln">mongo</span><span class="pun">:</span><span class="pln">mongo host</span><span class="pun">=</span><span class="str">"localhost"</span><span class="pln"> port</span><span class="pun">=</span><span class="str">"27017"</span><span class="pun">/&gt;</span><span class="pln">

</span><span class="pun">&lt;</span><span class="pln">bean id</span><span class="pun">=</span><span class="str">"mongoTemplate"</span><span class="pln"> </span><span class="kwd">class</span><span class="pun">=</span><span class="str">"org.springframework.data.mongodb.core.MongoTemplate"</span><span class="pun">&gt;</span><span class="pln">
  </span><span class="pun">&lt;</span><span class="pln">constructor</span><span class="pun">-</span><span class="pln">arg ref</span><span class="pun">=</span><span class="str">"mongo"</span><span class="pun">/&gt;</span><span class="pln">
  </span><span class="pun">&lt;</span><span class="pln">constructor</span><span class="pun">-</span><span class="pln">arg name</span><span class="pun">=</span><span class="str">"databaseName"</span><span class="pln"> value</span><span class="pun">=</span><span class="str">"geospatial"</span><span class="pun">/&gt;</span><span class="pln">
</span><span class="pun">&lt;/</span><span class="pln">bean</span><span class="pun">&gt;</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Other optional properties that you might like to set when creating a <code>MongoTemplate</code> are the default <code>WriteResultCheckingPolicy</code>, <code>WriteConcern</code>, and <code>ReadPreference</code>.</p>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
The preferred way to reference the operations on <code>MongoTemplate</code> instance is via its interface <code>MongoOperations</code>.
</td>
</tr>
</tbody></table>
</div>
</div>
<div class="sect3">
<h4 id="mongo-template.writeresultchecking"><a class="anchor" href="#mongo-template.writeresultchecking"></a>8.4.2. WriteResultChecking Policy</h4>
<div class="paragraph">
<p>When in development it is very handy to either log or throw an exception if the <code>com.mongodb.WriteResult</code>
 returned from any MongoDB operation contains an error. It is quite 
common to forget to do this during development and then end up with an 
application that looks like it runs successfully but in fact the 
database was not modified according to your expectations. Set 
MongoTemplate’s property to an enum with the following values, LOG, 
EXCEPTION, or NONE to either log the error, throw and exception or do 
nothing. The default is to use a <code>WriteResultChecking</code> value of NONE.</p>
</div>
</div>
<div class="sect3">
<h4 id="mongo-template.writeconcern"><a class="anchor" href="#mongo-template.writeconcern"></a>8.4.3. WriteConcern</h4>
<div class="paragraph">
<p>You can set the <code>com.mongodb.WriteConcern</code> property that the <code>MongoTemplate</code> will use for write operations if it has not yet been specified via the driver at a higher level such as <code>com.mongodb.Mongo</code>. If MongoTemplate’s <code>WriteConcern</code> property is not set it will default to the one set in the MongoDB driver’s DB or Collection setting.</p>
</div>
</div>
<div class="sect3">
<h4 id="mongo-template.writeconcernresolver"><a class="anchor" href="#mongo-template.writeconcernresolver"></a>8.4.4. WriteConcernResolver</h4>
<div class="paragraph">
<p>For more advanced cases where you want to set different <code>WriteConcern</code> values on a per-operation basis (for remove, update, insert and save operations), a strategy interface called <code>WriteConcernResolver</code> can be configured on <code>MongoTemplate</code>. Since <code>MongoTemplate</code> is used to persist POJOs, the <code>WriteConcernResolver</code> lets you create a policy that can map a specific POJO class to a <code>WriteConcern</code> value. The <code>WriteConcernResolver</code> interface is shown below.</p>
</div>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">interface</span><span class="pln"> </span><span class="typ">WriteConcernResolver</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  </span><span class="typ">WriteConcern</span><span class="pln"> resolve</span><span class="pun">(</span><span class="typ">MongoAction</span><span class="pln"> action</span><span class="pun">);</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>The passed in argument, MongoAction, is what you use to determine the <code>WriteConcern</code> value to be used or to use the value of the Template itself as a default. <code>MongoAction</code> contains the collection name being written to, the <code>java.lang.Class</code> of the POJO, the converted <code>DBObject</code>, as well as the operation as an enumeration (<code>MongoActionOperation</code>: REMOVE, UPDATE, INSERT, INSERT_LIST, SAVE) and a few other pieces of contextual information. For example,</p>
</div>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code><span class="kwd">private</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">MyAppWriteConcernResolver</span><span class="pln"> </span><span class="kwd">implements</span><span class="pln"> </span><span class="typ">WriteConcernResolver</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

  </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">WriteConcern</span><span class="pln"> resolve</span><span class="pun">(</span><span class="typ">MongoAction</span><span class="pln"> action</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">action</span><span class="pun">.</span><span class="pln">getEntityClass</span><span class="pun">().</span><span class="pln">getSimpleName</span><span class="pun">().</span><span class="pln">contains</span><span class="pun">(</span><span class="str">"Audit"</span><span class="pun">))</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
      </span><span class="kwd">return</span><span class="pln"> </span><span class="typ">WriteConcern</span><span class="pun">.</span><span class="pln">NONE</span><span class="pun">;</span><span class="pln">
    </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">else</span><span class="pln"> </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">action</span><span class="pun">.</span><span class="pln">getEntityClass</span><span class="pun">().</span><span class="pln">getSimpleName</span><span class="pun">().</span><span class="pln">contains</span><span class="pun">(</span><span class="str">"Metadata"</span><span class="pun">))</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
      </span><span class="kwd">return</span><span class="pln"> </span><span class="typ">WriteConcern</span><span class="pun">.</span><span class="pln">JOURNAL_SAFE</span><span class="pun">;</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> action</span><span class="pun">.</span><span class="pln">getDefaultWriteConcern</span><span class="pun">();</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="mongo-template.save-update-remove"><a class="anchor" href="#mongo-template.save-update-remove"></a>8.5. Saving, Updating, and Removing Documents</h3>
<div class="paragraph">
<p><code>MongoTemplate</code> provides a simple way for you to save, 
update, and delete your domain objects and map those objects to 
documents stored in MongoDB.</p>
</div>
<div class="paragraph">
<p>Given a simple class such as Person</p>
</div>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">Person</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

  </span><span class="kwd">private</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> id</span><span class="pun">;</span><span class="pln">
  </span><span class="kwd">private</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> name</span><span class="pun">;</span><span class="pln">
  </span><span class="kwd">private</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> age</span><span class="pun">;</span><span class="pln">

  </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">Person</span><span class="pun">(</span><span class="typ">String</span><span class="pln"> name</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> age</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">name </span><span class="pun">=</span><span class="pln"> name</span><span class="pun">;</span><span class="pln">
    </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">age </span><span class="pun">=</span><span class="pln"> age</span><span class="pun">;</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">

  </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> getId</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> id</span><span class="pun">;</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">
  </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> getName</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> name</span><span class="pun">;</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">
  </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> getAge</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> age</span><span class="pun">;</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">

  </span><span class="lit">@Override</span><span class="pln">
  </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> toString</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> </span><span class="str">"Person [id="</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> id </span><span class="pun">+</span><span class="pln"> </span><span class="str">", name="</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> name </span><span class="pun">+</span><span class="pln"> </span><span class="str">", age="</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> age </span><span class="pun">+</span><span class="pln"> </span><span class="str">"]"</span><span class="pun">;</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">

</span><span class="pun">}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>You can save, update and delete the object as shown below.</p>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<code>MongoOperations</code> is the interface that <code>MongoTemplate</code> implements.
</td>
</tr>
</tbody></table>
</div>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="kwd">package</span><span class="pln"> org</span><span class="pun">.</span><span class="pln">spring</span><span class="pun">.</span><span class="pln">example</span><span class="pun">;</span><span class="pln">

</span><span class="kwd">import</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> org</span><span class="pun">.</span><span class="pln">springframework</span><span class="pun">.</span><span class="pln">data</span><span class="pun">.</span><span class="pln">mongodb</span><span class="pun">.</span><span class="pln">core</span><span class="pun">.</span><span class="pln">query</span><span class="pun">.</span><span class="typ">Criteria</span><span class="pun">.</span><span class="pln">where</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> org</span><span class="pun">.</span><span class="pln">springframework</span><span class="pun">.</span><span class="pln">data</span><span class="pun">.</span><span class="pln">mongodb</span><span class="pun">.</span><span class="pln">core</span><span class="pun">.</span><span class="pln">query</span><span class="pun">.</span><span class="typ">Update</span><span class="pun">.</span><span class="pln">update</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> org</span><span class="pun">.</span><span class="pln">springframework</span><span class="pun">.</span><span class="pln">data</span><span class="pun">.</span><span class="pln">mongodb</span><span class="pun">.</span><span class="pln">core</span><span class="pun">.</span><span class="pln">query</span><span class="pun">.</span><span class="typ">Query</span><span class="pun">.</span><span class="pln">query</span><span class="pun">;</span><span class="pln">

</span><span class="kwd">import</span><span class="pln"> java</span><span class="pun">.</span><span class="pln">util</span><span class="pun">.</span><span class="typ">List</span><span class="pun">;</span><span class="pln">

</span><span class="kwd">import</span><span class="pln"> org</span><span class="pun">.</span><span class="pln">apache</span><span class="pun">.</span><span class="pln">commons</span><span class="pun">.</span><span class="pln">logging</span><span class="pun">.</span><span class="typ">Log</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> org</span><span class="pun">.</span><span class="pln">apache</span><span class="pun">.</span><span class="pln">commons</span><span class="pun">.</span><span class="pln">logging</span><span class="pun">.</span><span class="typ">LogFactory</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> org</span><span class="pun">.</span><span class="pln">springframework</span><span class="pun">.</span><span class="pln">data</span><span class="pun">.</span><span class="pln">mongodb</span><span class="pun">.</span><span class="pln">core</span><span class="pun">.</span><span class="typ">MongoOperations</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> org</span><span class="pun">.</span><span class="pln">springframework</span><span class="pun">.</span><span class="pln">data</span><span class="pun">.</span><span class="pln">mongodb</span><span class="pun">.</span><span class="pln">core</span><span class="pun">.</span><span class="typ">MongoTemplate</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> org</span><span class="pun">.</span><span class="pln">springframework</span><span class="pun">.</span><span class="pln">data</span><span class="pun">.</span><span class="pln">mongodb</span><span class="pun">.</span><span class="pln">core</span><span class="pun">.</span><span class="typ">SimpleMongoDbFactory</span><span class="pun">;</span><span class="pln">

</span><span class="kwd">import</span><span class="pln"> com</span><span class="pun">.</span><span class="pln">mongodb</span><span class="pun">.</span><span class="typ">Mongo</span><span class="pun">;</span><span class="pln">

</span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">MongoApp</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

  </span><span class="kwd">private</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">final</span><span class="pln"> </span><span class="typ">Log</span><span class="pln"> log </span><span class="pun">=</span><span class="pln"> </span><span class="typ">LogFactory</span><span class="pun">.</span><span class="pln">getLog</span><span class="pun">(</span><span class="typ">MongoApp</span><span class="pun">.</span><span class="kwd">class</span><span class="pun">);</span><span class="pln">

  </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> main</span><span class="pun">(</span><span class="typ">String</span><span class="pun">[]</span><span class="pln"> args</span><span class="pun">)</span><span class="pln"> </span><span class="kwd">throws</span><span class="pln"> </span><span class="typ">Exception</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

    </span><span class="typ">MongoOperations</span><span class="pln"> mongoOps </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">MongoTemplate</span><span class="pun">(</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">SimpleMongoDbFactory</span><span class="pun">(</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Mongo</span><span class="pun">(),</span><span class="pln"> </span><span class="str">"database"</span><span class="pun">));</span><span class="pln">

    </span><span class="typ">Person</span><span class="pln"> p </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Person</span><span class="pun">(</span><span class="str">"Joe"</span><span class="pun">,</span><span class="pln"> </span><span class="lit">34</span><span class="pun">);</span><span class="pln">

    </span><span class="com">// Insert is used to initially store the object into the database.</span><span class="pln">
    mongoOps</span><span class="pun">.</span><span class="pln">insert</span><span class="pun">(</span><span class="pln">p</span><span class="pun">);</span><span class="pln">
    log</span><span class="pun">.</span><span class="pln">info</span><span class="pun">(</span><span class="str">"Insert: "</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> p</span><span class="pun">);</span><span class="pln">

    </span><span class="com">// Find</span><span class="pln">
    p </span><span class="pun">=</span><span class="pln"> mongoOps</span><span class="pun">.</span><span class="pln">findById</span><span class="pun">(</span><span class="pln">p</span><span class="pun">.</span><span class="pln">getId</span><span class="pun">(),</span><span class="pln"> </span><span class="typ">Person</span><span class="pun">.</span><span class="kwd">class</span><span class="pun">);</span><span class="pln">
    log</span><span class="pun">.</span><span class="pln">info</span><span class="pun">(</span><span class="str">"Found: "</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> p</span><span class="pun">);</span><span class="pln">

    </span><span class="com">// Update</span><span class="pln">
    mongoOps</span><span class="pun">.</span><span class="pln">updateFirst</span><span class="pun">(</span><span class="pln">query</span><span class="pun">(</span><span class="pln">where</span><span class="pun">(</span><span class="str">"name"</span><span class="pun">).</span><span class="pln">is</span><span class="pun">(</span><span class="str">"Joe"</span><span class="pun">)),</span><span class="pln"> update</span><span class="pun">(</span><span class="str">"age"</span><span class="pun">,</span><span class="pln"> </span><span class="lit">35</span><span class="pun">),</span><span class="pln"> </span><span class="typ">Person</span><span class="pun">.</span><span class="kwd">class</span><span class="pun">);</span><span class="pln">
    p </span><span class="pun">=</span><span class="pln"> mongoOps</span><span class="pun">.</span><span class="pln">findOne</span><span class="pun">(</span><span class="pln">query</span><span class="pun">(</span><span class="pln">where</span><span class="pun">(</span><span class="str">"name"</span><span class="pun">).</span><span class="pln">is</span><span class="pun">(</span><span class="str">"Joe"</span><span class="pun">)),</span><span class="pln"> </span><span class="typ">Person</span><span class="pun">.</span><span class="kwd">class</span><span class="pun">);</span><span class="pln">
    log</span><span class="pun">.</span><span class="pln">info</span><span class="pun">(</span><span class="str">"Updated: "</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> p</span><span class="pun">);</span><span class="pln">

    </span><span class="com">// Delete</span><span class="pln">
    mongoOps</span><span class="pun">.</span><span class="pln">remove</span><span class="pun">(</span><span class="pln">p</span><span class="pun">);</span><span class="pln">

    </span><span class="com">// Check that deletion worked</span><span class="pln">
    </span><span class="typ">List</span><span class="pun">&lt;</span><span class="typ">Person</span><span class="pun">&gt;</span><span class="pln"> people </span><span class="pun">=</span><span class="pln">  mongoOps</span><span class="pun">.</span><span class="pln">findAll</span><span class="pun">(</span><span class="typ">Person</span><span class="pun">.</span><span class="kwd">class</span><span class="pun">);</span><span class="pln">
    log</span><span class="pun">.</span><span class="pln">info</span><span class="pun">(</span><span class="str">"Number of people = : "</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> people</span><span class="pun">.</span><span class="pln">size</span><span class="pun">());</span><span class="pln">


    mongoOps</span><span class="pun">.</span><span class="pln">dropCollection</span><span class="pun">(</span><span class="typ">Person</span><span class="pun">.</span><span class="kwd">class</span><span class="pun">);</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>This would produce the following log output (including debug messages from <code>MongoTemplate</code> itself)</p>
</div>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code><span class="pln">DEBUG apping</span><span class="pun">.</span><span class="typ">MongoPersistentEntityIndexCreator</span><span class="pun">:</span><span class="pln">  </span><span class="lit">80</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> </span><span class="typ">Analyzing</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> org</span><span class="pun">.</span><span class="pln">spring</span><span class="pun">.</span><span class="pln">example</span><span class="pun">.</span><span class="typ">Person</span><span class="pln"> </span><span class="kwd">for</span><span class="pln"> index information</span><span class="pun">.</span><span class="pln">
DEBUG work</span><span class="pun">.</span><span class="pln">data</span><span class="pun">.</span><span class="pln">mongodb</span><span class="pun">.</span><span class="pln">core</span><span class="pun">.</span><span class="typ">MongoTemplate</span><span class="pun">:</span><span class="pln"> </span><span class="lit">632</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> insert </span><span class="typ">DBObject</span><span class="pln"> containing fields</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="pln">_class</span><span class="pun">,</span><span class="pln"> age</span><span class="pun">,</span><span class="pln"> name</span><span class="pun">]</span><span class="pln"> </span><span class="kwd">in</span><span class="pln"> collection</span><span class="pun">:</span><span class="pln"> person
INFO               org</span><span class="pun">.</span><span class="pln">spring</span><span class="pun">.</span><span class="pln">example</span><span class="pun">.</span><span class="typ">MongoApp</span><span class="pun">:</span><span class="pln">  </span><span class="lit">30</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> </span><span class="typ">Insert</span><span class="pun">:</span><span class="pln"> </span><span class="typ">Person</span><span class="pln"> </span><span class="pun">[</span><span class="pln">id</span><span class="pun">=</span><span class="lit">4ddc6e784ce5b1eba3ceaf5c</span><span class="pun">,</span><span class="pln"> name</span><span class="pun">=</span><span class="typ">Joe</span><span class="pun">,</span><span class="pln"> age</span><span class="pun">=</span><span class="lit">34</span><span class="pun">]</span><span class="pln">
DEBUG work</span><span class="pun">.</span><span class="pln">data</span><span class="pun">.</span><span class="pln">mongodb</span><span class="pun">.</span><span class="pln">core</span><span class="pun">.</span><span class="typ">MongoTemplate</span><span class="pun">:</span><span class="lit">1246</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> findOne </span><span class="kwd">using</span><span class="pln"> query</span><span class="pun">:</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="str">"_id"</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="str">"$oid"</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="str">"4ddc6e784ce5b1eba3ceaf5c"</span><span class="pun">}}</span><span class="pln"> </span><span class="kwd">in</span><span class="pln"> db</span><span class="pun">.</span><span class="pln">collection</span><span class="pun">:</span><span class="pln"> database</span><span class="pun">.</span><span class="pln">person
INFO               org</span><span class="pun">.</span><span class="pln">spring</span><span class="pun">.</span><span class="pln">example</span><span class="pun">.</span><span class="typ">MongoApp</span><span class="pun">:</span><span class="pln">  </span><span class="lit">34</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> </span><span class="typ">Found</span><span class="pun">:</span><span class="pln"> </span><span class="typ">Person</span><span class="pln"> </span><span class="pun">[</span><span class="pln">id</span><span class="pun">=</span><span class="lit">4ddc6e784ce5b1eba3ceaf5c</span><span class="pun">,</span><span class="pln"> name</span><span class="pun">=</span><span class="typ">Joe</span><span class="pun">,</span><span class="pln"> age</span><span class="pun">=</span><span class="lit">34</span><span class="pun">]</span><span class="pln">
DEBUG work</span><span class="pun">.</span><span class="pln">data</span><span class="pun">.</span><span class="pln">mongodb</span><span class="pun">.</span><span class="pln">core</span><span class="pun">.</span><span class="typ">MongoTemplate</span><span class="pun">:</span><span class="pln"> </span><span class="lit">778</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> calling update </span><span class="kwd">using</span><span class="pln"> query</span><span class="pun">:</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="str">"name"</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="str">"Joe"</span><span class="pun">}</span><span class="pln"> </span><span class="kwd">and</span><span class="pln"> update</span><span class="pun">:</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="str">"$set"</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="str">"age"</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="lit">35</span><span class="pun">}}</span><span class="pln"> </span><span class="kwd">in</span><span class="pln"> collection</span><span class="pun">:</span><span class="pln"> person
DEBUG work</span><span class="pun">.</span><span class="pln">data</span><span class="pun">.</span><span class="pln">mongodb</span><span class="pun">.</span><span class="pln">core</span><span class="pun">.</span><span class="typ">MongoTemplate</span><span class="pun">:</span><span class="lit">1246</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> findOne </span><span class="kwd">using</span><span class="pln"> query</span><span class="pun">:</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="str">"name"</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="str">"Joe"</span><span class="pun">}</span><span class="pln"> </span><span class="kwd">in</span><span class="pln"> db</span><span class="pun">.</span><span class="pln">collection</span><span class="pun">:</span><span class="pln"> database</span><span class="pun">.</span><span class="pln">person
INFO               org</span><span class="pun">.</span><span class="pln">spring</span><span class="pun">.</span><span class="pln">example</span><span class="pun">.</span><span class="typ">MongoApp</span><span class="pun">:</span><span class="pln">  </span><span class="lit">39</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> </span><span class="typ">Updated</span><span class="pun">:</span><span class="pln"> </span><span class="typ">Person</span><span class="pln"> </span><span class="pun">[</span><span class="pln">id</span><span class="pun">=</span><span class="lit">4ddc6e784ce5b1eba3ceaf5c</span><span class="pun">,</span><span class="pln"> name</span><span class="pun">=</span><span class="typ">Joe</span><span class="pun">,</span><span class="pln"> age</span><span class="pun">=</span><span class="lit">35</span><span class="pun">]</span><span class="pln">
DEBUG work</span><span class="pun">.</span><span class="pln">data</span><span class="pun">.</span><span class="pln">mongodb</span><span class="pun">.</span><span class="pln">core</span><span class="pun">.</span><span class="typ">MongoTemplate</span><span class="pun">:</span><span class="pln"> </span><span class="lit">823</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> remove </span><span class="kwd">using</span><span class="pln"> query</span><span class="pun">:</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="str">"id"</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="str">"4ddc6e784ce5b1eba3ceaf5c"</span><span class="pun">}</span><span class="pln"> </span><span class="kwd">in</span><span class="pln"> collection</span><span class="pun">:</span><span class="pln"> person
INFO               org</span><span class="pun">.</span><span class="pln">spring</span><span class="pun">.</span><span class="pln">example</span><span class="pun">.</span><span class="typ">MongoApp</span><span class="pun">:</span><span class="pln">  </span><span class="lit">46</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> </span><span class="typ">Number</span><span class="pln"> of people </span><span class="pun">=</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="lit">0</span><span class="pln">
DEBUG work</span><span class="pun">.</span><span class="pln">data</span><span class="pun">.</span><span class="pln">mongodb</span><span class="pun">.</span><span class="pln">core</span><span class="pun">.</span><span class="typ">MongoTemplate</span><span class="pun">:</span><span class="pln"> </span><span class="lit">376</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> </span><span class="typ">Dropped</span><span class="pln"> collection </span><span class="pun">[</span><span class="pln">database</span><span class="pun">.</span><span class="pln">person</span><span class="pun">]</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>There was implicit conversion using the <code>MongoConverter</code> between a <code>String</code> and <code>ObjectId</code> as stored in the database and recognizing a convention of the property "Id" name.</p>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
This example is meant to show the use of save, update and remove 
operations on MongoTemplate and not to show complex mapping 
functionality
</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>The query syntax used in the example is explained in more detail in the section <a href="#mongo.query">Querying Documents</a>.</p>
</div>
<div class="sect3">
<h4 id="mongo-template.id-handling"><a class="anchor" href="#mongo-template.id-handling"></a>8.5.1. How the '_id' field is handled in the mapping layer</h4>
<div class="paragraph">
<p>MongoDB requires that you have an '_id' field for all documents. If you don’t provide one the driver will assign a <code>ObjectId</code> with a generated value. When using the <code>MongoMappingConverter</code> there are certain rules that govern how properties from the Java class is mapped to this '_id' field.</p>
</div>
<div class="paragraph">
<p>The following outlines what property will be mapped to the '_id' document field:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>A property or field annotated with <code>@Id</code> (<code>org.springframework.data.annotation.Id</code>) will be mapped to the '_id' field.</p>
</li>
<li>
<p>A property or field without an annotation but named <code>id</code> will be mapped to the '_id' field.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>The following outlines what type conversion, if any, will be done on 
the property mapped to the _id document field when using the <code>MappingMongoConverter</code>, the default for <code>MongoTemplate</code>.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>An id property or field declared as a String in the Java class will be converted to and stored as an <code>ObjectId</code> if possible using a Spring <code>Converter&lt;String, ObjectId&gt;</code>.
 Valid conversion rules are delegated to the MongoDB Java driver. If it 
cannot be converted to an ObjectId, then the value will be stored as a 
string in the database.</p>
</li>
<li>
<p>An id property or field declared as <code>BigInteger</code> in the Java class will be converted to and stored as an <code>ObjectId</code> using a Spring <code>Converter&lt;BigInteger, ObjectId&gt;</code>.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>If no field or property specified above is present in the Java class 
then an implicit '_id' file will be generated by the driver but not 
mapped to a property or field of the Java class.</p>
</div>
<div class="paragraph">
<p>When querying and updating <code>MongoTemplate</code> will use the converter to handle conversions of the <code>Query</code> and <code>Update</code>
 objects that correspond to the above rules for saving documents so 
field names and types used in your queries will be able to match what is
 in your domain classes.</p>
</div>
</div>
<div class="sect3">
<h4 id="mongo-template.type-mapping"><a class="anchor" href="#mongo-template.type-mapping"></a>8.5.2. Type mapping</h4>
<div class="paragraph">
<p>As MongoDB collections can contain documents that represent instances
 of a variety of types. A great example here is if you store a hierarchy
 of classes or simply have a class with a property of type <code>Object</code>.
 In the latter case the values held inside that property have to be read
 in correctly when retrieving the object. Thus we need a mechanism to 
store type information alongside the actual document.</p>
</div>
<div class="paragraph">
<p>To achieve that the <code>MappingMongoConverter</code> uses a <code>MongoTypeMapper</code> abstraction with <code>DefaultMongoTypeMapper</code> as it’s main implementation. It’s default behaviour is storing the fully qualified classname under <code>_class</code>
 inside the document for the top-level document as well as for every 
value if it’s a complex type and a subtype of the property type 
declared.</p>
</div>
<div class="exampleblock">
<div class="title">Example 39. Type mapping</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">Sample</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  </span><span class="typ">Contact</span><span class="pln"> value</span><span class="pun">;</span><span class="pln">
</span><span class="pun">}</span><span class="pln">

</span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">abstract</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">Contact</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="pun">…</span><span class="pln"> </span><span class="pun">}</span><span class="pln">

</span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">Person</span><span class="pln"> </span><span class="kwd">extends</span><span class="pln"> </span><span class="typ">Contact</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="pun">…</span><span class="pln"> </span><span class="pun">}</span><span class="pln">

</span><span class="typ">Sample</span><span class="pln"> sample </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Sample</span><span class="pun">();</span><span class="pln">
sample</span><span class="pun">.</span><span class="pln">value </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Person</span><span class="pun">();</span><span class="pln">

mongoTemplate</span><span class="pun">.</span><span class="pln">save</span><span class="pun">(</span><span class="pln">sample</span><span class="pun">);</span><span class="pln">

</span><span class="pun">{</span><span class="pln"> </span><span class="str">"_class"</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="str">"com.acme.Sample"</span><span class="pun">,</span><span class="pln">
  </span><span class="str">"value"</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="str">"_class"</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="str">"com.acme.Person"</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>As you can see we store the type information for the actual root 
class persistent as well as for the nested type as it is complex and a 
subtype of <code>Contact</code>. So if you’re now using <code>mongoTemplate.findAll(Object.class, "sample")</code> we are able to find out that the document stored shall be a <code>Sample</code> instance. We are also able to find out that the value property shall be a <code>Person</code> actually.</p>
</div>
<div class="sect4">
<h5 id="_customizing_type_mapping"><a class="anchor" href="#_customizing_type_mapping"></a>Customizing type mapping</h5>
<div class="paragraph">
<p>In case you want to avoid writing the entire Java class name as type 
information but rather like to use some key you can use the <code>@TypeAlias</code> annotation at the entity class being persisted. If you need to customize the mapping even more have a look at the <code>TypeInformationMapper</code> interface. An instance of that interface can be configured at the <code>DefaultMongoTypeMapper</code> which can be configured in turn on <code>MappingMongoConverter</code>.</p>
</div>
<div class="exampleblock">
<div class="title">Example 40. Defining a TypeAlias for an Entity</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="lit">@TypeAlias</span><span class="pun">(</span><span class="str">"pers"</span><span class="pun">)</span><span class="pln">
</span><span class="kwd">class</span><span class="pln"> </span><span class="typ">Person</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

</span><span class="pun">}</span></code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>Note that the resulting document will contain <code>"pers"</code> as the value in the <code>_class</code> Field.</p>
</div>
</div>
<div class="sect4">
<h5 id="_configuring_custom_type_mapping"><a class="anchor" href="#_configuring_custom_type_mapping"></a>Configuring custom type mapping</h5>
<div class="paragraph">
<p>The following example demonstrates how to configure a custom <code>MongoTypeMapper</code> in <code>MappingMongoConverter</code>.</p>
</div>
<div class="exampleblock">
<div class="title">Example 41. Configuring a custom MongoTypeMapper via Spring Java Config</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="kwd">class</span><span class="pln"> </span><span class="typ">CustomMongoTypeMapper</span><span class="pln"> </span><span class="kwd">extends</span><span class="pln"> </span><span class="typ">DefaultMongoTypeMapper</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  </span><span class="com">//implement custom type mapping here</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div>
</div>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="lit">@Configuration</span><span class="pln">
</span><span class="kwd">class</span><span class="pln"> </span><span class="typ">SampleMongoConfiguration</span><span class="pln"> </span><span class="kwd">extends</span><span class="pln"> </span><span class="typ">AbstractMongoConfiguration</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

  </span><span class="lit">@Override</span><span class="pln">
  </span><span class="kwd">protected</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> getDatabaseName</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> </span><span class="str">"database"</span><span class="pun">;</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">

  </span><span class="lit">@Override</span><span class="pln">
  </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">Mongo</span><span class="pln"> mongo</span><span class="pun">()</span><span class="pln"> </span><span class="kwd">throws</span><span class="pln"> </span><span class="typ">Exception</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Mongo</span><span class="pun">();</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">

  </span><span class="lit">@Bean</span><span class="pln">
  </span><span class="lit">@Override</span><span class="pln">
  </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">MappingMongoConverter</span><span class="pln"> mappingMongoConverter</span><span class="pun">()</span><span class="pln"> </span><span class="kwd">throws</span><span class="pln"> </span><span class="typ">Exception</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="typ">MappingMongoConverter</span><span class="pln"> mmc </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">super</span><span class="pun">.</span><span class="pln">mappingMongoConverter</span><span class="pun">();</span><span class="pln">
    mmc</span><span class="pun">.</span><span class="pln">setTypeMapper</span><span class="pun">(</span><span class="pln">customTypeMapper</span><span class="pun">());</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> mmc</span><span class="pun">;</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">

  </span><span class="lit">@Bean</span><span class="pln">
  </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">MongoTypeMapper</span><span class="pln"> customTypeMapper</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">CustomMongoTypeMapper</span><span class="pun">();</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Note that we are extending the <code>AbstractMongoConfiguration</code> class and override the bean definition of the <code>MappingMongoConverter</code> where we configure our custom <code>MongoTypeMapper</code>.</p>
</div>
<div class="exampleblock">
<div class="title">Example 42. Configuring a custom MongoTypeMapper via XML</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-xml" data-lang="xml"><span class="tag">&lt;mongo:mapping-converter</span><span class="pln"> </span><span class="atn">type-mapper-ref</span><span class="pun">=</span><span class="atv">"customMongoTypeMapper"</span><span class="tag">/&gt;</span><span class="pln">

</span><span class="tag">&lt;bean</span><span class="pln"> </span><span class="atn">name</span><span class="pun">=</span><span class="atv">"customMongoTypeMapper"</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"com.bubu.mongo.CustomMongoTypeMapper"</span><span class="tag">/&gt;</span></code></pre>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="mongo-template.save-insert"><a class="anchor" href="#mongo-template.save-insert"></a>8.5.3. Methods for saving and inserting documents</h4>
<div class="paragraph">
<p>There are several convenient methods on <code>MongoTemplate</code> 
for saving and inserting your objects. To have more fine grained control
 over the conversion process you can register Spring converters with the
 <code>MappingMongoConverter</code>, for example <code>Converter&lt;Person, DBObject&gt;</code> and <code>Converter&lt;DBObject, Person&gt;</code>.</p>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
The difference between insert and save operations is that a save 
operation will perform an insert if the object is not already present.
</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>The simple case of using the save operation is to save a POJO. In 
this case the collection name will be determined by name (not fully 
qualfied) of the class. You may also call the save operation with a 
specific collection name. The collection to store the object can be 
overriden using mapping metadata.</p>
</div>
<div class="paragraph">
<p>When inserting or saving, if the Id property is not set, the 
assumption is that its value will be auto-generated by the database. As 
such, for auto-generation of an ObjectId to succeed the type of the Id 
property/field in your class must be either a <code>String</code>, <code>ObjectId</code>, or <code>BigInteger</code>.</p>
</div>
<div class="paragraph">
<p>Here is a basic example of using the save operation and retrieving its contents.</p>
</div>
<div class="exampleblock">
<div class="title">Example 43. Inserting and retrieving documents using the MongoTemplate</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="kwd">import</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> org</span><span class="pun">.</span><span class="pln">springframework</span><span class="pun">.</span><span class="pln">data</span><span class="pun">.</span><span class="pln">mongodb</span><span class="pun">.</span><span class="pln">core</span><span class="pun">.</span><span class="pln">query</span><span class="pun">.</span><span class="typ">Criteria</span><span class="pun">.</span><span class="pln">where</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> org</span><span class="pun">.</span><span class="pln">springframework</span><span class="pun">.</span><span class="pln">data</span><span class="pun">.</span><span class="pln">mongodb</span><span class="pun">.</span><span class="pln">core</span><span class="pun">.</span><span class="pln">query</span><span class="pun">.</span><span class="typ">Criteria</span><span class="pun">.</span><span class="pln">query</span><span class="pun">;</span><span class="pln">
</span><span class="pun">…</span><span class="pln">

</span><span class="typ">Person</span><span class="pln"> p </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Person</span><span class="pun">(</span><span class="str">"Bob"</span><span class="pun">,</span><span class="pln"> </span><span class="lit">33</span><span class="pun">);</span><span class="pln">
mongoTemplate</span><span class="pun">.</span><span class="pln">insert</span><span class="pun">(</span><span class="pln">p</span><span class="pun">);</span><span class="pln">

</span><span class="typ">Person</span><span class="pln"> qp </span><span class="pun">=</span><span class="pln"> mongoTemplate</span><span class="pun">.</span><span class="pln">findOne</span><span class="pun">(</span><span class="pln">query</span><span class="pun">(</span><span class="pln">where</span><span class="pun">(</span><span class="str">"age"</span><span class="pun">).</span><span class="pln">is</span><span class="pun">(</span><span class="lit">33</span><span class="pun">)),</span><span class="pln"> </span><span class="typ">Person</span><span class="pun">.</span><span class="kwd">class</span><span class="pun">);</span></code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>The insert/save operations available to you are listed below.</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>void</code> <strong>save</strong> <code>(Object objectToSave)</code> Save the object to the default collection.</p>
</li>
<li>
<p><code>void</code> <strong>save</strong> <code>(Object objectToSave, String collectionName)</code> Save the object to the specified collection.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>A similar set of insert operations is listed below</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>void</code> <strong>insert</strong> <code>(Object objectToSave)</code> Insert the object to the default collection.</p>
</li>
<li>
<p><code>void</code> <strong>insert</strong> <code>(Object objectToSave, String collectionName)</code> Insert the object to the specified collection.</p>
</li>
</ul>
</div>
<div class="sect4">
<h5 id="mongo-template.save-insert.collection"><a class="anchor" href="#mongo-template.save-insert.collection"></a>Which collection will my documents be saved into?</h5>
<div class="paragraph">
<p>There are two ways to manage the collection name that is used for 
operating on the documents. The default collection name that is used is 
the class name changed to start with a lower-case letter. So a <code>com.test.Person</code>
 class would be stored in the "person" collection. You can customize 
this by providing a different collection name using the @Document 
annotation. You can also override the collection name by providing your 
own collection name as the last parameter for the selected MongoTemplate
 method calls.</p>
</div>
</div>
<div class="sect4">
<h5 id="mongo-template.save-insert.individual"><a class="anchor" href="#mongo-template.save-insert.individual"></a>Inserting or saving individual objects</h5>
<div class="paragraph">
<p>The MongoDB driver supports inserting a collection of documents in 
one operation. The methods in the MongoOperations interface that support
 this functionality are listed below</p>
</div>
<div class="ulist">
<ul>
<li>
<p><strong>insert</strong> inserts an object. If there is an existing document with the same id then an error is generated.</p>
</li>
<li>
<p><strong>insertAll</strong> takes a `Collection `of objects as the 
first parameter. This method inspects each object and inserts it to the 
appropriate collection based on the rules specified above.</p>
</li>
<li>
<p><strong>save</strong> saves the object overwriting any object that might exist with the same id.</p>
</li>
</ul>
</div>
</div>
<div class="sect4">
<h5 id="mongo-template.save-insert.batch"><a class="anchor" href="#mongo-template.save-insert.batch"></a>Inserting several objects in a batch</h5>
<div class="paragraph">
<p>The MongoDB driver supports inserting a collection of documents in 
one operation. The methods in the MongoOperations interface that support
 this functionality are listed below</p>
</div>
<div class="ulist">
<ul>
<li>
<p><strong>insert</strong>` methods that take a <code>Collection</code> as the first argument. This inserts a list of objects in a single batch write to the database.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect3">
<h4 id="mongodb-template-update"><a class="anchor" href="#mongodb-template-update"></a>8.5.4. Updating documents in a collection</h4>
<div class="paragraph">
<p>For updates we can elect to update the first document found using <code>MongoOperation’s method `updateFirst</code> or we can update all documents that were found to match the query using the method <code>updateMulti</code>. Here is an example of an update of all SAVINGS accounts where we are adding a one time $50.00 bonus to the balance using the <code>$inc</code> operator.</p>
</div>
<div class="exampleblock">
<div class="title">Example 44. Updating documents using the MongoTemplate</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="kwd">import</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> org</span><span class="pun">.</span><span class="pln">springframework</span><span class="pun">.</span><span class="pln">data</span><span class="pun">.</span><span class="pln">mongodb</span><span class="pun">.</span><span class="pln">core</span><span class="pun">.</span><span class="pln">query</span><span class="pun">.</span><span class="typ">Criteria</span><span class="pun">.</span><span class="pln">where</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> org</span><span class="pun">.</span><span class="pln">springframework</span><span class="pun">.</span><span class="pln">data</span><span class="pun">.</span><span class="pln">mongodb</span><span class="pun">.</span><span class="pln">core</span><span class="pun">.</span><span class="pln">query</span><span class="pun">.</span><span class="typ">Query</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> org</span><span class="pun">.</span><span class="pln">springframework</span><span class="pun">.</span><span class="pln">data</span><span class="pun">.</span><span class="pln">mongodb</span><span class="pun">.</span><span class="pln">core</span><span class="pun">.</span><span class="pln">query</span><span class="pun">.</span><span class="typ">Update</span><span class="pun">;</span><span class="pln">

</span><span class="pun">...</span><span class="pln">

</span><span class="typ">WriteResult</span><span class="pln"> wr </span><span class="pun">=</span><span class="pln"> mongoTemplate</span><span class="pun">.</span><span class="pln">updateMulti</span><span class="pun">(</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Query</span><span class="pun">(</span><span class="pln">where</span><span class="pun">(</span><span class="str">"accounts.accountType"</span><span class="pun">).</span><span class="pln">is</span><span class="pun">(</span><span class="typ">Account</span><span class="pun">.</span><span class="typ">Type</span><span class="pun">.</span><span class="pln">SAVINGS</span><span class="pun">)),</span><span class="pln">
  </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Update</span><span class="pun">().</span><span class="pln">inc</span><span class="pun">(</span><span class="str">"accounts.$.balance"</span><span class="pun">,</span><span class="pln"> </span><span class="lit">50.00</span><span class="pun">),</span><span class="pln"> </span><span class="typ">Account</span><span class="pun">.</span><span class="kwd">class</span><span class="pun">);</span></code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>In addition to the <code>Query</code> discussed above we provide the update definition using an <code>Update</code> object. The <code>Update</code> class has methods that match the update modifiers available for MongoDB.</p>
</div>
<div class="paragraph">
<p>As you can see most methods return the <code>Update</code> object to provide a fluent style for the API.</p>
</div>
<div class="sect4">
<h5 id="mongodb-template-update.methods"><a class="anchor" href="#mongodb-template-update.methods"></a>Methods for executing updates for documents</h5>
<div class="ulist">
<ul>
<li>
<p><strong>updateFirst</strong> Updates the first document that matches the query document criteria with the provided updated document.</p>
</li>
<li>
<p><strong>updateMulti</strong> Updates all objects that match the query document criteria with the provided updated document.</p>
</li>
</ul>
</div>
</div>
<div class="sect4">
<h5 id="mongodb-template-update.update"><a class="anchor" href="#mongodb-template-update.update"></a>Methods for the Update class</h5>
<div class="paragraph">
<p>The Update class can be used with a little 'syntax sugar' as its 
methods are meant to be chained together and you can kick-start the 
creation of a new Update instance via the static method <code>public static Update update(String key, Object value)</code> and using static imports.</p>
</div>
<div class="paragraph">
<p>Here is a listing of methods on the Update class</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>Update</code> <strong>addToSet</strong> <code>(String key, Object value) ` Update using the `$addToSet</code> update modifier</p>
</li>
<li>
<p><code>Update</code> <strong>inc</strong> <code>(String key, Number inc)</code> Update using the <code>$inc</code> update modifier</p>
</li>
<li>
<p><code>Update</code> <strong>pop</strong> <code>(String key, Update.Position pos)</code> Update using the <code>$pop</code> update modifier</p>
</li>
<li>
<p><code>Update</code> <strong>pull</strong> <code>(String key, Object value)</code> Update using the <code>$pull</code> update modifier</p>
</li>
<li>
<p><code>Update</code> <strong>pullAll</strong> <code>(String key, Object[] values)</code> Update using the <code>$pullAll</code> update modifier</p>
</li>
<li>
<p><code>Update</code> <strong>push</strong> <code>(String key, Object value) ` Update using the `$push</code> update modifier</p>
</li>
<li>
<p><code>Update</code> <strong>pushAll</strong> <code>(String key, Object[] values)</code> Update using the <code>$pushAll</code> update modifier</p>
</li>
<li>
<p><code>Update</code> <strong>rename</strong> <code>(String oldName, String newName)</code> Update using the <code>$rename</code> update modifier</p>
</li>
<li>
<p><code>Update</code> <strong>set</strong> <code>(String key, Object value)</code> Update using the <code>$set</code> update modifier</p>
</li>
<li>
<p><code>Update</code> <strong>unset</strong> <code>(String key)</code> Update using the <code>$unset</code> update modifier</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect3">
<h4 id="mongo-template.upserts"><a class="anchor" href="#mongo-template.upserts"></a>8.5.5. Upserting documents in a collection</h4>
<div class="paragraph">
<p>Related to performing an <code>updateFirst</code> operations, you can
 also perform an upsert operation which will perform an insert if no 
document is found that matches the query. The document that is inserted 
is a combination of the query document and the update document. Here is 
an example</p>
</div>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code><span class="kwd">template</span><span class="pun">.</span><span class="pln">upsert</span><span class="pun">(</span><span class="pln">query</span><span class="pun">(</span><span class="kwd">where</span><span class="pun">(</span><span class="str">"ssn"</span><span class="pun">).</span><span class="kwd">is</span><span class="pun">(</span><span class="lit">1111</span><span class="pun">).</span><span class="kwd">and</span><span class="pun">(</span><span class="str">"firstName"</span><span class="pun">).</span><span class="kwd">is</span><span class="pun">(</span><span class="str">"Joe"</span><span class="pun">).</span><span class="kwd">and</span><span class="pun">(</span><span class="str">"Fraizer"</span><span class="pun">).</span><span class="kwd">is</span><span class="pun">(</span><span class="str">"Update"</span><span class="pun">)),</span><span class="pln"> update</span><span class="pun">(</span><span class="str">"address"</span><span class="pun">,</span><span class="pln"> addr</span><span class="pun">),</span><span class="pln"> </span><span class="typ">Person</span><span class="pun">.</span><span class="kwd">class</span><span class="pun">);</span></code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="mongo-template.find-and-upsert"><a class="anchor" href="#mongo-template.find-and-upsert"></a>8.5.6. Finding and Upserting documents in a collection</h4>
<div class="paragraph">
<p>The <code>findAndModify(…)</code> method on DBCollection can update a document and return either the old or newly updated document in a single operation. <code>MongoTemplate</code> provides a findAndModify method that takes <code>Query</code> and <code>Update</code> classes and converts from <code>DBObject</code> to your POJOs. Here are the methods</p>
</div>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="pun">&lt;</span><span class="pln">T</span><span class="pun">&gt;</span><span class="pln"> T findAndModify</span><span class="pun">(</span><span class="typ">Query</span><span class="pln"> query</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Update</span><span class="pln"> update</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Class</span><span class="pun">&lt;</span><span class="pln">T</span><span class="pun">&gt;</span><span class="pln"> entityClass</span><span class="pun">);</span><span class="pln">

</span><span class="pun">&lt;</span><span class="pln">T</span><span class="pun">&gt;</span><span class="pln"> T findAndModify</span><span class="pun">(</span><span class="typ">Query</span><span class="pln"> query</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Update</span><span class="pln"> update</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Class</span><span class="pun">&lt;</span><span class="pln">T</span><span class="pun">&gt;</span><span class="pln"> entityClass</span><span class="pun">,</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> collectionName</span><span class="pun">);</span><span class="pln">

</span><span class="pun">&lt;</span><span class="pln">T</span><span class="pun">&gt;</span><span class="pln"> T findAndModify</span><span class="pun">(</span><span class="typ">Query</span><span class="pln"> query</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Update</span><span class="pln"> update</span><span class="pun">,</span><span class="pln"> </span><span class="typ">FindAndModifyOptions</span><span class="pln"> options</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Class</span><span class="pun">&lt;</span><span class="pln">T</span><span class="pun">&gt;</span><span class="pln"> entityClass</span><span class="pun">);</span><span class="pln">

</span><span class="pun">&lt;</span><span class="pln">T</span><span class="pun">&gt;</span><span class="pln"> T findAndModify</span><span class="pun">(</span><span class="typ">Query</span><span class="pln"> query</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Update</span><span class="pln"> update</span><span class="pun">,</span><span class="pln"> </span><span class="typ">FindAndModifyOptions</span><span class="pln"> options</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Class</span><span class="pun">&lt;</span><span class="pln">T</span><span class="pun">&gt;</span><span class="pln"> entityClass</span><span class="pun">,</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> collectionName</span><span class="pun">);</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>As an example usage, we will insert of few <code>Person</code> objects into the container and perform a simple findAndUpdate operation</p>
</div>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="pln">mongoTemplate</span><span class="pun">.</span><span class="pln">insert</span><span class="pun">(</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Person</span><span class="pun">(</span><span class="str">"Tom"</span><span class="pun">,</span><span class="pln"> </span><span class="lit">21</span><span class="pun">));</span><span class="pln">
mongoTemplate</span><span class="pun">.</span><span class="pln">insert</span><span class="pun">(</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Person</span><span class="pun">(</span><span class="str">"Dick"</span><span class="pun">,</span><span class="pln"> </span><span class="lit">22</span><span class="pun">));</span><span class="pln">
mongoTemplate</span><span class="pun">.</span><span class="pln">insert</span><span class="pun">(</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Person</span><span class="pun">(</span><span class="str">"Harry"</span><span class="pun">,</span><span class="pln"> </span><span class="lit">23</span><span class="pun">));</span><span class="pln">

</span><span class="typ">Query</span><span class="pln"> query </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Query</span><span class="pun">(</span><span class="typ">Criteria</span><span class="pun">.</span><span class="pln">where</span><span class="pun">(</span><span class="str">"firstName"</span><span class="pun">).</span><span class="pln">is</span><span class="pun">(</span><span class="str">"Harry"</span><span class="pun">));</span><span class="pln">
</span><span class="typ">Update</span><span class="pln"> update </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Update</span><span class="pun">().</span><span class="pln">inc</span><span class="pun">(</span><span class="str">"age"</span><span class="pun">,</span><span class="pln"> </span><span class="lit">1</span><span class="pun">);</span><span class="pln">
</span><span class="typ">Person</span><span class="pln"> p </span><span class="pun">=</span><span class="pln"> mongoTemplate</span><span class="pun">.</span><span class="pln">findAndModify</span><span class="pun">(</span><span class="pln">query</span><span class="pun">,</span><span class="pln"> update</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Person</span><span class="pun">.</span><span class="kwd">class</span><span class="pun">);</span><span class="pln"> </span><span class="com">// return's old person object</span><span class="pln">

assertThat</span><span class="pun">(</span><span class="pln">p</span><span class="pun">.</span><span class="pln">getFirstName</span><span class="pun">(),</span><span class="pln"> is</span><span class="pun">(</span><span class="str">"Harry"</span><span class="pun">));</span><span class="pln">
assertThat</span><span class="pun">(</span><span class="pln">p</span><span class="pun">.</span><span class="pln">getAge</span><span class="pun">(),</span><span class="pln"> is</span><span class="pun">(</span><span class="lit">23</span><span class="pun">));</span><span class="pln">
p </span><span class="pun">=</span><span class="pln"> mongoTemplate</span><span class="pun">.</span><span class="pln">findOne</span><span class="pun">(</span><span class="pln">query</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Person</span><span class="pun">.</span><span class="kwd">class</span><span class="pun">);</span><span class="pln">
assertThat</span><span class="pun">(</span><span class="pln">p</span><span class="pun">.</span><span class="pln">getAge</span><span class="pun">(),</span><span class="pln"> is</span><span class="pun">(</span><span class="lit">24</span><span class="pun">));</span><span class="pln">

</span><span class="com">// Now return the newly updated document when updating</span><span class="pln">
p </span><span class="pun">=</span><span class="pln"> template</span><span class="pun">.</span><span class="pln">findAndModify</span><span class="pun">(</span><span class="pln">query</span><span class="pun">,</span><span class="pln"> update</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">FindAndModifyOptions</span><span class="pun">().</span><span class="pln">returnNew</span><span class="pun">(</span><span class="kwd">true</span><span class="pun">),</span><span class="pln"> </span><span class="typ">Person</span><span class="pun">.</span><span class="kwd">class</span><span class="pun">);</span><span class="pln">
assertThat</span><span class="pun">(</span><span class="pln">p</span><span class="pun">.</span><span class="pln">getAge</span><span class="pun">(),</span><span class="pln"> is</span><span class="pun">(</span><span class="lit">25</span><span class="pun">));</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>The <code>FindAndModifyOptions</code> lets you set the options of returnNew, upsert, and remove. An example extending off the previous code snippit is shown below</p>
</div>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="typ">Query</span><span class="pln"> query2 </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Query</span><span class="pun">(</span><span class="typ">Criteria</span><span class="pun">.</span><span class="pln">where</span><span class="pun">(</span><span class="str">"firstName"</span><span class="pun">).</span><span class="pln">is</span><span class="pun">(</span><span class="str">"Mary"</span><span class="pun">));</span><span class="pln">
p </span><span class="pun">=</span><span class="pln"> mongoTemplate</span><span class="pun">.</span><span class="pln">findAndModify</span><span class="pun">(</span><span class="pln">query2</span><span class="pun">,</span><span class="pln"> update</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">FindAndModifyOptions</span><span class="pun">().</span><span class="pln">returnNew</span><span class="pun">(</span><span class="kwd">true</span><span class="pun">).</span><span class="pln">upsert</span><span class="pun">(</span><span class="kwd">true</span><span class="pun">),</span><span class="pln"> </span><span class="typ">Person</span><span class="pun">.</span><span class="kwd">class</span><span class="pun">);</span><span class="pln">
assertThat</span><span class="pun">(</span><span class="pln">p</span><span class="pun">.</span><span class="pln">getFirstName</span><span class="pun">(),</span><span class="pln"> is</span><span class="pun">(</span><span class="str">"Mary"</span><span class="pun">));</span><span class="pln">
assertThat</span><span class="pun">(</span><span class="pln">p</span><span class="pun">.</span><span class="pln">getAge</span><span class="pun">(),</span><span class="pln"> is</span><span class="pun">(</span><span class="lit">1</span><span class="pun">));</span></code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="mongo-template.delete"><a class="anchor" href="#mongo-template.delete"></a>8.5.7. Methods for removing documents</h4>
<div class="paragraph">
<p>You can use several overloaded methods to remove an object from the database.</p>
</div>
<div class="ulist">
<ul>
<li>
<p><strong>remove</strong> Remove the given document based on one of the
 following: a specific object instance, a query document criteria 
combined with a class or a query document criteria combined with a 
specific collection name.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect2">
<h3 id="mongo.query"><a class="anchor" href="#mongo.query"></a>8.6. Querying Documents</h3>
<div class="paragraph">
<p>You can express your queries using the <code>Query</code> and <code>Criteria</code> classes which have method names that mirror the native MongoDB operator names such as <code>lt</code>, <code>lte</code>, <code>is</code>, and others. The <code>Query</code> and <code>Criteria</code>
 classes follow a fluent API style so that you can easily chain together
 multiple method criteria and queries while having easy to understand 
code. Static imports in Java are used to help remove the need to see the
 'new' keyword for creating <code>Query</code> and <code>Criteria</code> instances so as to improve readability. If you like to create <code>Query</code> instances from a plain JSON String use <code>BasicQuery</code>.</p>
</div>
<div class="exampleblock">
<div class="title">Example 45. Creating a Query instance from a plain JSON String</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="typ">BasicQuery</span><span class="pln"> query </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">BasicQuery</span><span class="pun">(</span><span class="str">"{ age : { $lt : 50 }, accounts.balance : { $gt : 1000.00 }}"</span><span class="pun">);</span><span class="pln">
</span><span class="typ">List</span><span class="pun">&lt;</span><span class="typ">Person</span><span class="pun">&gt;</span><span class="pln"> result </span><span class="pun">=</span><span class="pln"> mongoTemplate</span><span class="pun">.</span><span class="pln">find</span><span class="pun">(</span><span class="pln">query</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Person</span><span class="pun">.</span><span class="kwd">class</span><span class="pun">);</span></code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>GeoSpatial queries are also supported and are described more in the section <a href="#mongo.geospatial">GeoSpatial Queries</a>.</p>
</div>
<div class="paragraph">
<p>Map-Reduce operations are also supported and are described more in the section <a href="#mongo.mapreduce">Map-Reduce</a>.</p>
</div>
<div class="sect3">
<h4 id="mongodb-template-query"><a class="anchor" href="#mongodb-template-query"></a>8.6.1. Querying documents in a collection</h4>
<div class="paragraph">
<p>We saw how to retrieve a single document using the findOne and 
findById methods on MongoTemplate in previous sections which return a 
single domain object. We can also query for a collection of documents to
 be returned as a list of domain objects. Assuming that we have a number
 of Person objects with name and age stored as documents in a collection
 and that each person has an embedded account document with a balance. 
We can now run a query using the following code.</p>
</div>
<div class="exampleblock">
<div class="title">Example 46. Querying for documents using the MongoTemplate</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="kwd">import</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> org</span><span class="pun">.</span><span class="pln">springframework</span><span class="pun">.</span><span class="pln">data</span><span class="pun">.</span><span class="pln">mongodb</span><span class="pun">.</span><span class="pln">core</span><span class="pun">.</span><span class="pln">query</span><span class="pun">.</span><span class="typ">Criteria</span><span class="pun">.</span><span class="pln">where</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> org</span><span class="pun">.</span><span class="pln">springframework</span><span class="pun">.</span><span class="pln">data</span><span class="pun">.</span><span class="pln">mongodb</span><span class="pun">.</span><span class="pln">core</span><span class="pun">.</span><span class="pln">query</span><span class="pun">.</span><span class="typ">Query</span><span class="pun">.</span><span class="pln">query</span><span class="pun">;</span><span class="pln">

</span><span class="pun">…</span><span class="pln">

</span><span class="typ">List</span><span class="pun">&lt;</span><span class="typ">Person</span><span class="pun">&gt;</span><span class="pln"> result </span><span class="pun">=</span><span class="pln"> mongoTemplate</span><span class="pun">.</span><span class="pln">find</span><span class="pun">(</span><span class="pln">query</span><span class="pun">(</span><span class="pln">where</span><span class="pun">(</span><span class="str">"age"</span><span class="pun">).</span><span class="pln">lt</span><span class="pun">(</span><span class="lit">50</span><span class="pun">)</span><span class="pln">
  </span><span class="pun">.</span><span class="pln">and</span><span class="pun">(</span><span class="str">"accounts.balance"</span><span class="pun">).</span><span class="pln">gt</span><span class="pun">(</span><span class="lit">1000.00d</span><span class="pun">)),</span><span class="pln"> </span><span class="typ">Person</span><span class="pun">.</span><span class="kwd">class</span><span class="pun">);</span></code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>All find methods take a <code>Query</code> object as a parameter. 
This object defines the criteria and options used to perform the query. 
The criteria is specified using a <code>Criteria</code> object that has a static factory method named <code>where</code> used to instantiate a new <code>Criteria</code> object. We recommend using a static import for <code>org.springframework.data.mongodb.core.query.Criteria.where</code> and <code>Query.query</code> to make the query more readable.</p>
</div>
<div class="paragraph">
<p>This query should return a list of <code>Person</code> objects that meet the specified criteria. The <code>Criteria</code> class has the following methods that correspond to the operators provided in MongoDB.</p>
</div>
<div class="paragraph">
<p>As you can see most methods return the <code>Criteria</code> object to provide a fluent style for the API.</p>
</div>
<div class="sect4">
<h5 id="mongodb-template-query.criteria"><a class="anchor" href="#mongodb-template-query.criteria"></a>Methods for the Criteria class</h5>
<div class="ulist">
<ul>
<li>
<p><code>Criteria</code> <strong>all</strong> <code>(Object o)</code> Creates a criterion using the <code>$all</code> operator</p>
</li>
<li>
<p><code>Criteria</code> <strong>and</strong> <code>(String key)</code> Adds a chained <code>Criteria</code> with the specified <code>key</code> to the current <code>Criteria</code> and returns the newly created one</p>
</li>
<li>
<p><code>Criteria</code> <strong>andOperator</strong> <code>(Criteria…​ criteria)</code> Creates an and query using the <code>$and</code> operator for all of the provided criteria (requires MongoDB 2.0 or later)</p>
</li>
<li>
<p><code>Criteria</code> <strong>elemMatch</strong> <code>(Criteria c)</code> Creates a criterion using the <code>$elemMatch</code> operator</p>
</li>
<li>
<p><code>Criteria</code> <strong>exists</strong> <code>(boolean b)</code> Creates a criterion using the <code>$exists</code> operator</p>
</li>
<li>
<p><code>Criteria</code> <strong>gt</strong> <code>(Object o)</code> Creates a criterion using the <code>$gt</code> operator</p>
</li>
<li>
<p><code>Criteria</code> <strong>gte</strong> <code>(Object o)</code> Creates a criterion using the <code>$gte</code> operator</p>
</li>
<li>
<p><code>Criteria</code> <strong>in</strong> <code>(Object…​ o)</code> Creates a criterion using the <code>$in</code> operator for a varargs argument.</p>
</li>
<li>
<p><code>Criteria</code> <strong>in</strong> <code>(Collection&lt;?&gt; collection)</code> Creates a criterion using the <code>$in</code> operator using a collection</p>
</li>
<li>
<p><code>Criteria</code> <strong>is</strong> <code>(Object o)</code> Creates a criterion using the <code>$is</code> operator</p>
</li>
<li>
<p><code>Criteria</code> <strong>lt</strong> <code>(Object o)</code> Creates a criterion using the <code>$lt</code> operator</p>
</li>
<li>
<p><code>Criteria</code> <strong>lte</strong> <code>(Object o)</code> Creates a criterion using the <code>$lte</code> operator</p>
</li>
<li>
<p><code>Criteria</code> <strong>mod</strong> <code>(Number value, Number remainder)</code> Creates a criterion using the <code>$mod</code> operator</p>
</li>
<li>
<p><code>Criteria</code> <strong>ne</strong> <code>(Object o)</code> Creates a criterion using the <code>$ne</code> operator</p>
</li>
<li>
<p><code>Criteria</code> <strong>nin</strong> <code>(Object…​ o)</code> Creates a criterion using the <code>$nin</code> operator</p>
</li>
<li>
<p><code>Criteria</code> <strong>norOperator</strong> <code>(Criteria…​ criteria)</code> Creates an nor query using the <code>$nor</code> operator for all of the provided criteria</p>
</li>
<li>
<p><code>Criteria</code> <strong>not</strong> <code>()</code> Creates a criterion using the <code>$not</code> meta operator which affects the clause directly following</p>
</li>
<li>
<p><code>Criteria</code> <strong>orOperator</strong> <code>(Criteria…​ criteria)</code> Creates an or query using the <code>$or</code> operator for all of the provided criteria</p>
</li>
<li>
<p><code>Criteria</code> <strong>regex</strong> <code>(String re)</code> Creates a criterion using a <code>$regex</code></p>
</li>
<li>
<p><code>Criteria</code> <strong>size</strong> <code>(int s)</code> Creates a criterion using the <code>$size</code> operator</p>
</li>
<li>
<p><code>Criteria</code> <strong>type</strong> <code>(int t)</code> Creates a criterion using the <code>$type</code> operator</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>There are also methods on the Criteria class for geospatial queries. Here is a listing but look at the section on <a href="#mongo.geospatial">GeoSpatial Queries</a> to see them in action.</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>Criteria</code> <strong>within</strong> <code>(Circle circle)</code> Creates a geospatial criterion using <code>$geoWithin $center</code> operators.</p>
</li>
<li>
<p><code>Criteria</code> <strong>within</strong> <code>(Box box)</code> Creates a geospatial criterion using a <code>$geoWithin $box</code> operation.</p>
</li>
<li>
<p><code>Criteria</code> <strong>withinSphere</strong> <code>(Circle circle)</code> Creates a geospatial criterion using <code>$geoWithin $center</code> operators.</p>
</li>
<li>
<p><code>Criteria</code> <strong>near</strong> <code>(Point point)</code> Creates a geospatial criterion using a `$near `operation</p>
</li>
<li>
<p><code>Criteria</code> <strong>nearSphere</strong> <code>(Point point)</code> Creates a geospatial criterion using <code>$nearSphere$center</code> operations. This is only available for MongoDB 1.7 and higher.</p>
</li>
<li>
<p><code>Criteria</code> <strong>minDistance</strong> <code>(double minDistance)</code> Creates a geospatial criterion using the <code>$minDistance</code> operation, for use with $near.</p>
</li>
<li>
<p><code>Criteria</code> <strong>maxDistance</strong> <code>(double maxDistance)</code> Creates a geospatial criterion using the <code>$maxDistance</code> operation, for use with $near.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>The <code>Query</code> class has some additional methods used to provide options for the query.</p>
</div>
</div>
<div class="sect4">
<h5 id="mongodb-template-query.query"><a class="anchor" href="#mongodb-template-query.query"></a>Methods for the Query class</h5>
<div class="ulist">
<ul>
<li>
<p><code>Query</code> <strong>addCriteria</strong> <code>(Criteria criteria)</code> used to add additional criteria to the query</p>
</li>
<li>
<p><code>Field</code> <strong>fields</strong> <code>()</code> used to define fields to be included in the query results</p>
</li>
<li>
<p><code>Query</code> <strong>limit</strong> <code>(int limit)</code> used to limit the size of the returned results to the provided limit (used for paging)</p>
</li>
<li>
<p><code>Query</code> <strong>skip</strong> <code>(int skip)</code> used to skip the provided number of documents in the results (used for paging)</p>
</li>
<li>
<p><code>Sort</code> <strong>sort</strong> <code>()</code> used to provide sort definition for the results</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect3">
<h4 id="mongo-template.querying"><a class="anchor" href="#mongo-template.querying"></a>8.6.2. Methods for querying for documents</h4>
<div class="paragraph">
<p>The query methods need to specify the target type T that will be 
returned and they are also overloaded with an explicit collection name 
for queries that should operate on a collection other than the one 
indicated by the return type.</p>
</div>
<div class="ulist">
<ul>
<li>
<p><strong>findAll</strong> Query for a list of objects of type T from the collection.</p>
</li>
<li>
<p><strong>findOne</strong> Map the results of an ad-hoc query on the collection to a single instance of an object of the specified type.</p>
</li>
<li>
<p><strong>findById</strong> Return an object of the given id and target class.</p>
</li>
<li>
<p><strong>find</strong> Map the results of an ad-hoc query on the collection to a List of the specified type.</p>
</li>
<li>
<p><strong>findAndRemove</strong> Map the results of an ad-hoc query on 
the collection to a single instance of an object of the specified type. 
The first document that matches the query is returned and also removed 
from the collection in the database.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="mongo.geospatial"><a class="anchor" href="#mongo.geospatial"></a>8.6.3. GeoSpatial Queries</h4>
<div class="paragraph">
<p>MongoDB supports GeoSpatial queries through the use of operators such as <code>$near</code>, <code>$within</code>, <code>geoWithin</code> and <code>$nearSphere</code>. Methods specific to geospatial queries are available on the <code>Criteria</code> class. There are also a few shape classes, <code>Box</code>, <code>Circle</code>, and <code>Point</code> that are used in conjunction with geospatial related <code>Criteria</code> methods.</p>
</div>
<div class="paragraph">
<p>To understand how to perform GeoSpatial queries we will use the 
following Venue class taken from the integration tests.which relies on 
using the rich <code>MappingMongoConverter</code>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="lit">@Document</span><span class="pun">(</span><span class="pln">collection</span><span class="pun">=</span><span class="str">"newyork"</span><span class="pun">)</span><span class="pln">
</span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">Venue</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

  </span><span class="lit">@Id</span><span class="pln">
  </span><span class="kwd">private</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> id</span><span class="pun">;</span><span class="pln">
  </span><span class="kwd">private</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> name</span><span class="pun">;</span><span class="pln">
  </span><span class="kwd">private</span><span class="pln"> </span><span class="kwd">double</span><span class="pun">[]</span><span class="pln"> location</span><span class="pun">;</span><span class="pln">

  </span><span class="lit">@PersistenceConstructor</span><span class="pln">
  </span><span class="typ">Venue</span><span class="pun">(</span><span class="typ">String</span><span class="pln"> name</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">double</span><span class="pun">[]</span><span class="pln"> location</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">super</span><span class="pun">();</span><span class="pln">
    </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">name </span><span class="pun">=</span><span class="pln"> name</span><span class="pun">;</span><span class="pln">
    </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">location </span><span class="pun">=</span><span class="pln"> location</span><span class="pun">;</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">

  </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">Venue</span><span class="pun">(</span><span class="typ">String</span><span class="pln"> name</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">double</span><span class="pln"> x</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">double</span><span class="pln"> y</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">super</span><span class="pun">();</span><span class="pln">
    </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">name </span><span class="pun">=</span><span class="pln"> name</span><span class="pun">;</span><span class="pln">
    </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">location </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="kwd">double</span><span class="pun">[]</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> x</span><span class="pun">,</span><span class="pln"> y </span><span class="pun">};</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">

  </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> getName</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> name</span><span class="pun">;</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">

  </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">double</span><span class="pun">[]</span><span class="pln"> getLocation</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> location</span><span class="pun">;</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">

  </span><span class="lit">@Override</span><span class="pln">
  </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> toString</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> </span><span class="str">"Venue [id="</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> id </span><span class="pun">+</span><span class="pln"> </span><span class="str">", name="</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> name </span><span class="pun">+</span><span class="pln"> </span><span class="str">", location="</span><span class="pln">
        </span><span class="pun">+</span><span class="pln"> </span><span class="typ">Arrays</span><span class="pun">.</span><span class="pln">toString</span><span class="pun">(</span><span class="pln">location</span><span class="pun">)</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> </span><span class="str">"]"</span><span class="pun">;</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>To find locations within a <code>Circle</code>, the following query can be used.</p>
</div>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="typ">Circle</span><span class="pln"> circle </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Circle</span><span class="pun">(-</span><span class="lit">73.99171</span><span class="pun">,</span><span class="pln"> </span><span class="lit">40.738868</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0.01</span><span class="pun">);</span><span class="pln">
</span><span class="typ">List</span><span class="pun">&lt;</span><span class="typ">Venue</span><span class="pun">&gt;</span><span class="pln"> venues </span><span class="pun">=</span><span class="pln">
    template</span><span class="pun">.</span><span class="pln">find</span><span class="pun">(</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Query</span><span class="pun">(</span><span class="typ">Criteria</span><span class="pun">.</span><span class="pln">where</span><span class="pun">(</span><span class="str">"location"</span><span class="pun">).</span><span class="pln">within</span><span class="pun">(</span><span class="pln">circle</span><span class="pun">)),</span><span class="pln"> </span><span class="typ">Venue</span><span class="pun">.</span><span class="kwd">class</span><span class="pun">);</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>To find venues within a <code>Circle</code> using spherical coordinates the following query can be used</p>
</div>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="typ">Circle</span><span class="pln"> circle </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Circle</span><span class="pun">(-</span><span class="lit">73.99171</span><span class="pun">,</span><span class="pln"> </span><span class="lit">40.738868</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0.003712240453784</span><span class="pun">);</span><span class="pln">
</span><span class="typ">List</span><span class="pun">&lt;</span><span class="typ">Venue</span><span class="pun">&gt;</span><span class="pln"> venues </span><span class="pun">=</span><span class="pln">
    template</span><span class="pun">.</span><span class="pln">find</span><span class="pun">(</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Query</span><span class="pun">(</span><span class="typ">Criteria</span><span class="pun">.</span><span class="pln">where</span><span class="pun">(</span><span class="str">"location"</span><span class="pun">).</span><span class="pln">withinSphere</span><span class="pun">(</span><span class="pln">circle</span><span class="pun">)),</span><span class="pln"> </span><span class="typ">Venue</span><span class="pun">.</span><span class="kwd">class</span><span class="pun">);</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>To find venues within a <code>Box</code> the following query can be used</p>
</div>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="com">//lower-left then upper-right</span><span class="pln">
</span><span class="typ">Box</span><span class="pln"> box </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Box</span><span class="pun">(</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Point</span><span class="pun">(-</span><span class="lit">73.99756</span><span class="pun">,</span><span class="pln"> </span><span class="lit">40.73083</span><span class="pun">),</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Point</span><span class="pun">(-</span><span class="lit">73.988135</span><span class="pun">,</span><span class="pln"> </span><span class="lit">40.741404</span><span class="pun">));</span><span class="pln">
</span><span class="typ">List</span><span class="pun">&lt;</span><span class="typ">Venue</span><span class="pun">&gt;</span><span class="pln"> venues </span><span class="pun">=</span><span class="pln">
    template</span><span class="pun">.</span><span class="pln">find</span><span class="pun">(</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Query</span><span class="pun">(</span><span class="typ">Criteria</span><span class="pun">.</span><span class="pln">where</span><span class="pun">(</span><span class="str">"location"</span><span class="pun">).</span><span class="pln">within</span><span class="pun">(</span><span class="pln">box</span><span class="pun">)),</span><span class="pln"> </span><span class="typ">Venue</span><span class="pun">.</span><span class="kwd">class</span><span class="pun">);</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>To find venues near a <code>Point</code>, the following queries can be used</p>
</div>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="typ">Point</span><span class="pln"> point </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Point</span><span class="pun">(-</span><span class="lit">73.99171</span><span class="pun">,</span><span class="pln"> </span><span class="lit">40.738868</span><span class="pun">);</span><span class="pln">
</span><span class="typ">List</span><span class="pun">&lt;</span><span class="typ">Venue</span><span class="pun">&gt;</span><span class="pln"> venues </span><span class="pun">=</span><span class="pln">
    template</span><span class="pun">.</span><span class="pln">find</span><span class="pun">(</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Query</span><span class="pun">(</span><span class="typ">Criteria</span><span class="pun">.</span><span class="pln">where</span><span class="pun">(</span><span class="str">"location"</span><span class="pun">).</span><span class="pln">near</span><span class="pun">(</span><span class="pln">point</span><span class="pun">).</span><span class="pln">maxDistance</span><span class="pun">(</span><span class="lit">0.01</span><span class="pun">)),</span><span class="pln"> </span><span class="typ">Venue</span><span class="pun">.</span><span class="kwd">class</span><span class="pun">);</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="typ">Point</span><span class="pln"> point </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Point</span><span class="pun">(-</span><span class="lit">73.99171</span><span class="pun">,</span><span class="pln"> </span><span class="lit">40.738868</span><span class="pun">);</span><span class="pln">
</span><span class="typ">List</span><span class="pun">&lt;</span><span class="typ">Venue</span><span class="pun">&gt;</span><span class="pln"> venues </span><span class="pun">=</span><span class="pln">
    template</span><span class="pun">.</span><span class="pln">find</span><span class="pun">(</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Query</span><span class="pun">(</span><span class="typ">Criteria</span><span class="pun">.</span><span class="pln">where</span><span class="pun">(</span><span class="str">"location"</span><span class="pun">).</span><span class="pln">near</span><span class="pun">(</span><span class="pln">point</span><span class="pun">).</span><span class="pln">minDistance</span><span class="pun">(</span><span class="lit">0.01</span><span class="pun">).</span><span class="pln">maxDistance</span><span class="pun">(</span><span class="lit">100</span><span class="pun">)),</span><span class="pln"> </span><span class="typ">Venue</span><span class="pun">.</span><span class="kwd">class</span><span class="pun">);</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>To find venues near a <code>Point</code> using spherical coordines the following query can be used</p>
</div>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="typ">Point</span><span class="pln"> point </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Point</span><span class="pun">(-</span><span class="lit">73.99171</span><span class="pun">,</span><span class="pln"> </span><span class="lit">40.738868</span><span class="pun">);</span><span class="pln">
</span><span class="typ">List</span><span class="pun">&lt;</span><span class="typ">Venue</span><span class="pun">&gt;</span><span class="pln"> venues </span><span class="pun">=</span><span class="pln">
    template</span><span class="pun">.</span><span class="pln">find</span><span class="pun">(</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Query</span><span class="pun">(</span><span class="pln">
        </span><span class="typ">Criteria</span><span class="pun">.</span><span class="pln">where</span><span class="pun">(</span><span class="str">"location"</span><span class="pun">).</span><span class="pln">nearSphere</span><span class="pun">(</span><span class="pln">point</span><span class="pun">).</span><span class="pln">maxDistance</span><span class="pun">(</span><span class="lit">0.003712240453784</span><span class="pun">)),</span><span class="pln">
        </span><span class="typ">Venue</span><span class="pun">.</span><span class="kwd">class</span><span class="pun">);</span></code></pre>
</div>
</div>
<div class="sect4">
<h5 id="mongo.geo-near"><a class="anchor" href="#mongo.geo-near"></a>Geo near queries</h5>
<div class="paragraph">
<p>MongoDB supports querying the database for geo locations and 
calculation the distance from a given origin at the very same time. With
 geo-near queries it’s possible to express queries like: "find all 
restaurants in the surrounding 10 miles". To do so <code>MongoOperations</code> provides <code>geoNear(…)</code> methods taking a <code>NearQuery</code> as argument as well as the already familiar entity type and collection</p>
</div>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="typ">Point</span><span class="pln"> location </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Point</span><span class="pun">(-</span><span class="lit">73.99171</span><span class="pun">,</span><span class="pln"> </span><span class="lit">40.738868</span><span class="pun">);</span><span class="pln">
</span><span class="typ">NearQuery</span><span class="pln"> query </span><span class="pun">=</span><span class="pln"> </span><span class="typ">NearQuery</span><span class="pun">.</span><span class="pln">near</span><span class="pun">(</span><span class="pln">location</span><span class="pun">).</span><span class="pln">maxDistance</span><span class="pun">(</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Distance</span><span class="pun">(</span><span class="lit">10</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Metrics</span><span class="pun">.</span><span class="pln">MILES</span><span class="pun">));</span><span class="pln">

</span><span class="typ">GeoResults</span><span class="pun">&lt;</span><span class="typ">Restaurant</span><span class="pun">&gt;</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> operations</span><span class="pun">.</span><span class="pln">geoNear</span><span class="pun">(</span><span class="pln">query</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Restaurant</span><span class="pun">.</span><span class="kwd">class</span><span class="pun">);</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>As you can see we use the <code>NearQuery</code> builder API to set up a query to return all <code>Restaurant</code> instances surrounding the given <code>Point</code> by 10 miles maximum. The <code>Metrics</code> enum used here actually implements an interface so that other metrics could be plugged into a distance as well. A <code>Metric</code>
 is backed by a multiplier to transform the distance value of the given 
metric into native distances. The sample shown here would consider the 
10 to be miles. Using one of the pre-built in metrics (miles and 
kilometers) will automatically trigger the spherical flag to be set on 
the query. If you want to avoid that, simply hand in plain <code>double</code> values into <code>maxDistance(…)</code>. For more information see the JavaDoc of <code>NearQuery</code> and <code>Distance</code>.</p>
</div>
<div class="paragraph">
<p>The geo near operations return a <code>GeoResults</code> wrapper object that encapsulates <code>GeoResult</code> instances. The wrapping <code>GeoResults</code> allows to access the average distance of all results. A single <code>GeoResult</code> object simply carries the entity found plus its distance from the origin.</p>
</div>
</div>
</div>
<div class="sect3">
<h4 id="mongo.geo-json"><a class="anchor" href="#mongo.geo-json"></a>8.6.4. GeoJSON Support</h4>
<div class="paragraph">
<p>MongoDB supports <a href="http://geojeson.org/">GeoJSON</a> and simple (legacy) coordinate pairs for geospatial data. Those formats can both be used for storing as well as querying data.</p>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
Please refer to the <a href="http://docs.mongodb.org/manual/core/2dsphere/#geospatial-indexes-store-geojson/">MongoDB manual on GeoJSON support</a> to learn about requirements and restrictions.
</td>
</tr>
</tbody></table>
</div>
<div class="sect4">
<h5 id="_geojson_types_in_domain_classes"><a class="anchor" href="#_geojson_types_in_domain_classes"></a>GeoJSON types in domain classes</h5>
<div class="paragraph">
<p>Usage of <a href="http://geojeson.org/">GeoJSON</a> types in domain classes is straight forward. The <code>org.springframework.data.mongodb.core.geo</code> package contains types like <code>GeoJsonPoint</code>, <code>GeoJsonPolygon</code> and others. Those are extensions to the existing <code>org.springframework.data.geo</code> types.</p>
</div>
<div class="exampleblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">Store</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

	</span><span class="typ">String</span><span class="pln"> id</span><span class="pun">;</span><span class="pln">

	</span><span class="com">/**
	 * location is stored in GeoJSON format.
	 * {
	 *   "type" : "Point",
	 *   "coordinates" : [ x, y ]
	 * }
	 */</span><span class="pln">
	</span><span class="typ">GeoJsonPoint</span><span class="pln"> location</span><span class="pun">;</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div>
</div>
</div>
</div>
</div>
<div class="sect4">
<h5 id="_geojson_types_in_repository_query_methods"><a class="anchor" href="#_geojson_types_in_repository_query_methods"></a>GeoJSON types in repository query methods</h5>
<div class="paragraph">
<p>Using GeoJSON types as repository query parameters forces usage of the <code>$geometry</code> operator when creating the query.</p>
</div>
<div class="exampleblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">interface</span><span class="pln"> </span><span class="typ">StoreRepository</span><span class="pln"> </span><span class="kwd">extends</span><span class="pln"> </span><span class="typ">CrudRepository</span><span class="pun">&lt;</span><span class="typ">Store</span><span class="pun">,</span><span class="pln"> </span><span class="typ">String</span><span class="pun">&gt;</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

	</span><span class="typ">List</span><span class="pun">&lt;</span><span class="typ">Store</span><span class="pun">&gt;</span><span class="pln"> findByLocationWithin</span><span class="pun">(</span><span class="typ">Polygon</span><span class="pln"> polygon</span><span class="pun">);</span><span class="pln">  </span><i class="conum" data-value="1"></i><b><span class="pun">(</span><span class="lit">1</span><span class="pun">)</span></b><span class="pln">

</span><span class="pun">}</span><span class="pln">

</span><span class="com">/*
 * {
 *   "location": {
 *     "$geoWithin": {
 *       "$geometry": {
 *         "type": "Polygon",
 *         "coordinates": [
 *           [
 *             [-73.992514,40.758934],
 *             [-73.961138,40.760348],
 *             [-73.991658,40.730006],
 *             [-73.992514,40.758934]
 *           ]
 *         ]
 *       }
 *     }
 *   }
 * }
 */</span><span class="pln">
repo</span><span class="pun">.</span><span class="pln">findByLocationWithin</span><span class="pun">(</span><span class="pln">                              </span><i class="conum" data-value="2"></i><b><span class="pun">(</span><span class="lit">2</span><span class="pun">)</span></b><span class="pln">
  </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">GeoJsonPolygon</span><span class="pun">(</span><span class="pln">
    </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Point</span><span class="pun">(-</span><span class="lit">73.992514</span><span class="pun">,</span><span class="pln"> </span><span class="lit">40.758934</span><span class="pun">),</span><span class="pln">
    </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Point</span><span class="pun">(-</span><span class="lit">73.961138</span><span class="pun">,</span><span class="pln"> </span><span class="lit">40.760348</span><span class="pun">),</span><span class="pln">
    </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Point</span><span class="pun">(-</span><span class="lit">73.991658</span><span class="pun">,</span><span class="pln"> </span><span class="lit">40.730006</span><span class="pun">),</span><span class="pln">
    </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Point</span><span class="pun">(-</span><span class="lit">73.992514</span><span class="pun">,</span><span class="pln"> </span><span class="lit">40.758934</span><span class="pun">)));</span><span class="pln">                 </span><i class="conum" data-value="3"></i><b><span class="pun">(</span><span class="lit">3</span><span class="pun">)</span></b><span class="pln">

</span><span class="com">/*
 * {
 *   "location" : {
 *     "$geoWithin" : {
 *        "$polygon" : [ [-73.992514,40.758934] , [-73.961138,40.760348] , [-73.991658,40.730006] ]
 *     }
 *   }
 * }
 */</span><span class="pln">
repo</span><span class="pun">.</span><span class="pln">findByLocationWithin</span><span class="pun">(</span><span class="pln">                              </span><i class="conum" data-value="4"></i><b><span class="pun">(</span><span class="lit">4</span><span class="pun">)</span></b><span class="pln">
  </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Polygon</span><span class="pun">(</span><span class="pln">
    </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Point</span><span class="pun">(-</span><span class="lit">73.992514</span><span class="pun">,</span><span class="pln"> </span><span class="lit">40.758934</span><span class="pun">),</span><span class="pln">
    </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Point</span><span class="pun">(-</span><span class="lit">73.961138</span><span class="pun">,</span><span class="pln"> </span><span class="lit">40.760348</span><span class="pun">),</span><span class="pln">
    </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Point</span><span class="pun">(-</span><span class="lit">73.991658</span><span class="pun">,</span><span class="pln"> </span><span class="lit">40.730006</span><span class="pun">));</span></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Repository method definition using the commons type allows calling it with both GeoJSON and legacy format.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Use GeoJSON type the make use of <code>$geometry</code> operator.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Plase note that GeoJSON polygons need the define a closed ring.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Use legacy format <code>$polygon</code> operator.</td>
</tr>
</tbody></table>
</div>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="mongo.textsearch"><a class="anchor" href="#mongo.textsearch"></a>8.6.5. Full Text Queries</h4>
<div class="paragraph">
<p>Since MongoDB 2.6 full text queries can be executed using the <code>$text</code> operator. Methods and operations specific for full text queries are available in <code>TextQuery</code> and <code>TextCriteria</code>. When doing full text search please refer to the <a href="http://docs.mongodb.org/manual/reference/operator/query/text/#behavior">MongoDB reference</a> for its behavior and limitations.</p>
</div>
<div class="sect4">
<h5 id="_full_text_search"><a class="anchor" href="#_full_text_search"></a>Full Text Search</h5>
<div class="paragraph">
<p>Before we are actually able to use full text search we have to ensure
 to set up the search index correctly. Please refer to section <a href="#mapping-usage-indexes.text-index">Text Index</a> for creating index structures.</p>
</div>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-javascript" data-lang="javascript"><span class="pln">db</span><span class="pun">.</span><span class="pln">foo</span><span class="pun">.</span><span class="pln">createIndex</span><span class="pun">(</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
  title </span><span class="pun">:</span><span class="pln"> </span><span class="str">"text"</span><span class="pun">,</span><span class="pln">
  content </span><span class="pun">:</span><span class="pln"> </span><span class="str">"text"</span><span class="pln">
</span><span class="pun">},</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
  weights </span><span class="pun">:</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
              title </span><span class="pun">:</span><span class="pln"> </span><span class="lit">3</span><span class="pln">
            </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span><span class="pln">
</span><span class="pun">)</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>A query searching for <code>coffee cake</code>, sorted by relevance according to the <code>weights</code> can be defined and executed as:</p>
</div>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="typ">Query</span><span class="pln"> query </span><span class="pun">=</span><span class="pln"> </span><span class="typ">TextQuery</span><span class="pun">.</span><span class="pln">searching</span><span class="pun">(</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">TextCriteria</span><span class="pun">().</span><span class="pln">matchingAny</span><span class="pun">(</span><span class="str">"coffee"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"cake"</span><span class="pun">)).</span><span class="pln">sortByScore</span><span class="pun">();</span><span class="pln">
</span><span class="typ">List</span><span class="pun">&lt;</span><span class="typ">Document</span><span class="pun">&gt;</span><span class="pln"> page </span><span class="pun">=</span><span class="pln"> template</span><span class="pun">.</span><span class="pln">find</span><span class="pun">(</span><span class="pln">query</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Document</span><span class="pun">.</span><span class="kwd">class</span><span class="pun">);</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Exclusion of search terms can directly be done by prefixing the term with <code>-</code> or using <code>notMatching</code></p>
</div>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="com">// search for 'coffee' and not 'cake'</span><span class="pln">
</span><span class="typ">TextQuery</span><span class="pun">.</span><span class="pln">searching</span><span class="pun">(</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">TextCriteria</span><span class="pun">().</span><span class="pln">matching</span><span class="pun">(</span><span class="str">"coffee"</span><span class="pun">).</span><span class="pln">matching</span><span class="pun">(</span><span class="str">"-cake"</span><span class="pun">));</span><span class="pln">
</span><span class="typ">TextQuery</span><span class="pun">.</span><span class="pln">searching</span><span class="pun">(</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">TextCriteria</span><span class="pun">().</span><span class="pln">matching</span><span class="pun">(</span><span class="str">"coffee"</span><span class="pun">).</span><span class="pln">notMatching</span><span class="pun">(</span><span class="str">"cake"</span><span class="pun">));</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>As <code>TextCriteria.matching</code> takes the provided term as is. Therefore phrases can be defined by putting them between double quotes (eg. <code>\"coffee cake\")</code> or using <code>TextCriteria.phrase.</code></p>
</div>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="com">// search for phrase 'coffee cake'</span><span class="pln">
</span><span class="typ">TextQuery</span><span class="pun">.</span><span class="pln">searching</span><span class="pun">(</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">TextCriteria</span><span class="pun">().</span><span class="pln">matching</span><span class="pun">(</span><span class="str">"\"coffee cake\""</span><span class="pun">));</span><span class="pln">
</span><span class="typ">TextQuery</span><span class="pun">.</span><span class="pln">searching</span><span class="pun">(</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">TextCriteria</span><span class="pun">().</span><span class="pln">phrase</span><span class="pun">(</span><span class="str">"coffee cake"</span><span class="pun">));</span></code></pre>
</div>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="mongo.mapreduce"><a class="anchor" href="#mongo.mapreduce"></a>8.7. Map-Reduce Operations</h3>
<div class="paragraph">
<p>You can query MongoDB using Map-Reduce which is useful for batch 
processing, data aggregation, and for when the query language doesn’t 
fulfill your needs.</p>
</div>
<div class="paragraph">
<p>Spring provides integration with MongoDB’s map reduce by providing 
methods on MongoOperations to simplify the creation and execution of 
Map-Reduce operations. It can convert the results of a Map-Reduce 
operation to a POJO also integrates with Spring’s <a href="http://docs.spring.io/spring/docs/current/spring-framework-reference/html/resources.html">Resource abstraction</a>
 abstraction. This will let you place your JavaScript files on the file 
system, classpath, http server or any other Spring Resource 
implementation and then reference the JavaScript resources via an easy 
URI style syntax, e.g. 'classpath:reduce.js;. Externalizing JavaScript 
code in files is often preferable to embedding them as Java strings in 
your code. Note that you can still pass JavaScript code as Java strings 
if you prefer.</p>
</div>
<div class="sect3">
<h4 id="mongo.mapreduce.example"><a class="anchor" href="#mongo.mapreduce.example"></a>8.7.1. Example Usage</h4>
<div class="paragraph">
<p>To understand how to perform Map-Reduce operations an example from 
the book 'MongoDB - The definitive guide' is used. In this example we 
will create three documents that have the values [a,b], [b,c], and [c,d]
 respectfully. The values in each document are associated with the key 
'x' as shown below. For this example assume these documents are in the 
collection named "jmr1".</p>
</div>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code><span class="pun">{</span><span class="pln"> </span><span class="str">"_id"</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="typ">ObjectId</span><span class="pun">(</span><span class="str">"4e5ff893c0277826074ec533"</span><span class="pun">),</span><span class="pln"> </span><span class="str">"x"</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="pln"> </span><span class="str">"a"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"b"</span><span class="pln"> </span><span class="pun">]</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
</span><span class="pun">{</span><span class="pln"> </span><span class="str">"_id"</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="typ">ObjectId</span><span class="pun">(</span><span class="str">"4e5ff893c0277826074ec534"</span><span class="pun">),</span><span class="pln"> </span><span class="str">"x"</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="pln"> </span><span class="str">"b"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"c"</span><span class="pln"> </span><span class="pun">]</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
</span><span class="pun">{</span><span class="pln"> </span><span class="str">"_id"</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="typ">ObjectId</span><span class="pun">(</span><span class="str">"4e5ff893c0277826074ec535"</span><span class="pun">),</span><span class="pln"> </span><span class="str">"x"</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="pln"> </span><span class="str">"c"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"d"</span><span class="pln"> </span><span class="pun">]</span><span class="pln"> </span><span class="pun">}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>A map function that will count the occurrence of each letter in the array for each document is shown below</p>
</div>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="pln">function </span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="pln">var i </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> i </span><span class="pun">&lt;</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">x</span><span class="pun">.</span><span class="pln">length</span><span class="pun">;</span><span class="pln"> i</span><span class="pun">++)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        emit</span><span class="pun">(</span><span class="kwd">this</span><span class="pun">.</span><span class="pln">x</span><span class="pun">[</span><span class="pln">i</span><span class="pun">],</span><span class="pln"> </span><span class="lit">1</span><span class="pun">);</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>The reduce function that will sum up the occurrence of each letter across all the documents is shown below</p>
</div>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="pln">function </span><span class="pun">(</span><span class="pln">key</span><span class="pun">,</span><span class="pln"> values</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    var sum </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln">
    </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="pln">var i </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> i </span><span class="pun">&lt;</span><span class="pln"> values</span><span class="pun">.</span><span class="pln">length</span><span class="pun">;</span><span class="pln"> i</span><span class="pun">++)</span><span class="pln">
        sum </span><span class="pun">+=</span><span class="pln"> values</span><span class="pun">[</span><span class="pln">i</span><span class="pun">];</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> sum</span><span class="pun">;</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Executing this will result in a collection as shown below.</p>
</div>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code><span class="pun">{</span><span class="pln"> </span><span class="str">"_id"</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="str">"a"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"value"</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="lit">1</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
</span><span class="pun">{</span><span class="pln"> </span><span class="str">"_id"</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="str">"b"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"value"</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="lit">2</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
</span><span class="pun">{</span><span class="pln"> </span><span class="str">"_id"</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="str">"c"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"value"</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="lit">2</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
</span><span class="pun">{</span><span class="pln"> </span><span class="str">"_id"</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="str">"d"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"value"</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="lit">1</span><span class="pln"> </span><span class="pun">}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Assuming that the map and reduce functions are located in map.js and 
reduce.js and bundled in your jar so they are available on the 
classpath, you can execute a map-reduce operation and obtain the results
 as shown below</p>
</div>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="typ">MapReduceResults</span><span class="pun">&lt;</span><span class="typ">ValueObject</span><span class="pun">&gt;</span><span class="pln"> results </span><span class="pun">=</span><span class="pln"> mongoOperations</span><span class="pun">.</span><span class="pln">mapReduce</span><span class="pun">(</span><span class="str">"jmr1"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"classpath:map.js"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"classpath:reduce.js"</span><span class="pun">,</span><span class="pln"> </span><span class="typ">ValueObject</span><span class="pun">.</span><span class="kwd">class</span><span class="pun">);</span><span class="pln">
</span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="typ">ValueObject</span><span class="pln"> valueObject </span><span class="pun">:</span><span class="pln"> results</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  </span><span class="typ">System</span><span class="pun">.</span><span class="pln">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="pln">valueObject</span><span class="pun">);</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>The output of the above code is</p>
</div>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code><span class="typ">ValueObject</span><span class="pln"> </span><span class="pun">[</span><span class="pln">id</span><span class="pun">=</span><span class="pln">a</span><span class="pun">,</span><span class="pln"> value</span><span class="pun">=</span><span class="lit">1.0</span><span class="pun">]</span><span class="pln">
</span><span class="typ">ValueObject</span><span class="pln"> </span><span class="pun">[</span><span class="pln">id</span><span class="pun">=</span><span class="pln">b</span><span class="pun">,</span><span class="pln"> value</span><span class="pun">=</span><span class="lit">2.0</span><span class="pun">]</span><span class="pln">
</span><span class="typ">ValueObject</span><span class="pln"> </span><span class="pun">[</span><span class="pln">id</span><span class="pun">=</span><span class="pln">c</span><span class="pun">,</span><span class="pln"> value</span><span class="pun">=</span><span class="lit">2.0</span><span class="pun">]</span><span class="pln">
</span><span class="typ">ValueObject</span><span class="pln"> </span><span class="pun">[</span><span class="pln">id</span><span class="pun">=</span><span class="pln">d</span><span class="pun">,</span><span class="pln"> value</span><span class="pun">=</span><span class="lit">1.0</span><span class="pun">]</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>The MapReduceResults class implements <code>Iterable</code> and provides access to the raw output, as well as timing and count statistics. The <code>ValueObject</code> class is simply</p>
</div>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">ValueObject</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

  </span><span class="kwd">private</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> id</span><span class="pun">;</span><span class="pln">
  </span><span class="kwd">private</span><span class="pln"> </span><span class="kwd">float</span><span class="pln"> value</span><span class="pun">;</span><span class="pln">

  </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> getId</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> id</span><span class="pun">;</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">

  </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">float</span><span class="pln"> getValue</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> value</span><span class="pun">;</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">

  </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> setValue</span><span class="pun">(</span><span class="kwd">float</span><span class="pln"> value</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">value </span><span class="pun">=</span><span class="pln"> value</span><span class="pun">;</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">

  </span><span class="lit">@Override</span><span class="pln">
  </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> toString</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> </span><span class="str">"ValueObject [id="</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> id </span><span class="pun">+</span><span class="pln"> </span><span class="str">", value="</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> value </span><span class="pun">+</span><span class="pln"> </span><span class="str">"]"</span><span class="pun">;</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>By default the output type of INLINE is used so you don’t have to 
specify an output collection. To specify additional map-reduce options 
use an overloaded method that takes an additional <code>MapReduceOptions</code> argument. The class <code>MapReduceOptions</code>
 has a fluent API so adding additional options can be done in a very 
compact syntax. Here an example that sets the output collection to 
"jmr1_out". Note that setting only the output collection assumes a 
default output type of REPLACE.</p>
</div>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="typ">MapReduceResults</span><span class="pun">&lt;</span><span class="typ">ValueObject</span><span class="pun">&gt;</span><span class="pln"> results </span><span class="pun">=</span><span class="pln"> mongoOperations</span><span class="pun">.</span><span class="pln">mapReduce</span><span class="pun">(</span><span class="str">"jmr1"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"classpath:map.js"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"classpath:reduce.js"</span><span class="pun">,</span><span class="pln">
                                                                     </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">MapReduceOptions</span><span class="pun">().</span><span class="pln">outputCollection</span><span class="pun">(</span><span class="str">"jmr1_out"</span><span class="pun">),</span><span class="pln"> </span><span class="typ">ValueObject</span><span class="pun">.</span><span class="kwd">class</span><span class="pun">);</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>There is also a static import <code>import static org.springframework.data.mongodb.core.mapreduce.MapReduceOptions.options;</code> that can be used to make the syntax slightly more compact</p>
</div>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="typ">MapReduceResults</span><span class="pun">&lt;</span><span class="typ">ValueObject</span><span class="pun">&gt;</span><span class="pln"> results </span><span class="pun">=</span><span class="pln"> mongoOperations</span><span class="pun">.</span><span class="pln">mapReduce</span><span class="pun">(</span><span class="str">"jmr1"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"classpath:map.js"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"classpath:reduce.js"</span><span class="pun">,</span><span class="pln">
                                                                     options</span><span class="pun">().</span><span class="pln">outputCollection</span><span class="pun">(</span><span class="str">"jmr1_out"</span><span class="pun">),</span><span class="pln"> </span><span class="typ">ValueObject</span><span class="pun">.</span><span class="kwd">class</span><span class="pun">);</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>You can also specify a query to reduce the set of data that will be 
used to feed into the map-reduce operation. This will remove the 
document that contains [a,b] from consideration for map-reduce 
operations.</p>
</div>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="typ">Query</span><span class="pln"> query </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Query</span><span class="pun">(</span><span class="pln">where</span><span class="pun">(</span><span class="str">"x"</span><span class="pun">).</span><span class="pln">ne</span><span class="pun">(</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">String</span><span class="pun">[]</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="str">"a"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"b"</span><span class="pln"> </span><span class="pun">}));</span><span class="pln">
</span><span class="typ">MapReduceResults</span><span class="pun">&lt;</span><span class="typ">ValueObject</span><span class="pun">&gt;</span><span class="pln"> results </span><span class="pun">=</span><span class="pln"> mongoOperations</span><span class="pun">.</span><span class="pln">mapReduce</span><span class="pun">(</span><span class="pln">query</span><span class="pun">,</span><span class="pln"> </span><span class="str">"jmr1"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"classpath:map.js"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"classpath:reduce.js"</span><span class="pun">,</span><span class="pln">
                                                                     options</span><span class="pun">().</span><span class="pln">outputCollection</span><span class="pun">(</span><span class="str">"jmr1_out"</span><span class="pun">),</span><span class="pln"> </span><span class="typ">ValueObject</span><span class="pun">.</span><span class="kwd">class</span><span class="pun">);</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Note that you can specify additional limit and sort values as well on the query but not skip values.</p>
</div>
</div>
</div>
<div class="sect2">
<h3 id="mongo.server-side-scripts"><a class="anchor" href="#mongo.server-side-scripts"></a>8.8. Script Operations</h3>
<div class="paragraph">
<p>MongoDB allows to execute JavaScript functions on the server by either directly sending the script or calling a stored one. <code>ScriptOperations</code> can be accessed via <code>MongoTemplate</code> and provides basic abstraction for <code>JavaScript</code> usage.</p>
</div>
<div class="sect3">
<h4 id="_example_usage"><a class="anchor" href="#_example_usage"></a>8.8.1. Example Usage</h4>
<div class="exampleblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="typ">ScriptOperations</span><span class="pln"> scriptOps </span><span class="pun">=</span><span class="pln"> template</span><span class="pun">.</span><span class="pln">scriptOps</span><span class="pun">();</span><span class="pln">

</span><span class="typ">ExecutableMongoScript</span><span class="pln"> echoScript </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">ExecutableMongoScript</span><span class="pun">(</span><span class="str">"function(x) { return x; }"</span><span class="pun">);</span><span class="pln">
scriptOps</span><span class="pun">.</span><span class="pln">execute</span><span class="pun">(</span><span class="pln">echoScript</span><span class="pun">,</span><span class="pln"> </span><span class="str">"directly execute script"</span><span class="pun">);</span><span class="pln">     </span><i class="conum" data-value="1"></i><b><span class="pun">(</span><span class="lit">1</span><span class="pun">)</span></b><span class="pln">

scriptOps</span><span class="pun">.</span><span class="kwd">register</span><span class="pun">(</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">NamedMongoScript</span><span class="pun">(</span><span class="str">"echo"</span><span class="pun">,</span><span class="pln"> echoScript</span><span class="pun">));</span><span class="pln"> </span><i class="conum" data-value="2"></i><b><span class="pun">(</span><span class="lit">2</span><span class="pun">)</span></b><span class="pln">
scriptOps</span><span class="pun">.</span><span class="pln">call</span><span class="pun">(</span><span class="str">"echo"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"execute script via name"</span><span class="pun">);</span><span class="pln">            </span><i class="conum" data-value="3"></i><b><span class="pun">(</span><span class="lit">3</span><span class="pun">)</span></b></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Execute the script directly without storing the function on server side.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Store the script using 'echo' as its name. The given name identifies the script and allows calling it later.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Execute the script with name 'echo' using the provided parameters.</td>
</tr>
</tbody></table>
</div>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="mongo.group"><a class="anchor" href="#mongo.group"></a>8.9. Group Operations</h3>
<div class="paragraph">
<p>As an alternative to using Map-Reduce to perform data aggregation, you can use the <a href="http://www.mongodb.org/display/DOCS/Aggregation#Aggregation-Group"><code>group</code> operation</a>
 which feels similar to using SQL’s group by query style, so it may feel
 more approachable vs. using Map-Reduce. Using the group operations does
 have some limitations, for example it is not supported in a shareded 
environment and it returns the full result set in a single BSON object, 
so the result should be small, less than 10,000 keys.</p>
</div>
<div class="paragraph">
<p>Spring provides integration with MongoDB’s group operation by 
providing methods on MongoOperations to simplify the creation and 
execution of group operations. It can convert the results of the group 
operation to a POJO and also integrates with Spring’s <a href="http://docs.spring.io/spring/docs/current/spring-framework-reference/html/resources.html">Resource abstraction</a>
 abstraction. This will let you place your JavaScript files on the file 
system, classpath, http server or any other Spring Resource 
implementation and then reference the JavaScript resources via an easy 
URI style syntax, e.g. 'classpath:reduce.js;. Externalizing JavaScript 
code in files if often preferable to embedding them as Java strings in 
your code. Note that you can still pass JavaScript code as Java strings 
if you prefer.</p>
</div>
<div class="sect3">
<h4 id="mongo.group.example"><a class="anchor" href="#mongo.group.example"></a>8.9.1. Example Usage</h4>
<div class="paragraph">
<p>In order to understand how group operations work the following 
example is used, which is somewhat artificial. For a more realistic 
example consult the book 'MongoDB - The definitive guide'. A collection 
named "group_test_collection" created with the following rows.</p>
</div>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code><span class="pun">{</span><span class="pln"> </span><span class="str">"_id"</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="typ">ObjectId</span><span class="pun">(</span><span class="str">"4ec1d25d41421e2015da64f1"</span><span class="pun">),</span><span class="pln"> </span><span class="str">"x"</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="lit">1</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
</span><span class="pun">{</span><span class="pln"> </span><span class="str">"_id"</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="typ">ObjectId</span><span class="pun">(</span><span class="str">"4ec1d25d41421e2015da64f2"</span><span class="pun">),</span><span class="pln"> </span><span class="str">"x"</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="lit">1</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
</span><span class="pun">{</span><span class="pln"> </span><span class="str">"_id"</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="typ">ObjectId</span><span class="pun">(</span><span class="str">"4ec1d25d41421e2015da64f3"</span><span class="pun">),</span><span class="pln"> </span><span class="str">"x"</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="lit">2</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
</span><span class="pun">{</span><span class="pln"> </span><span class="str">"_id"</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="typ">ObjectId</span><span class="pun">(</span><span class="str">"4ec1d25d41421e2015da64f4"</span><span class="pun">),</span><span class="pln"> </span><span class="str">"x"</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="lit">3</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
</span><span class="pun">{</span><span class="pln"> </span><span class="str">"_id"</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="typ">ObjectId</span><span class="pun">(</span><span class="str">"4ec1d25d41421e2015da64f5"</span><span class="pun">),</span><span class="pln"> </span><span class="str">"x"</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="lit">3</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
</span><span class="pun">{</span><span class="pln"> </span><span class="str">"_id"</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="typ">ObjectId</span><span class="pun">(</span><span class="str">"4ec1d25d41421e2015da64f6"</span><span class="pun">),</span><span class="pln"> </span><span class="str">"x"</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="lit">3</span><span class="pln"> </span><span class="pun">}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>We would like to group by the only field in each row, the 'x' field 
and aggregate the number of times each specific value of 'x' occurs. To 
do this we need to create an initial document that contains our count 
variable and also a reduce function which will increment it each time it
 is encountered. The Java code to execute the group operation is shown 
below</p>
</div>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="typ">GroupByResults</span><span class="pun">&lt;</span><span class="typ">XObject</span><span class="pun">&gt;</span><span class="pln"> results </span><span class="pun">=</span><span class="pln"> mongoTemplate</span><span class="pun">.</span><span class="pln">group</span><span class="pun">(</span><span class="str">"group_test_collection"</span><span class="pun">,</span><span class="pln">
                                                      </span><span class="typ">GroupBy</span><span class="pun">.</span><span class="pln">key</span><span class="pun">(</span><span class="str">"x"</span><span class="pun">).</span><span class="pln">initialDocument</span><span class="pun">(</span><span class="str">"{ count: 0 }"</span><span class="pun">).</span><span class="pln">reduceFunction</span><span class="pun">(</span><span class="str">"function(doc, prev) { prev.count += 1 }"</span><span class="pun">),</span><span class="pln">
                                                      </span><span class="typ">XObject</span><span class="pun">.</span><span class="kwd">class</span><span class="pun">);</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>The first argument is the name of the collection to run the group 
operation over, the second is a fluent API that specifies properties of 
the group operation via a <code>GroupBy</code> class. In this example we are using just the <code>intialDocument</code> and <code>reduceFunction</code>
 methods. You can also specify a key-function, as well as a finalizer as
 part of the fluent API. If you have multiple keys to group by, you can 
pass in a comma separated list of keys.</p>
</div>
<div class="paragraph">
<p>The raw results of the group operation is a JSON document that looks like this</p>
</div>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code><span class="pun">{</span><span class="pln">
  </span><span class="str">"retval"</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="str">"x"</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="lit">1.0</span><span class="pln"> </span><span class="pun">,</span><span class="pln"> </span><span class="str">"count"</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="lit">2.0</span><span class="pun">}</span><span class="pln"> </span><span class="pun">,</span><span class="pln">
               </span><span class="pun">{</span><span class="pln"> </span><span class="str">"x"</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="lit">2.0</span><span class="pln"> </span><span class="pun">,</span><span class="pln"> </span><span class="str">"count"</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="lit">1.0</span><span class="pun">}</span><span class="pln"> </span><span class="pun">,</span><span class="pln">
               </span><span class="pun">{</span><span class="pln"> </span><span class="str">"x"</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="lit">3.0</span><span class="pln"> </span><span class="pun">,</span><span class="pln"> </span><span class="str">"count"</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="lit">3.0</span><span class="pun">}</span><span class="pln"> </span><span class="pun">]</span><span class="pln"> </span><span class="pun">,</span><span class="pln">
  </span><span class="str">"count"</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="lit">6.0</span><span class="pln"> </span><span class="pun">,</span><span class="pln">
  </span><span class="str">"keys"</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="lit">3</span><span class="pln"> </span><span class="pun">,</span><span class="pln">
  </span><span class="str">"ok"</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="lit">1.0</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>The document under the "retval" field is mapped onto the third 
argument in the group method, in this case XObject which is shown below.</p>
</div>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">XObject</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

  </span><span class="kwd">private</span><span class="pln"> </span><span class="kwd">float</span><span class="pln"> x</span><span class="pun">;</span><span class="pln">

  </span><span class="kwd">private</span><span class="pln"> </span><span class="kwd">float</span><span class="pln"> count</span><span class="pun">;</span><span class="pln">


  </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">float</span><span class="pln"> getX</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> x</span><span class="pun">;</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">

  </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> setX</span><span class="pun">(</span><span class="kwd">float</span><span class="pln"> x</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">x </span><span class="pun">=</span><span class="pln"> x</span><span class="pun">;</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">

  </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">float</span><span class="pln"> getCount</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> count</span><span class="pun">;</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">

  </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> setCount</span><span class="pun">(</span><span class="kwd">float</span><span class="pln"> count</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">count </span><span class="pun">=</span><span class="pln"> count</span><span class="pun">;</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">

  </span><span class="lit">@Override</span><span class="pln">
  </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> toString</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> </span><span class="str">"XObject [x="</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> x </span><span class="pun">+</span><span class="pln"> </span><span class="str">" count = "</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> count </span><span class="pun">+</span><span class="pln"> </span><span class="str">"]"</span><span class="pun">;</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>You can also obtain the raw result as a <code>DbObject</code> by calling the method <code>getRawResults</code> on the <code>GroupByResults</code> class.</p>
</div>
<div class="paragraph">
<p>There is an additional method overload of the group method on <code>MongoOperations</code> which lets you specify a <code>Criteria</code> object for selecting a subset of the rows. An example which uses a <code>Criteria</code>
 object, with some syntax sugar using static imports, as well as 
referencing a key-function and reduce function javascript files via a 
Spring Resource string is shown below.</p>
</div>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code><span class="kwd">import</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> org</span><span class="pun">.</span><span class="pln">springframework</span><span class="pun">.</span><span class="pln">data</span><span class="pun">.</span><span class="pln">mongodb</span><span class="pun">.</span><span class="pln">core</span><span class="pun">.</span><span class="pln">mapreduce</span><span class="pun">.</span><span class="typ">GroupBy</span><span class="pun">.</span><span class="pln">keyFunction</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> org</span><span class="pun">.</span><span class="pln">springframework</span><span class="pun">.</span><span class="pln">data</span><span class="pun">.</span><span class="pln">mongodb</span><span class="pun">.</span><span class="pln">core</span><span class="pun">.</span><span class="pln">query</span><span class="pun">.</span><span class="typ">Criteria</span><span class="pun">.</span><span class="kwd">where</span><span class="pun">;</span><span class="pln">

</span><span class="typ">GroupByResults</span><span class="pun">&lt;</span><span class="typ">XObject</span><span class="pun">&gt;</span><span class="pln"> results </span><span class="pun">=</span><span class="pln"> mongoTemplate</span><span class="pun">.</span><span class="kwd">group</span><span class="pun">(</span><span class="kwd">where</span><span class="pun">(</span><span class="str">"x"</span><span class="pun">).</span><span class="pln">gt</span><span class="pun">(</span><span class="lit">0</span><span class="pun">),</span><span class="pln">
                                        </span><span class="str">"group_test_collection"</span><span class="pun">,</span><span class="pln">
                                        keyFunction</span><span class="pun">(</span><span class="str">"classpath:keyFunction.js"</span><span class="pun">).</span><span class="pln">initialDocument</span><span class="pun">(</span><span class="str">"{ count: 0 }"</span><span class="pun">).</span><span class="pln">reduceFunction</span><span class="pun">(</span><span class="str">"classpath:groupReduce.js"</span><span class="pun">),</span><span class="pln"> </span><span class="typ">XObject</span><span class="pun">.</span><span class="kwd">class</span><span class="pun">);</span></code></pre>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="mongo.aggregation"><a class="anchor" href="#mongo.aggregation"></a>8.10. Aggregation Framework Support</h3>
<div class="paragraph">
<p>Spring Data MongoDB provides support for the Aggregation Framework introduced to MongoDB in version 2.2.</p>
</div>
<div class="paragraph">
<p>The MongoDB Documentation describes the <a href="http://docs.mongodb.org/manual/core/aggregation/">Aggregation Framework</a> as follows:</p>
</div>
<div class="paragraph">
<p>For further information see the full <a href="http://docs.mongodb.org/manual/aggregation/">reference documentation</a> of the aggregation framework and other data aggregation tools for MongoDB.</p>
</div>
<div class="sect3">
<h4 id="mongo.aggregation.basic-concepts"><a class="anchor" href="#mongo.aggregation.basic-concepts"></a>8.10.1. Basic Concepts</h4>
<div class="paragraph">
<p>The Aggregation Framework support in Spring Data MongoDB is based on the following key abstractions <code>Aggregation</code>, <code>AggregationOperation</code> and <code>AggregationResults</code>.</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>Aggregation</code></p>
<div class="paragraph">
<p>An Aggregation represents a MongoDB <code>aggregate</code> operation 
and holds the description of the aggregation pipline instructions. 
Aggregations are created by inoking the appropriate <code>newAggregation(…)</code> static factory Method of the <code>Aggregation</code> class which takes the list of <code>AggregateOperation</code> as a parameter next to the optional input class.</p>
</div>
<div class="paragraph">
<p>The actual aggregate operation is executed by the <code>aggregate</code> method of the <code>MongoTemplate</code> which also takes the desired output class as parameter.</p>
</div>
</li>
<li>
<p><code>AggregationOperation</code></p>
<div class="paragraph">
<p>An <code>AggregationOperation</code> represents a MongoDB aggregation
 pipeline operation and describes the processing that should be 
performed in this aggregation step. Although one could manually create 
an <code>AggregationOperation</code> the recommended way to construct an <code>AggregateOperation</code> is to use the static factory methods provided by the <code>Aggregate</code> class.</p>
</div>
</li>
<li>
<p><code>AggregationResults</code></p>
<div class="paragraph">
<p><code>AggregationResults</code> is the container for the result of an aggregate operation. It provides access to the raw aggregation result in the form of an <code>DBObject</code>, to the mapped objects and information which performed the aggregation.</p>
</div>
<div class="paragraph">
<p>The canonical example for using the Spring Data MongoDB support for the MongoDB Aggregation Framework looks as follows:</p>
</div>
</li>
</ul>
</div>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="kwd">import</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> org</span><span class="pun">.</span><span class="pln">springframework</span><span class="pun">.</span><span class="pln">data</span><span class="pun">.</span><span class="pln">mongodb</span><span class="pun">.</span><span class="pln">core</span><span class="pun">.</span><span class="pln">aggregation</span><span class="pun">.</span><span class="typ">Aggregation</span><span class="pun">.*;</span><span class="pln">

</span><span class="typ">Aggregation</span><span class="pln"> agg </span><span class="pun">=</span><span class="pln"> newAggregation</span><span class="pun">(</span><span class="pln">
    pipelineOP1</span><span class="pun">(),</span><span class="pln">
    pipelineOP2</span><span class="pun">(),</span><span class="pln">
    pipelineOPn</span><span class="pun">()</span><span class="pln">
</span><span class="pun">);</span><span class="pln">

</span><span class="typ">AggregationResults</span><span class="pun">&lt;</span><span class="typ">OutputType</span><span class="pun">&gt;</span><span class="pln"> results </span><span class="pun">=</span><span class="pln"> mongoTemplate</span><span class="pun">.</span><span class="pln">aggregate</span><span class="pun">(</span><span class="pln">agg</span><span class="pun">,</span><span class="pln"> </span><span class="str">"INPUT_COLLECTION_NAME"</span><span class="pun">,</span><span class="pln"> </span><span class="typ">OutputType</span><span class="pun">.</span><span class="kwd">class</span><span class="pun">);</span><span class="pln">
</span><span class="typ">List</span><span class="pun">&lt;</span><span class="typ">OutputType</span><span class="pun">&gt;</span><span class="pln"> mappedResult </span><span class="pun">=</span><span class="pln"> results</span><span class="pun">.</span><span class="pln">getMappedResults</span><span class="pun">();</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Note that if you provide an input class as the first parameter to the <code>newAggregation</code> method the <code>MongoTemplate</code>
 will derive the name of the input collection from this class. Otherwise
 if you don’t not specify an input class you must provide the name of 
the input collection explicitly. If an input-class and an 
input-collection is provided the latter takes precedence.</p>
</div>
</div>
<div class="sect3">
<h4 id="mongo.aggregation.supported-aggregation-operations"><a class="anchor" href="#mongo.aggregation.supported-aggregation-operations"></a>8.10.2. Supported Aggregation Operations</h4>
<div class="paragraph">
<p>The MongoDB Aggregation Framework provides the following types of Aggregation Operations:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Pipeline Aggregation Operators</p>
</li>
<li>
<p>Group Aggregation Operators</p>
</li>
<li>
<p>Boolean Aggregation Operators</p>
</li>
<li>
<p>Comparison Aggregation Operators</p>
</li>
<li>
<p>Arithmetic Aggregation Operators</p>
</li>
<li>
<p>String Aggregation Operators</p>
</li>
<li>
<p>Date Aggregation Operators</p>
</li>
<li>
<p>Conditional Aggregation Operators</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>At the time of this writing we provide support for the following Aggregation Operations in Spring Data MongoDB.</p>
</div>
<table class="tableblock frame-all grid-all spread">
<caption class="title">Table 3. Aggregation Operations currently supported by Spring Data MongoDB</caption>
<colgroup>
<col style="width: 50%;">
<col style="width: 50%;">
</colgroup>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Pipeline Aggregation Operators</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">project, skip, limit, unwind, group, sort, geoNear</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Group Aggregation Operators</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">addToSet, first, last, max, min, avg, push, sum, (*count)</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Arithmetic Aggregation Operators</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">add (*via plus), subtract (*via minus), multiply, divide, mod</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Comparison Aggregation Operators</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">eq (*via: is), gt, gte, lt, lte, ne</p></td>
</tr>
</tbody>
</table>
<div class="paragraph">
<p>Note that the aggregation operations not listed here are currently 
not supported by Spring Data MongoDB. Comparison aggregation operators 
are expressed as <code>Criteria</code> expressions.</p>
</div>
<div class="paragraph">
<p>*) The operation is mapped or added by Spring Data MongoDB.</p>
</div>
</div>
<div class="sect3">
<h4 id="mongo.aggregation.projection"><a class="anchor" href="#mongo.aggregation.projection"></a>8.10.3. Projection Expressions</h4>
<div class="paragraph">
<p>Projection expressions are used to define the fields that are the 
outcome of a particular aggregation step. Projection expressions can be 
defined via the <code>project</code> method of the <code>Aggregate</code> class either by passing a list of <code>String`s or an aggregation framework `Fields</code> object. The projection can be extended with additional fields through a fluent API via the <code>and(String)</code> method and aliased via the <code>as(String)</code> method.
Note that one can also define fields with aliases via the static factory method <code>Fields.field</code> of the aggregation framework that can then be used to construct a new <code>Fields</code> instance.</p>
</div>
<div class="exampleblock">
<div class="title">Example 47. Projection expression examples</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="pln">project</span><span class="pun">(</span><span class="str">"name"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"netPrice"</span><span class="pun">)</span><span class="pln"> </span><span class="com">// will generate {$project: {name: 1, netPrice: 1}}</span><span class="pln">
project</span><span class="pun">().</span><span class="pln">and</span><span class="pun">(</span><span class="str">"foo"</span><span class="pun">).</span><span class="pln">as</span><span class="pun">(</span><span class="str">"bar"</span><span class="pun">)</span><span class="pln"> </span><span class="com">// will generate {$project: {bar: $foo}}</span><span class="pln">
project</span><span class="pun">(</span><span class="str">"a"</span><span class="pun">,</span><span class="str">"b"</span><span class="pun">).</span><span class="pln">and</span><span class="pun">(</span><span class="str">"foo"</span><span class="pun">).</span><span class="pln">as</span><span class="pun">(</span><span class="str">"bar"</span><span class="pun">)</span><span class="pln"> </span><span class="com">// will generate {$project: {a: 1, b: 1, bar: $foo}}</span></code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>Note that more examples for project operations can be found in the <code>AggregationTests</code> class.</p>
</div>
<div class="paragraph">
<p>Note that further details regarding the projection expressions can be found in the <a href="http://docs.mongodb.org/manual/reference/operator/aggregation/project/#pipe._S_project">corresponding section</a> of the MongoDB Aggregation Framework reference documentation.</p>
</div>
<div class="sect4">
<h5 id="mongo.aggregation.projection.expressions"><a class="anchor" href="#mongo.aggregation.projection.expressions"></a>Spring Expression Support in Projection Expressions</h5>
<div class="paragraph">
<p>As of Version 1.4.0 we support the use of SpEL expression in projection expressions via the <code>andExpression</code> method of the <code>ProjectionOperation</code>
 class. This allows you to define the desired expression as a SpEL 
expression which is translated into a corresponding MongoDB projection 
expression part on query execution. This makes it much easier to express
 complex calculations.</p>
</div>
<div class="sect5">
<h6 id="_complex_calculations_with_spel_expressions"><a class="anchor" href="#_complex_calculations_with_spel_expressions"></a>Complex calculations with SpEL expressions</h6>
<div class="paragraph">
<p>The following SpEL expression:</p>
</div>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="lit">1</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> </span><span class="pun">(</span><span class="pln">q </span><span class="pun">+</span><span class="pln"> </span><span class="lit">1</span><span class="pun">)</span><span class="pln"> </span><span class="pun">/</span><span class="pln"> </span><span class="pun">(</span><span class="pln">q </span><span class="pun">-</span><span class="pln"> </span><span class="lit">1</span><span class="pun">)</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>will be translated into the following projection expression part:</p>
</div>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-javascript" data-lang="javascript"><span class="pun">{</span><span class="pln"> </span><span class="str">"$add"</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="pln"> </span><span class="lit">1</span><span class="pun">,</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="str">"$divide"</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        </span><span class="str">"$add"</span><span class="pun">:[</span><span class="str">"$q"</span><span class="pun">,</span><span class="pln"> </span><span class="lit">1</span><span class="pun">]},</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        </span><span class="str">"$subtract"</span><span class="pun">:[</span><span class="pln"> </span><span class="str">"$q"</span><span class="pun">,</span><span class="pln"> </span><span class="lit">1</span><span class="pun">]}</span><span class="pln">
    </span><span class="pun">]</span><span class="pln">
</span><span class="pun">}]}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Have a look at an example in more context in <a href="#mongo.aggregation.examples.example5">Aggregation Framework Example 5</a> and <a href="#mongo.aggregation.examples.example6">Aggregation Framework Example 6</a>. You can find more usage examples for supported SpEL expression constructs in <code>SpelExpressionTransformerUnitTests</code>.</p>
</div>
</div>
</div>
<div class="sect4">
<h5 id="mongo.aggregation.examples"><a class="anchor" href="#mongo.aggregation.examples"></a>Aggregation Framework Examples</h5>
<div class="paragraph">
<p>The following examples demonstrate the usage patterns for the MongoDB Aggregation Framework with Spring Data MongoDB.</p>
</div>
<div id="mongo.aggregation.examples.example1" class="paragraph">
<div class="title">Aggregation Framework Example 1</div>
<p>In this introductory example we want to aggregate a list of tags to 
get the occurrence count of a particular tag from a MongoDB collection 
called <code>"tags"</code> sorted by the occurrence count in descending 
order. This example demonstrates the usage of grouping, sorting, 
projections (selection) and unwinding (result splitting).</p>
</div>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="kwd">class</span><span class="pln"> </span><span class="typ">TagCount</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
 </span><span class="typ">String</span><span class="pln"> tag</span><span class="pun">;</span><span class="pln">
 </span><span class="kwd">int</span><span class="pln"> n</span><span class="pun">;</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="kwd">import</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> org</span><span class="pun">.</span><span class="pln">springframework</span><span class="pun">.</span><span class="pln">data</span><span class="pun">.</span><span class="pln">mongodb</span><span class="pun">.</span><span class="pln">core</span><span class="pun">.</span><span class="pln">aggregation</span><span class="pun">.</span><span class="typ">Aggregation</span><span class="pun">.*;</span><span class="pln">

</span><span class="typ">Aggregation</span><span class="pln"> agg </span><span class="pun">=</span><span class="pln"> newAggregation</span><span class="pun">(</span><span class="pln">
    project</span><span class="pun">(</span><span class="str">"tags"</span><span class="pun">),</span><span class="pln">
    unwind</span><span class="pun">(</span><span class="str">"tags"</span><span class="pun">),</span><span class="pln">
    group</span><span class="pun">(</span><span class="str">"tags"</span><span class="pun">).</span><span class="pln">count</span><span class="pun">().</span><span class="pln">as</span><span class="pun">(</span><span class="str">"n"</span><span class="pun">),</span><span class="pln">
    project</span><span class="pun">(</span><span class="str">"n"</span><span class="pun">).</span><span class="pln">and</span><span class="pun">(</span><span class="str">"tag"</span><span class="pun">).</span><span class="pln">previousOperation</span><span class="pun">(),</span><span class="pln">
    sort</span><span class="pun">(</span><span class="pln">DESC</span><span class="pun">,</span><span class="pln"> </span><span class="str">"n"</span><span class="pun">)</span><span class="pln">
</span><span class="pun">);</span><span class="pln">

</span><span class="typ">AggregationResults</span><span class="pun">&lt;</span><span class="typ">TagCount</span><span class="pun">&gt;</span><span class="pln"> results </span><span class="pun">=</span><span class="pln"> mongoTemplate</span><span class="pun">.</span><span class="pln">aggregate</span><span class="pun">(</span><span class="pln">agg</span><span class="pun">,</span><span class="pln"> </span><span class="str">"tags"</span><span class="pun">,</span><span class="pln"> </span><span class="typ">TagCount</span><span class="pun">.</span><span class="kwd">class</span><span class="pun">);</span><span class="pln">
</span><span class="typ">List</span><span class="pun">&lt;</span><span class="typ">TagCount</span><span class="pun">&gt;</span><span class="pln"> tagCount </span><span class="pun">=</span><span class="pln"> results</span><span class="pun">.</span><span class="pln">getMappedResults</span><span class="pun">();</span></code></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>In order to do this we first create a new aggregation via the <code>newAggregation</code>
 static factory method to which we pass a list of aggregation 
operations. These aggregate operations define the aggregation pipeline 
of our <code>Aggregation</code>.</p>
</li>
<li>
<p>As a second step we select the <code>"tags"</code> field (which is an array of strings) from the input collection with the <code>project</code> operation.</p>
</li>
<li>
<p>In a third step we use the <code>unwind</code> operation to generate a new document for each tag within the <code>"tags"</code> array.</p>
</li>
<li>
<p>In the forth step we use the <code>group</code> operation to define a group for each <code>"tags"</code>-value for which we aggregate the occurrence count via the <code>count</code> aggregation operator and collect the result in a new field called <code>"n"</code>.</p>
</li>
<li>
<p>As a fifth step we select the field <code>"n"</code> and create an alias for the id-field generated from the previous group operation (hence the call to <code>previousOperation()</code>) with the name <code>"tag"</code>.</p>
</li>
<li>
<p>As the sixth step we sort the resulting list of tags by their occurrence count in descending order via the <code>sort</code> operation.</p>
</li>
<li>
<p>Finally we call the <code>aggregate</code> Method on the MongoTemplate in order to let MongoDB perform the acutal aggregation operation with the created <code>Aggregation</code> as an argument.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Note that the input collection is explicitly specified as the <code>"tags"</code> parameter to the <code>aggregate</code>
 Method. If the name of the input collection is not specified 
explicitly, it is derived from the input-class passed as first parameter
 to the <code>newAggreation</code> Method.</p>
</div>
<div id="mongo.aggregation.examples.example2" class="paragraph">
<div class="title">Aggregation Framework Example 2</div>
<p>This example is based on the <a href="http://docs.mongodb.org/manual/tutorial/aggregation-examples/#largest-and-smallest-cities-by-state">Largest and Smallest Cities by State</a>
 example from the MongoDB Aggregation Framework documentation. We added 
additional sorting to produce stable results with different MongoDB 
versions. Here we want to return the smallest and largest cities by 
population for each state, using the aggregation framework. This example
 demonstrates the usage of grouping, sorting and projections 
(selection).</p>
</div>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="kwd">class</span><span class="pln"> </span><span class="typ">ZipInfo</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
   </span><span class="typ">String</span><span class="pln"> id</span><span class="pun">;</span><span class="pln">
   </span><span class="typ">String</span><span class="pln"> city</span><span class="pun">;</span><span class="pln">
   </span><span class="typ">String</span><span class="pln"> state</span><span class="pun">;</span><span class="pln">
   </span><span class="lit">@Field</span><span class="pun">(</span><span class="str">"pop"</span><span class="pun">)</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> population</span><span class="pun">;</span><span class="pln">
   </span><span class="lit">@Field</span><span class="pun">(</span><span class="str">"loc"</span><span class="pun">)</span><span class="pln"> </span><span class="kwd">double</span><span class="pun">[]</span><span class="pln"> location</span><span class="pun">;</span><span class="pln">
</span><span class="pun">}</span><span class="pln">

</span><span class="kwd">class</span><span class="pln"> </span><span class="typ">City</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
   </span><span class="typ">String</span><span class="pln"> name</span><span class="pun">;</span><span class="pln">
   </span><span class="kwd">int</span><span class="pln"> population</span><span class="pun">;</span><span class="pln">
</span><span class="pun">}</span><span class="pln">

</span><span class="kwd">class</span><span class="pln"> </span><span class="typ">ZipInfoStats</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
   </span><span class="typ">String</span><span class="pln"> id</span><span class="pun">;</span><span class="pln">
   </span><span class="typ">String</span><span class="pln"> state</span><span class="pun">;</span><span class="pln">
   </span><span class="typ">City</span><span class="pln"> biggestCity</span><span class="pun">;</span><span class="pln">
   </span><span class="typ">City</span><span class="pln"> smallestCity</span><span class="pun">;</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="kwd">import</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> org</span><span class="pun">.</span><span class="pln">springframework</span><span class="pun">.</span><span class="pln">data</span><span class="pun">.</span><span class="pln">mongodb</span><span class="pun">.</span><span class="pln">core</span><span class="pun">.</span><span class="pln">aggregation</span><span class="pun">.</span><span class="typ">Aggregation</span><span class="pun">.*;</span><span class="pln">

</span><span class="typ">TypedAggregation</span><span class="pun">&lt;</span><span class="typ">ZipInfo</span><span class="pun">&gt;</span><span class="pln"> aggregation </span><span class="pun">=</span><span class="pln"> newAggregation</span><span class="pun">(</span><span class="typ">ZipInfo</span><span class="pun">.</span><span class="kwd">class</span><span class="pun">,</span><span class="pln">
    group</span><span class="pun">(</span><span class="str">"state"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"city"</span><span class="pun">)</span><span class="pln">
       </span><span class="pun">.</span><span class="pln">sum</span><span class="pun">(</span><span class="str">"population"</span><span class="pun">).</span><span class="pln">as</span><span class="pun">(</span><span class="str">"pop"</span><span class="pun">),</span><span class="pln">
    sort</span><span class="pun">(</span><span class="pln">ASC</span><span class="pun">,</span><span class="pln"> </span><span class="str">"pop"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"state"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"city"</span><span class="pun">),</span><span class="pln">
    group</span><span class="pun">(</span><span class="str">"state"</span><span class="pun">)</span><span class="pln">
       </span><span class="pun">.</span><span class="pln">last</span><span class="pun">(</span><span class="str">"city"</span><span class="pun">).</span><span class="pln">as</span><span class="pun">(</span><span class="str">"biggestCity"</span><span class="pun">)</span><span class="pln">
       </span><span class="pun">.</span><span class="pln">last</span><span class="pun">(</span><span class="str">"pop"</span><span class="pun">).</span><span class="pln">as</span><span class="pun">(</span><span class="str">"biggestPop"</span><span class="pun">)</span><span class="pln">
       </span><span class="pun">.</span><span class="pln">first</span><span class="pun">(</span><span class="str">"city"</span><span class="pun">).</span><span class="pln">as</span><span class="pun">(</span><span class="str">"smallestCity"</span><span class="pun">)</span><span class="pln">
       </span><span class="pun">.</span><span class="pln">first</span><span class="pun">(</span><span class="str">"pop"</span><span class="pun">).</span><span class="pln">as</span><span class="pun">(</span><span class="str">"smallestPop"</span><span class="pun">),</span><span class="pln">
    project</span><span class="pun">()</span><span class="pln">
       </span><span class="pun">.</span><span class="pln">and</span><span class="pun">(</span><span class="str">"state"</span><span class="pun">).</span><span class="pln">previousOperation</span><span class="pun">()</span><span class="pln">
       </span><span class="pun">.</span><span class="pln">and</span><span class="pun">(</span><span class="str">"biggestCity"</span><span class="pun">)</span><span class="pln">
          </span><span class="pun">.</span><span class="pln">nested</span><span class="pun">(</span><span class="pln">bind</span><span class="pun">(</span><span class="str">"name"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"biggestCity"</span><span class="pun">).</span><span class="pln">and</span><span class="pun">(</span><span class="str">"population"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"biggestPop"</span><span class="pun">))</span><span class="pln">
       </span><span class="pun">.</span><span class="pln">and</span><span class="pun">(</span><span class="str">"smallestCity"</span><span class="pun">)</span><span class="pln">
          </span><span class="pun">.</span><span class="pln">nested</span><span class="pun">(</span><span class="pln">bind</span><span class="pun">(</span><span class="str">"name"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"smallestCity"</span><span class="pun">).</span><span class="pln">and</span><span class="pun">(</span><span class="str">"population"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"smallestPop"</span><span class="pun">)),</span><span class="pln">
    sort</span><span class="pun">(</span><span class="pln">ASC</span><span class="pun">,</span><span class="pln"> </span><span class="str">"state"</span><span class="pun">)</span><span class="pln">
</span><span class="pun">);</span><span class="pln">

</span><span class="typ">AggregationResults</span><span class="pun">&lt;</span><span class="typ">ZipInfoStats</span><span class="pun">&gt;</span><span class="pln"> result </span><span class="pun">=</span><span class="pln"> mongoTemplate</span><span class="pun">.</span><span class="pln">aggregate</span><span class="pun">(</span><span class="pln">aggregation</span><span class="pun">,</span><span class="pln"> </span><span class="typ">ZipInfoStats</span><span class="pun">.</span><span class="kwd">class</span><span class="pun">);</span><span class="pln">
</span><span class="typ">ZipInfoStats</span><span class="pln"> firstZipInfoStats </span><span class="pun">=</span><span class="pln"> result</span><span class="pun">.</span><span class="pln">getMappedResults</span><span class="pun">().</span><span class="pln">get</span><span class="pun">(</span><span class="lit">0</span><span class="pun">);</span></code></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>The class <code>ZipInfo</code> maps the structure of the given input-collection. The class <code>ZipInfoStats</code> defines the structure in the desired output format.</p>
</li>
<li>
<p>As a first step we use the <code>group</code> operation to define a group from the input-collection. The grouping criteria is the combination of the fields <code>"state"</code> and <code>"city" `which forms the id structure of the group. We aggregate the value of the `"population"</code> property from the grouped elements with by using the <code>sum</code> operator saving the result in the field <code>"pop"</code>.</p>
</li>
<li>
<p>In a second step we use the <code>sort</code> operation to sort the intermediate-result by the fields <code>"pop"</code>, <code>"state"</code> and <code>"city"</code>
 in ascending order, such that the smallest city is at the top and the 
biggest city is at the bottom of the result. Note that the sorting on 
"state" and <code>"city"</code> is implicitly performed against the group id fields which Spring Data MongoDB took care of.</p>
</li>
<li>
<p>In the third step we use a <code>group</code> operation again to group the intermediate result by <code>"state"</code>. Note that <code>"state"</code>
 again implicitly references an group-id field. We select the name and 
the population count of the biggest and smallest city with calls to the <code>last(…)</code> and <code>first(…​)</code> operator respectively via the <code>project</code> operation.</p>
</li>
<li>
<p>As the forth step we select the <code>"state"</code> field from the previous <code>group</code> operation. Note that <code>"state"</code>
 again implicitly references an group-id field. As we do not want an 
implicit generated id to appear, we exclude the id from the previous 
operation via <code>and(previousOperation()).exclude()</code>. As we want to populate the nested <code>City</code> structures in our output-class accordingly we have to emit appropriate sub-documents with the nested method.</p>
</li>
<li>
<p>Finally as the fifth step we sort the resulting list of <code>StateStats</code> by their state name in ascending order via the <code>sort</code> operation.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Note that we derive the name of the input-collection from the <code>ZipInfo</code>-class passed as first parameter to the <code>newAggregation</code>-Method.</p>
</div>
<div id="mongo.aggregation.examples.example3" class="paragraph">
<div class="title">Aggregation Framework Example 3</div>
<p>This example is based on the <a href="http://docs.mongodb.org/manual/tutorial/aggregation-examples/#states-with-populations-over-10-million">States with Populations Over 10 Million </a>example
 from the MongoDB Aggregation Framework documentation. We added 
additional sorting to produce stable results with different MongoDB 
versions. Here we want to return all states with a population greater 
than 10 million, using the aggregation framework. This example 
demonstrates the usage of grouping, sorting and matching (filtering).</p>
</div>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="kwd">class</span><span class="pln"> </span><span class="typ">StateStats</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
   </span><span class="lit">@Id</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> id</span><span class="pun">;</span><span class="pln">
   </span><span class="typ">String</span><span class="pln"> state</span><span class="pun">;</span><span class="pln">
   </span><span class="lit">@Field</span><span class="pun">(</span><span class="str">"totalPop"</span><span class="pun">)</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> totalPopulation</span><span class="pun">;</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="kwd">import</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> org</span><span class="pun">.</span><span class="pln">springframework</span><span class="pun">.</span><span class="pln">data</span><span class="pun">.</span><span class="pln">mongodb</span><span class="pun">.</span><span class="pln">core</span><span class="pun">.</span><span class="pln">aggregation</span><span class="pun">.</span><span class="typ">Aggregation</span><span class="pun">.*;</span><span class="pln">

</span><span class="typ">TypedAggregation</span><span class="pun">&lt;</span><span class="typ">ZipInfo</span><span class="pun">&gt;</span><span class="pln"> agg </span><span class="pun">=</span><span class="pln"> newAggregation</span><span class="pun">(</span><span class="typ">ZipInfo</span><span class="pun">.</span><span class="kwd">class</span><span class="pun">,</span><span class="pln">
    group</span><span class="pun">(</span><span class="str">"state"</span><span class="pun">).</span><span class="pln">sum</span><span class="pun">(</span><span class="str">"population"</span><span class="pun">).</span><span class="pln">as</span><span class="pun">(</span><span class="str">"totalPop"</span><span class="pun">),</span><span class="pln">
    sort</span><span class="pun">(</span><span class="pln">ASC</span><span class="pun">,</span><span class="pln"> previousOperation</span><span class="pun">(),</span><span class="pln"> </span><span class="str">"totalPop"</span><span class="pun">),</span><span class="pln">
    match</span><span class="pun">(</span><span class="pln">where</span><span class="pun">(</span><span class="str">"totalPop"</span><span class="pun">).</span><span class="pln">gte</span><span class="pun">(</span><span class="lit">10</span><span class="pln"> </span><span class="pun">*</span><span class="pln"> </span><span class="lit">1000</span><span class="pln"> </span><span class="pun">*</span><span class="pln"> </span><span class="lit">1000</span><span class="pun">))</span><span class="pln">
</span><span class="pun">);</span><span class="pln">

</span><span class="typ">AggregationResults</span><span class="pun">&lt;</span><span class="typ">StateStats</span><span class="pun">&gt;</span><span class="pln"> result </span><span class="pun">=</span><span class="pln"> mongoTemplate</span><span class="pun">.</span><span class="pln">aggregate</span><span class="pun">(</span><span class="pln">agg</span><span class="pun">,</span><span class="pln"> </span><span class="typ">StateStats</span><span class="pun">.</span><span class="kwd">class</span><span class="pun">);</span><span class="pln">
</span><span class="typ">List</span><span class="pun">&lt;</span><span class="typ">StateStats</span><span class="pun">&gt;</span><span class="pln"> stateStatsList </span><span class="pun">=</span><span class="pln"> result</span><span class="pun">.</span><span class="pln">getMappedResults</span><span class="pun">();</span></code></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>As a first step we group the input collection by the <code>"state"</code> field and calculate the sum of the <code>"population"</code> field and store the result in the new field <code>"totalPop"</code>.</p>
</li>
<li>
<p>In the second step we sort the intermediate result by the id-reference of the previous group operation in addition to the <code>"totalPop"</code> field in ascending order.</p>
</li>
<li>
<p>Finally in the third step we filter the intermediate result by using a <code>match</code> operation which accepts a <code>Criteria</code> query as an argument.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Note that we derive the name of the input-collection from the <code>ZipInfo</code>-class passed as first parameter to the <code>newAggregation</code>-Method.</p>
</div>
<div id="mongo.aggregation.examples.example4" class="paragraph">
<div class="title">Aggregation Framework Example 4</div>
<p>This example demonstrates the use of simple arithmetic operations in the projection operation.</p>
</div>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="kwd">class</span><span class="pln"> </span><span class="typ">Product</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="typ">String</span><span class="pln"> id</span><span class="pun">;</span><span class="pln">
    </span><span class="typ">String</span><span class="pln"> name</span><span class="pun">;</span><span class="pln">
    </span><span class="kwd">double</span><span class="pln"> netPrice</span><span class="pun">;</span><span class="pln">
    </span><span class="kwd">int</span><span class="pln"> spaceUnits</span><span class="pun">;</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="kwd">import</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> org</span><span class="pun">.</span><span class="pln">springframework</span><span class="pun">.</span><span class="pln">data</span><span class="pun">.</span><span class="pln">mongodb</span><span class="pun">.</span><span class="pln">core</span><span class="pun">.</span><span class="pln">aggregation</span><span class="pun">.</span><span class="typ">Aggregation</span><span class="pun">.*;</span><span class="pln">

</span><span class="typ">TypedAggregation</span><span class="pun">&lt;</span><span class="typ">Product</span><span class="pun">&gt;</span><span class="pln"> agg </span><span class="pun">=</span><span class="pln"> newAggregation</span><span class="pun">(</span><span class="typ">Product</span><span class="pun">.</span><span class="kwd">class</span><span class="pun">,</span><span class="pln">
    project</span><span class="pun">(</span><span class="str">"name"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"netPrice"</span><span class="pun">)</span><span class="pln">
        </span><span class="pun">.</span><span class="pln">and</span><span class="pun">(</span><span class="str">"netPrice"</span><span class="pun">).</span><span class="pln">plus</span><span class="pun">(</span><span class="lit">1</span><span class="pun">).</span><span class="pln">as</span><span class="pun">(</span><span class="str">"netPricePlus1"</span><span class="pun">)</span><span class="pln">
        </span><span class="pun">.</span><span class="pln">and</span><span class="pun">(</span><span class="str">"netPrice"</span><span class="pun">).</span><span class="pln">minus</span><span class="pun">(</span><span class="lit">1</span><span class="pun">).</span><span class="pln">as</span><span class="pun">(</span><span class="str">"netPriceMinus1"</span><span class="pun">)</span><span class="pln">
        </span><span class="pun">.</span><span class="pln">and</span><span class="pun">(</span><span class="str">"netPrice"</span><span class="pun">).</span><span class="pln">multiply</span><span class="pun">(</span><span class="lit">1.19</span><span class="pun">).</span><span class="pln">as</span><span class="pun">(</span><span class="str">"grossPrice"</span><span class="pun">)</span><span class="pln">
        </span><span class="pun">.</span><span class="pln">and</span><span class="pun">(</span><span class="str">"netPrice"</span><span class="pun">).</span><span class="pln">divide</span><span class="pun">(</span><span class="lit">2</span><span class="pun">).</span><span class="pln">as</span><span class="pun">(</span><span class="str">"netPriceDiv2"</span><span class="pun">)</span><span class="pln">
        </span><span class="pun">.</span><span class="pln">and</span><span class="pun">(</span><span class="str">"spaceUnits"</span><span class="pun">).</span><span class="pln">mod</span><span class="pun">(</span><span class="lit">2</span><span class="pun">).</span><span class="pln">as</span><span class="pun">(</span><span class="str">"spaceUnitsMod2"</span><span class="pun">)</span><span class="pln">
</span><span class="pun">);</span><span class="pln">

</span><span class="typ">AggregationResults</span><span class="pun">&lt;</span><span class="typ">DBObject</span><span class="pun">&gt;</span><span class="pln"> result </span><span class="pun">=</span><span class="pln"> mongoTemplate</span><span class="pun">.</span><span class="pln">aggregate</span><span class="pun">(</span><span class="pln">agg</span><span class="pun">,</span><span class="pln"> </span><span class="typ">DBObject</span><span class="pun">.</span><span class="kwd">class</span><span class="pun">);</span><span class="pln">
</span><span class="typ">List</span><span class="pun">&lt;</span><span class="typ">DBObject</span><span class="pun">&gt;</span><span class="pln"> resultList </span><span class="pun">=</span><span class="pln"> result</span><span class="pun">.</span><span class="pln">getMappedResults</span><span class="pun">();</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Note that we derive the name of the input-collection from the <code>Product</code>-class passed as first parameter to the <code>newAggregation</code>-Method.</p>
</div>
<div id="mongo.aggregation.examples.example5" class="paragraph">
<div class="title">Aggregation Framework Example 5</div>
<p>This example demonstrates the use of simple arithmetic operations derived from SpEL Expressions in the projection operation.</p>
</div>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="kwd">class</span><span class="pln"> </span><span class="typ">Product</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="typ">String</span><span class="pln"> id</span><span class="pun">;</span><span class="pln">
    </span><span class="typ">String</span><span class="pln"> name</span><span class="pun">;</span><span class="pln">
    </span><span class="kwd">double</span><span class="pln"> netPrice</span><span class="pun">;</span><span class="pln">
    </span><span class="kwd">int</span><span class="pln"> spaceUnits</span><span class="pun">;</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="kwd">import</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> org</span><span class="pun">.</span><span class="pln">springframework</span><span class="pun">.</span><span class="pln">data</span><span class="pun">.</span><span class="pln">mongodb</span><span class="pun">.</span><span class="pln">core</span><span class="pun">.</span><span class="pln">aggregation</span><span class="pun">.</span><span class="typ">Aggregation</span><span class="pun">.*;</span><span class="pln">

</span><span class="typ">TypedAggregation</span><span class="pun">&lt;</span><span class="typ">Product</span><span class="pun">&gt;</span><span class="pln"> agg </span><span class="pun">=</span><span class="pln"> newAggregation</span><span class="pun">(</span><span class="typ">Product</span><span class="pun">.</span><span class="kwd">class</span><span class="pun">,</span><span class="pln">
    project</span><span class="pun">(</span><span class="str">"name"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"netPrice"</span><span class="pun">)</span><span class="pln">
        </span><span class="pun">.</span><span class="pln">andExpression</span><span class="pun">(</span><span class="str">"netPrice + 1"</span><span class="pun">).</span><span class="pln">as</span><span class="pun">(</span><span class="str">"netPricePlus1"</span><span class="pun">)</span><span class="pln">
        </span><span class="pun">.</span><span class="pln">andExpression</span><span class="pun">(</span><span class="str">"netPrice - 1"</span><span class="pun">).</span><span class="pln">as</span><span class="pun">(</span><span class="str">"netPriceMinus1"</span><span class="pun">)</span><span class="pln">
        </span><span class="pun">.</span><span class="pln">andExpression</span><span class="pun">(</span><span class="str">"netPrice / 2"</span><span class="pun">).</span><span class="pln">as</span><span class="pun">(</span><span class="str">"netPriceDiv2"</span><span class="pun">)</span><span class="pln">
        </span><span class="pun">.</span><span class="pln">andExpression</span><span class="pun">(</span><span class="str">"netPrice * 1.19"</span><span class="pun">).</span><span class="pln">as</span><span class="pun">(</span><span class="str">"grossPrice"</span><span class="pun">)</span><span class="pln">
        </span><span class="pun">.</span><span class="pln">andExpression</span><span class="pun">(</span><span class="str">"spaceUnits % 2"</span><span class="pun">).</span><span class="pln">as</span><span class="pun">(</span><span class="str">"spaceUnitsMod2"</span><span class="pun">)</span><span class="pln">
        </span><span class="pun">.</span><span class="pln">andExpression</span><span class="pun">(</span><span class="str">"(netPrice * 0.8  + 1.2) * 1.19"</span><span class="pun">).</span><span class="pln">as</span><span class="pun">(</span><span class="str">"grossPriceIncludingDiscountAndCharge"</span><span class="pun">)</span><span class="pln">

</span><span class="pun">);</span><span class="pln">

</span><span class="typ">AggregationResults</span><span class="pun">&lt;</span><span class="typ">DBObject</span><span class="pun">&gt;</span><span class="pln"> result </span><span class="pun">=</span><span class="pln"> mongoTemplate</span><span class="pun">.</span><span class="pln">aggregate</span><span class="pun">(</span><span class="pln">agg</span><span class="pun">,</span><span class="pln"> </span><span class="typ">DBObject</span><span class="pun">.</span><span class="kwd">class</span><span class="pun">);</span><span class="pln">
</span><span class="typ">List</span><span class="pun">&lt;</span><span class="typ">DBObject</span><span class="pun">&gt;</span><span class="pln"> resultList </span><span class="pun">=</span><span class="pln"> result</span><span class="pun">.</span><span class="pln">getMappedResults</span><span class="pun">();</span></code></pre>
</div>
</div>
<div id="mongo.aggregation.examples.example6" class="paragraph">
<div class="title">Aggregation Framework Example 6</div>
<p>This example demonstrates the use of complex arithmetic operations derived from SpEL Expressions in the projection operation.</p>
</div>
<div class="paragraph">
<p>Note: The additional parameters passed to the <code>addExpression</code>
 Method can be referenced via indexer expressions according to their 
position. In this example we reference the parameter which is the first 
parameter of the parameters array via <code>[0]</code>. External 
parameter expressions are replaced with their respective values when the
 SpEL expression is transformed into a MongoDB aggregation framework 
expression.</p>
</div>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="kwd">class</span><span class="pln"> </span><span class="typ">Product</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="typ">String</span><span class="pln"> id</span><span class="pun">;</span><span class="pln">
    </span><span class="typ">String</span><span class="pln"> name</span><span class="pun">;</span><span class="pln">
    </span><span class="kwd">double</span><span class="pln"> netPrice</span><span class="pun">;</span><span class="pln">
    </span><span class="kwd">int</span><span class="pln"> spaceUnits</span><span class="pun">;</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="kwd">import</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> org</span><span class="pun">.</span><span class="pln">springframework</span><span class="pun">.</span><span class="pln">data</span><span class="pun">.</span><span class="pln">mongodb</span><span class="pun">.</span><span class="pln">core</span><span class="pun">.</span><span class="pln">aggregation</span><span class="pun">.</span><span class="typ">Aggregation</span><span class="pun">.*;</span><span class="pln">

</span><span class="kwd">double</span><span class="pln"> shippingCosts </span><span class="pun">=</span><span class="pln"> </span><span class="lit">1.2</span><span class="pun">;</span><span class="pln">

</span><span class="typ">TypedAggregation</span><span class="pun">&lt;</span><span class="typ">Product</span><span class="pun">&gt;</span><span class="pln"> agg </span><span class="pun">=</span><span class="pln"> newAggregation</span><span class="pun">(</span><span class="typ">Product</span><span class="pun">.</span><span class="kwd">class</span><span class="pun">,</span><span class="pln">
    project</span><span class="pun">(</span><span class="str">"name"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"netPrice"</span><span class="pun">)</span><span class="pln">
        </span><span class="pun">.</span><span class="pln">andExpression</span><span class="pun">(</span><span class="str">"(netPrice * (1-discountRate)  + [0]) * (1+taxRate)"</span><span class="pun">,</span><span class="pln"> shippingCosts</span><span class="pun">).</span><span class="pln">as</span><span class="pun">(</span><span class="str">"salesPrice"</span><span class="pun">)</span><span class="pln">
</span><span class="pun">);</span><span class="pln">

</span><span class="typ">AggregationResults</span><span class="pun">&lt;</span><span class="typ">DBObject</span><span class="pun">&gt;</span><span class="pln"> result </span><span class="pun">=</span><span class="pln"> mongoTemplate</span><span class="pun">.</span><span class="pln">aggregate</span><span class="pun">(</span><span class="pln">agg</span><span class="pun">,</span><span class="pln"> </span><span class="typ">DBObject</span><span class="pun">.</span><span class="kwd">class</span><span class="pun">);</span><span class="pln">
</span><span class="typ">List</span><span class="pun">&lt;</span><span class="typ">DBObject</span><span class="pun">&gt;</span><span class="pln"> resultList </span><span class="pun">=</span><span class="pln"> result</span><span class="pun">.</span><span class="pln">getMappedResults</span><span class="pun">();</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Note that we can also refer to other fields of the document within the SpEL expression.</p>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="mongo.custom-converters"><a class="anchor" href="#mongo.custom-converters"></a>8.11. Overriding default mapping with custom converters</h3>
<div class="paragraph">
<p>In order to have more fine grained control over the mapping process you can register Spring converters with the <code>MongoConverter</code> implementations such as the <code>MappingMongoConverter</code>.</p>
</div>
<div class="paragraph">
<p>The <code>MappingMongoConverter</code> checks to see if there are any
 Spring converters that can handle a specific class before attempting to
 map the object itself. To 'hijack' the normal mapping strategies of the
 <code>MappingMongoConverter</code>, perhaps for increased performance or other custom mapping needs, you first need to create an implementation of the Spring <code>Converter</code> interface and then register it with the MappingConverter.</p>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
For more information on the Spring type conversion service see the reference docs <a href="http://docs.spring.io/spring/docs/current/spring-framework-reference/html/validation.html#core-convert">here</a>.
</td>
</tr>
</tbody></table>
</div>
<div class="sect3">
<h4 id="mongo.custom-converters.writer"><a class="anchor" href="#mongo.custom-converters.writer"></a>8.11.1. Saving using a registered Spring Converter</h4>
<div class="paragraph">
<p>An example implementation of the <code>Converter</code> that converts from a Person object to a <code>com.mongodb.DBObject</code> is shown below</p>
</div>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="kwd">import</span><span class="pln"> org</span><span class="pun">.</span><span class="pln">springframework</span><span class="pun">.</span><span class="pln">core</span><span class="pun">.</span><span class="pln">convert</span><span class="pun">.</span><span class="pln">converter</span><span class="pun">.</span><span class="typ">Converter</span><span class="pun">;</span><span class="pln">

</span><span class="kwd">import</span><span class="pln"> com</span><span class="pun">.</span><span class="pln">mongodb</span><span class="pun">.</span><span class="typ">BasicDBObject</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> com</span><span class="pun">.</span><span class="pln">mongodb</span><span class="pun">.</span><span class="typ">DBObject</span><span class="pun">;</span><span class="pln">

</span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">PersonWriteConverter</span><span class="pln"> </span><span class="kwd">implements</span><span class="pln"> </span><span class="typ">Converter</span><span class="pun">&lt;</span><span class="typ">Person</span><span class="pun">,</span><span class="pln"> </span><span class="typ">DBObject</span><span class="pun">&gt;</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

  </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">DBObject</span><span class="pln"> convert</span><span class="pun">(</span><span class="typ">Person</span><span class="pln"> source</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="typ">DBObject</span><span class="pln"> dbo </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">BasicDBObject</span><span class="pun">();</span><span class="pln">
    dbo</span><span class="pun">.</span><span class="pln">put</span><span class="pun">(</span><span class="str">"_id"</span><span class="pun">,</span><span class="pln"> source</span><span class="pun">.</span><span class="pln">getId</span><span class="pun">());</span><span class="pln">
    dbo</span><span class="pun">.</span><span class="pln">put</span><span class="pun">(</span><span class="str">"name"</span><span class="pun">,</span><span class="pln"> source</span><span class="pun">.</span><span class="pln">getFirstName</span><span class="pun">());</span><span class="pln">
    dbo</span><span class="pun">.</span><span class="pln">put</span><span class="pun">(</span><span class="str">"age"</span><span class="pun">,</span><span class="pln"> source</span><span class="pun">.</span><span class="pln">getAge</span><span class="pun">());</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> dbo</span><span class="pun">;</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="mongo.custom-converters.reader"><a class="anchor" href="#mongo.custom-converters.reader"></a>8.11.2. Reading using a Spring Converter</h4>
<div class="paragraph">
<p>An example implementation of a Converter that converts from a DBObject ot a Person object is shownn below</p>
</div>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">PersonReadConverter</span><span class="pln"> </span><span class="kwd">implements</span><span class="pln"> </span><span class="typ">Converter</span><span class="pun">&lt;</span><span class="typ">DBObject</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Person</span><span class="pun">&gt;</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

  </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">Person</span><span class="pln"> convert</span><span class="pun">(</span><span class="typ">DBObject</span><span class="pln"> source</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="typ">Person</span><span class="pln"> p </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Person</span><span class="pun">((</span><span class="typ">ObjectId</span><span class="pun">)</span><span class="pln"> source</span><span class="pun">.</span><span class="pln">get</span><span class="pun">(</span><span class="str">"_id"</span><span class="pun">),</span><span class="pln"> </span><span class="pun">(</span><span class="typ">String</span><span class="pun">)</span><span class="pln"> source</span><span class="pun">.</span><span class="pln">get</span><span class="pun">(</span><span class="str">"name"</span><span class="pun">));</span><span class="pln">
    p</span><span class="pun">.</span><span class="pln">setAge</span><span class="pun">((</span><span class="typ">Integer</span><span class="pun">)</span><span class="pln"> source</span><span class="pun">.</span><span class="pln">get</span><span class="pun">(</span><span class="str">"age"</span><span class="pun">));</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> p</span><span class="pun">;</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="mongo.custom-converters.xml"><a class="anchor" href="#mongo.custom-converters.xml"></a>8.11.3. Registering Spring Converters with the MongoConverter</h4>
<div class="paragraph">
<p>The Mongo Spring namespace provides a convenience way to register Spring <code>Converter`s with the `MappingMongoConverter</code>. The configuration snippet below shows how to manually register converter beans as well as configuring the wrapping <code>MappingMongoConverter</code> into a <code>MongoTemplate</code>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-xml" data-lang="xml"><span class="tag">&lt;mongo:db-factory</span><span class="pln"> </span><span class="atn">dbname</span><span class="pun">=</span><span class="atv">"database"</span><span class="tag">/&gt;</span><span class="pln">

</span><span class="tag">&lt;mongo:mapping-converter&gt;</span><span class="pln">
  </span><span class="tag">&lt;mongo:custom-converters&gt;</span><span class="pln">
    </span><span class="tag">&lt;mongo:converter</span><span class="pln"> </span><span class="atn">ref</span><span class="pun">=</span><span class="atv">"readConverter"</span><span class="tag">/&gt;</span><span class="pln">
    </span><span class="tag">&lt;mongo:converter&gt;</span><span class="pln">
      </span><span class="tag">&lt;bean</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"org.springframework.data.mongodb.test.PersonWriteConverter"</span><span class="tag">/&gt;</span><span class="pln">
    </span><span class="tag">&lt;/mongo:converter&gt;</span><span class="pln">
  </span><span class="tag">&lt;/mongo:custom-converters&gt;</span><span class="pln">
</span><span class="tag">&lt;/mongo:mapping-converter&gt;</span><span class="pln">

</span><span class="tag">&lt;bean</span><span class="pln"> </span><span class="atn">id</span><span class="pun">=</span><span class="atv">"readConverter"</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"org.springframework.data.mongodb.test.PersonReadConverter"</span><span class="tag">/&gt;</span><span class="pln">

</span><span class="tag">&lt;bean</span><span class="pln"> </span><span class="atn">id</span><span class="pun">=</span><span class="atv">"mongoTemplate"</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"org.springframework.data.mongodb.core.MongoTemplate"</span><span class="tag">&gt;</span><span class="pln">
  </span><span class="tag">&lt;constructor-arg</span><span class="pln"> </span><span class="atn">name</span><span class="pun">=</span><span class="atv">"mongoDbFactory"</span><span class="pln"> </span><span class="atn">ref</span><span class="pun">=</span><span class="atv">"mongoDbFactory"</span><span class="tag">/&gt;</span><span class="pln">
  </span><span class="tag">&lt;constructor-arg</span><span class="pln"> </span><span class="atn">name</span><span class="pun">=</span><span class="atv">"mongoConverter"</span><span class="pln"> </span><span class="atn">ref</span><span class="pun">=</span><span class="atv">"mappingConverter"</span><span class="tag">/&gt;</span><span class="pln">
</span><span class="tag">&lt;/bean&gt;</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>You can also use the base-package attribute of the custom-converters element to enable classpath scanning for all <code>Converter</code> and <code>GenericConverter</code> implementations below the given package.</p>
</div>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-xml" data-lang="xml"><span class="tag">&lt;mongo:mapping-converter&gt;</span><span class="pln">
  </span><span class="tag">&lt;mongo:custom-converters</span><span class="pln"> </span><span class="atn">base-package</span><span class="pun">=</span><span class="atv">"com.acme.**.converters"</span><span class="pln"> </span><span class="tag">/&gt;</span><span class="pln">
</span><span class="tag">&lt;/mongo:mapping-converter&gt;</span></code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="mongo.converter-disambiguation"><a class="anchor" href="#mongo.converter-disambiguation"></a>8.11.4. Converter disambiguation</h4>
<div class="paragraph">
<p>Generally we inspect the <code>Converter</code> implementations for 
the source and target types they convert from and to. Depending on 
whether one of those is a type MongoDB can handle natively we will 
register the converter instance as reading or writing one. Have a look 
at the following samples:</p>
</div>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="com">// Write converter as only the target type is one Mongo can handle natively</span><span class="pln">
</span><span class="kwd">class</span><span class="pln"> </span><span class="typ">MyConverter</span><span class="pln"> </span><span class="kwd">implements</span><span class="pln"> </span><span class="typ">Converter</span><span class="pun">&lt;</span><span class="typ">Person</span><span class="pun">,</span><span class="pln"> </span><span class="typ">String</span><span class="pun">&gt;</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="pun">…</span><span class="pln"> </span><span class="pun">}</span><span class="pln">

</span><span class="com">// Read converter as only the source type is one Mongo can handle natively</span><span class="pln">
</span><span class="kwd">class</span><span class="pln"> </span><span class="typ">MyConverter</span><span class="pln"> </span><span class="kwd">implements</span><span class="pln"> </span><span class="typ">Converter</span><span class="pun">&lt;</span><span class="typ">String</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Person</span><span class="pun">&gt;</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="pun">…</span><span class="pln"> </span><span class="pun">}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>In case you write a <code>Converter</code> whose source and target 
type are native Mongo types there’s no way for us to determine whether 
we should consider it as reading or writing converter. Registering the 
converter instance as both might lead to unwanted results then. E.g. a <code>Converter&lt;String, Long&gt;</code> is ambiguous although it probably does not make sense to try to convert all <code>String`s
 into `Long`s when writing. To be generally able to force the 
infrastructure to register a converter for one way only we provide 
`@ReadingConverter</code> as well as <code>@WritingConverter</code> to be used at the converter implementation.</p>
</div>
</div>
</div>
<div class="sect2">
<h3 id="mongo-template.index-and-collections"><a class="anchor" href="#mongo-template.index-and-collections"></a>8.12. Index and Collection management</h3>
<div class="paragraph">
<p><code>MongoTemplate</code> provides a few methods for managing indexes and collections. These are collected into a helper interface called <code>IndexOperations</code>. You access these operations by calling the method <code>indexOps</code> and pass in either the collection name or the <code>java.lang.Class</code> of your entity (the collection name will be derived from the .class either by name or via annotation metadata).</p>
</div>
<div class="paragraph">
<p>The <code>IndexOperations</code> interface is shown below</p>
</div>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">interface</span><span class="pln"> </span><span class="typ">IndexOperations</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

  </span><span class="kwd">void</span><span class="pln"> ensureIndex</span><span class="pun">(</span><span class="typ">IndexDefinition</span><span class="pln"> indexDefinition</span><span class="pun">);</span><span class="pln">

  </span><span class="kwd">void</span><span class="pln"> dropIndex</span><span class="pun">(</span><span class="typ">String</span><span class="pln"> name</span><span class="pun">);</span><span class="pln">

  </span><span class="kwd">void</span><span class="pln"> dropAllIndexes</span><span class="pun">();</span><span class="pln">

  </span><span class="kwd">void</span><span class="pln"> resetIndexCache</span><span class="pun">();</span><span class="pln">

  </span><span class="typ">List</span><span class="pun">&lt;</span><span class="typ">IndexInfo</span><span class="pun">&gt;</span><span class="pln"> getIndexInfo</span><span class="pun">();</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div>
</div>
<div class="sect3">
<h4 id="mongo-template.index-and-collections.index"><a class="anchor" href="#mongo-template.index-and-collections.index"></a>8.12.1. Methods for creating an Index</h4>
<div class="paragraph">
<p>We can create an index on a collection to improve query performance.</p>
</div>
<div class="sect4">
<h5 id="_creating_an_index_using_the_mongotemplate"><a class="anchor" href="#_creating_an_index_using_the_mongotemplate"></a>Creating an index using the MongoTemplate</h5>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="pln">mongoTemplate</span><span class="pun">.</span><span class="pln">indexOps</span><span class="pun">(</span><span class="typ">Person</span><span class="pun">.</span><span class="kwd">class</span><span class="pun">).</span><span class="pln">ensureIndex</span><span class="pun">(</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Index</span><span class="pun">().</span><span class="pln">on</span><span class="pun">(</span><span class="str">"name"</span><span class="pun">,</span><span class="typ">Order</span><span class="pun">.</span><span class="pln">ASCENDING</span><span class="pun">));</span></code></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p><strong>ensureIndex</strong> Ensure that an index for the provided IndexDefinition exists for the collection.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>You can create standard, geospatial and text indexes using the classes <code>IndexDefinition</code>, <code>GeoSpatialIndex</code> and <code>TextIndexDefinition</code>. For example, given the Venue class defined in a previous section, you would declare a geospatial query as shown below.</p>
</div>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="pln">mongoTemplate</span><span class="pun">.</span><span class="pln">indexOps</span><span class="pun">(</span><span class="typ">Venue</span><span class="pun">.</span><span class="kwd">class</span><span class="pun">).</span><span class="pln">ensureIndex</span><span class="pun">(</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">GeospatialIndex</span><span class="pun">(</span><span class="str">"location"</span><span class="pun">));</span></code></pre>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="mongo-template.index-and-collections.access"><a class="anchor" href="#mongo-template.index-and-collections.access"></a>8.12.2. Accessing index information</h4>
<div class="paragraph">
<p>The IndexOperations interface has the method getIndexInfo that 
returns a list of IndexInfo objects. This contains all the indexes 
defined on the collectcion. Here is an example that defines an index on 
the Person class that has age property.</p>
</div>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="pln">template</span><span class="pun">.</span><span class="pln">indexOps</span><span class="pun">(</span><span class="typ">Person</span><span class="pun">.</span><span class="kwd">class</span><span class="pun">).</span><span class="pln">ensureIndex</span><span class="pun">(</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Index</span><span class="pun">().</span><span class="pln">on</span><span class="pun">(</span><span class="str">"age"</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Order</span><span class="pun">.</span><span class="pln">DESCENDING</span><span class="pun">).</span><span class="pln">unique</span><span class="pun">(</span><span class="typ">Duplicates</span><span class="pun">.</span><span class="pln">DROP</span><span class="pun">));</span><span class="pln">

</span><span class="typ">List</span><span class="pun">&lt;</span><span class="typ">IndexInfo</span><span class="pun">&gt;</span><span class="pln"> indexInfoList </span><span class="pun">=</span><span class="pln"> template</span><span class="pun">.</span><span class="pln">indexOps</span><span class="pun">(</span><span class="typ">Person</span><span class="pun">.</span><span class="kwd">class</span><span class="pun">).</span><span class="pln">getIndexInfo</span><span class="pun">();</span><span class="pln">

</span><span class="com">// Contains</span><span class="pln">
</span><span class="com">// [IndexInfo [fieldSpec={_id=ASCENDING}, name=_id_, unique=false, dropDuplicates=false, sparse=false],</span><span class="pln">
</span><span class="com">//  IndexInfo [fieldSpec={age=DESCENDING}, name=age_-1, unique=true, dropDuplicates=true, sparse=false]]</span></code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="mongo-template.index-and-collections.collection"><a class="anchor" href="#mongo-template.index-and-collections.collection"></a>8.12.3. Methods for working with a Collection</h4>
<div class="paragraph">
<p>It’s time to look at some code examples showing how to use the <code>MongoTemplate</code>. First we look at creating our first collection.</p>
</div>
<div class="exampleblock">
<div class="title">Example 48. Working with collections using the MongoTemplate</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="typ">DBCollection</span><span class="pln"> collection </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(!</span><span class="pln">mongoTemplate</span><span class="pun">.</span><span class="pln">getCollectionNames</span><span class="pun">().</span><span class="pln">contains</span><span class="pun">(</span><span class="str">"MyNewCollection"</span><span class="pun">))</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    collection </span><span class="pun">=</span><span class="pln"> mongoTemplate</span><span class="pun">.</span><span class="pln">createCollection</span><span class="pun">(</span><span class="str">"MyNewCollection"</span><span class="pun">);</span><span class="pln">
</span><span class="pun">}</span><span class="pln">

mongoTemplate</span><span class="pun">.</span><span class="pln">dropCollection</span><span class="pun">(</span><span class="str">"MyNewCollection"</span><span class="pun">);</span></code></pre>
</div>
</div>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p><strong>getCollectionNames</strong> Returns a set of collection names.</p>
</li>
<li>
<p><strong>collectionExists</strong> Check to see if a collection with a given name exists.</p>
</li>
<li>
<p><strong>createCollection</strong> Create an uncapped collection</p>
</li>
<li>
<p><strong>dropCollection</strong> Drop the collection</p>
</li>
<li>
<p><strong>getCollection</strong> Get a collection by name, creating it if it doesn’t exist.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect2">
<h3 id="mongo-template.commands"><a class="anchor" href="#mongo-template.commands"></a>8.13. Executing Commands</h3>
<div class="paragraph">
<p>You can also get at the MongoDB driver’s <code>DB.command( )</code> method using the <code>executeCommand(…)</code> methods on <code>MongoTemplate</code>. These will also perform exception translation into Spring’s <code>DataAccessException</code> hierarchy.</p>
</div>
<div class="sect3">
<h4 id="mongo-template.commands.execution"><a class="anchor" href="#mongo-template.commands.execution"></a>8.13.1. Methods for executing commands</h4>
<div class="ulist">
<ul>
<li>
<p><code>CommandResult</code> <strong>executeCommand</strong> <code>(DBObject command)</code> Execute a MongoDB command.</p>
</li>
<li>
<p><code>CommandResult</code> <strong>executeCommand</strong> <code>(String jsonCommand)</code> Execute the a MongoDB command expressed as a JSON string.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect2">
<h3 id="mongodb.mapping-usage.events"><a class="anchor" href="#mongodb.mapping-usage.events"></a>8.14. Lifecycle Events</h3>
<div class="paragraph">
<p>Built into the MongoDB mapping framework are several <code>org.springframework.context.ApplicationEvent</code> events that your application can respond to by registering special beans in the <code>ApplicationContext</code>.
 By being based off Spring’s ApplicationContext event infastructure this
 enables other products, such as Spring Integration, to easily receive 
these events as they are a well known eventing mechanism in Spring based
 applications.</p>
</div>
<div class="paragraph">
<p>To intercept an object before it goes through the conversion process (which turns your domain object into a <code>com.mongodb.DBObject</code>), you’d register a subclass of <code>AbstractMongoEventListener</code> that overrides the <code>onBeforeConvert</code>
 method. When the event is dispatched, your listener will be called and 
passed the domain object before it goes into the converter.</p>
</div>
<div class="exampleblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">BeforeConvertListener</span><span class="pln"> </span><span class="kwd">extends</span><span class="pln"> </span><span class="typ">AbstractMongoEventListener</span><span class="pun">&lt;</span><span class="typ">Person</span><span class="pun">&gt;</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  </span><span class="lit">@Override</span><span class="pln">
  </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> onBeforeConvert</span><span class="pun">(</span><span class="typ">Person</span><span class="pln"> p</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="pun">...</span><span class="pln"> does some auditing manipulation</span><span class="pun">,</span><span class="pln"> set timestamps</span><span class="pun">,</span><span class="pln"> whatever </span><span class="pun">...</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>To intercept an object before it goes into the database, you’d register a subclass of <code>org.springframework.data.mongodb.core.mapping.event.AbstractMongoEventListener</code> that overrides the <code>onBeforeSave</code> method. When the event is dispatched, your listener will be called and passed the domain object and the converted <code>com.mongodb.DBObject</code>.</p>
</div>
<div class="exampleblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">BeforeSaveListener</span><span class="pln"> </span><span class="kwd">extends</span><span class="pln"> </span><span class="typ">AbstractMongoEventListener</span><span class="pun">&lt;</span><span class="typ">Person</span><span class="pun">&gt;</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  </span><span class="lit">@Override</span><span class="pln">
  </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> onBeforeSave</span><span class="pun">(</span><span class="typ">Person</span><span class="pln"> p</span><span class="pun">,</span><span class="pln"> </span><span class="typ">DBObject</span><span class="pln"> dbo</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="pun">…</span><span class="pln"> change values</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">delete</span><span class="pln"> them</span><span class="pun">,</span><span class="pln"> whatever </span><span class="pun">…</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>Simply declaring these beans in your Spring ApplicationContext will cause them to be invoked whenever the event is dispatched.</p>
</div>
<div class="paragraph">
<p>The list of callback methods that are present in AbstractMappingEventListener are</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>onBeforeConvert</code> - called in MongoTemplate insert, 
insertList and save operations before the object is converted to a 
DBObject using a MongoConveter.</p>
</li>
<li>
<p><code>onBeforeSave</code> - called in MongoTemplate insert, insertList and save operations <strong>before</strong> inserting/saving the DBObject in the database.</p>
</li>
<li>
<p><code>onAfterSave</code> - called in MongoTemplate insert, insertList and save operations <strong>after</strong> inserting/saving the DBObject in the database.</p>
</li>
<li>
<p><code>onAfterLoad</code> - called in MongoTemplate find, 
findAndRemove, findOne and getCollection methods after the DBObject is 
retrieved from the database.</p>
</li>
<li>
<p><code>onAfterConvert</code> - called in MongoTemplate find, 
findAndRemove, findOne and getCollection methods after the DBObject 
retrieved from the database was converted to a POJO.</p>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="mongo.exception"><a class="anchor" href="#mongo.exception"></a>8.15. Exception Translation</h3>
<div class="paragraph">
<p>The Spring framework provides exception translation for a wide 
variety of database and mapping technologies. This has traditionally 
been for JDBC and JPA. The Spring support for MongoDB extends this 
feature to the MongoDB Database by providing an implementation of the <code>org.springframework.dao.support.PersistenceExceptionTranslator</code> interface.</p>
</div>
<div class="paragraph">
<p>The motivation behind mapping to Spring’s <a href="http://docs.spring.io/spring/docs/current/spring-framework-reference/html/dao.html#dao-exceptions">consistent data access exception hierarchy</a> is that you are then able to write portable and descriptive exception handling code without resorting to coding against <a href="http://www.mongodb.org/about/contributors/error-codes/">MongoDB error codes</a>. All of Spring’s data access exceptions are inherited from the root <code>DataAccessException</code>
 class so you can be sure that you will be able to catch all database 
related exception within a single try-catch block. Note, that not all 
exceptions thrown by the MongoDB driver inherit from the MongoException 
class. The inner exception and message are preserved so no information 
is lost.</p>
</div>
<div class="paragraph">
<p>Some of the mappings performed by the <code>MongoExceptionTranslator</code> are: com.mongodb.Network to DataAccessResourceFailureException and <code>MongoException</code> error codes 1003, 12001, 12010, 12011, 12012 to <code>InvalidDataAccessApiUsageException</code>. Look into the implementation for more details on the mapping.</p>
</div>
</div>
<div class="sect2">
<h3 id="mongo.executioncallback"><a class="anchor" href="#mongo.executioncallback"></a>8.16. Execution callbacks</h3>
<div class="paragraph">
<p>One common design feature of all Spring template classes is that all 
functionality is routed into one of the templates execute callback 
methods. This helps ensure that exceptions and any resource management 
that maybe required are performed consistency. While this was of much 
greater need in the case of JDBC and JMS than with MongoDB, it still 
offers a single spot for exception translation and logging to occur. As 
such, using thexe execute callback is the preferred way to access the 
MongoDB driver’s <code>DB</code> and <code>DBCollection</code> objects to perform uncommon operations that were not exposed as methods on <code>MongoTemplate</code>.</p>
</div>
<div class="paragraph">
<p>Here is a list of execute callback methods.</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>&lt;T&gt; T</code> <strong>execute</strong> <code>(Class&lt;?&gt; entityClass, CollectionCallback&lt;T&gt; action)</code> Executes the given CollectionCallback for the entity collection of the specified class.</p>
</li>
<li>
<p><code>&lt;T&gt; T</code> <strong>execute</strong> <code>(String collectionName, CollectionCallback&lt;T&gt; action)</code> Executes the given CollectionCallback on the collection of the given name.</p>
</li>
<li>
<p><code>&lt;T&gt; T</code> <strong>execute</strong> <code>(DbCallback&lt;T&gt;
 action) Spring Data MongoDB provides support for the Aggregation 
Framework introduced to MongoDB in version 2.2.</code> Executes a DbCallback translating any exceptions as necessary.</p>
</li>
<li>
<p><code>&lt;T&gt; T</code> <strong>execute</strong> <code>(String collectionName, DbCallback&lt;T&gt; action)</code> Executes a DbCallback on the collection of the given name translating any exceptions as necessary.</p>
</li>
<li>
<p><code>&lt;T&gt; T</code> <strong>executeInSession</strong> 
`(DbCallback&lt;T&gt; action) ` Executes the given DbCallback within the
 same connection to the database so as to ensure consistency in a write 
heavy environment where you may read the data that you wrote.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Here is an example that uses the <code>CollectionCallback</code> to return information about an index</p>
</div>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="kwd">boolean</span><span class="pln"> hasIndex </span><span class="pun">=</span><span class="pln"> template</span><span class="pun">.</span><span class="pln">execute</span><span class="pun">(</span><span class="str">"geolocation"</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">CollectionCallbackBoolean</span><span class="pun">&gt;()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">Boolean</span><span class="pln"> doInCollection</span><span class="pun">(</span><span class="typ">Venue</span><span class="pun">.</span><span class="kwd">class</span><span class="pun">,</span><span class="pln"> </span><span class="typ">DBCollection</span><span class="pln"> collection</span><span class="pun">)</span><span class="pln"> </span><span class="kwd">throws</span><span class="pln"> </span><span class="typ">MongoException</span><span class="pun">,</span><span class="pln"> </span><span class="typ">DataAccessException</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="typ">List</span><span class="pun">&lt;</span><span class="typ">DBObject</span><span class="pun">&gt;</span><span class="pln"> indexes </span><span class="pun">=</span><span class="pln"> collection</span><span class="pun">.</span><span class="pln">getIndexInfo</span><span class="pun">();</span><span class="pln">
    </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="typ">DBObject</span><span class="pln"> dbo </span><span class="pun">:</span><span class="pln"> indexes</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
      </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="str">"location_2d"</span><span class="pun">.</span><span class="pln">equals</span><span class="pun">(</span><span class="pln">dbo</span><span class="pun">.</span><span class="pln">get</span><span class="pun">(</span><span class="str">"name"</span><span class="pun">)))</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">true</span><span class="pun">;</span><span class="pln">
      </span><span class="pun">}</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">false</span><span class="pun">;</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">
</span><span class="pun">});</span></code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="gridfs"><a class="anchor" href="#gridfs"></a>8.17. GridFS support</h3>
<div class="paragraph">
<p>MongoDB supports storing binary files inside it’s filesystem GridFS. Spring Data MongoDB provides a <code>GridFsOperations</code> interface as well as the according implementation <code>GridFsTemplate</code> to easily interact with the filesystem. You can setup a <code>GridFsTemplate</code> instance by handing it a <code>MongoDbFactory</code> as well as a <code>MongoConverter</code>:</p>
</div>
<div class="exampleblock">
<div class="title">Example 49. JavaConfig setup for a GridFsTemplate</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="kwd">class</span><span class="pln"> </span><span class="typ">GridFsConfiguration</span><span class="pln"> </span><span class="kwd">extends</span><span class="pln"> </span><span class="typ">AbstractMongoConfiguration</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

  </span><span class="com">// … further configuration omitted</span><span class="pln">

  </span><span class="lit">@Bean</span><span class="pln">
  </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">GridFsTemplate</span><span class="pln"> gridFsTemplate</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">GridFsTemplate</span><span class="pun">(</span><span class="pln">mongoDbFactory</span><span class="pun">(),</span><span class="pln"> mappingMongoConverter</span><span class="pun">());</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>An according XML configuration looks like this:</p>
</div>
<div class="exampleblock">
<div class="title">Example 50. XML configuration for a GridFsTemplate</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-xml" data-lang="xml"><span class="pun">&lt;?</span><span class="pln">xml version</span><span class="pun">=</span><span class="str">"1.0"</span><span class="pln"> encoding</span><span class="pun">=</span><span class="str">"UTF-8"</span><span class="pun">?&gt;</span><span class="pln">
</span><span class="tag">&lt;beans</span><span class="pln"> </span><span class="atn">xmlns</span><span class="pun">=</span><span class="atv">"http://www.springframework.org/schema/beans"</span><span class="pln">
  </span><span class="atn">xmlns:xsi</span><span class="pun">=</span><span class="atv">"http://www.w3.org/2001/XMLSchema-instance"</span><span class="pln">
  </span><span class="atn">xmlns:mongo</span><span class="pun">=</span><span class="atv">"http://www.springframework.org/schema/data/mongo"</span><span class="pln">
  </span><span class="atn">xsi:schemaLocation</span><span class="pun">=</span><span class="atv">"http://www.springframework.org/schema/data/mongo
                      http://www.springframework.org/schema/data/mongo/spring-mongo.xsd
                      http://www.springframework.org/schema/beans
                      http://www.springframework.org/schema/beans/spring-beans.xsd"</span><span class="tag">&gt;</span><span class="pln">

  </span><span class="tag">&lt;mongo:db-factory</span><span class="pln"> </span><span class="atn">id</span><span class="pun">=</span><span class="atv">"mongoDbFactory"</span><span class="pln"> </span><span class="atn">dbname</span><span class="pun">=</span><span class="atv">"database"</span><span class="pln"> </span><span class="tag">/&gt;</span><span class="pln">
  </span><span class="tag">&lt;mongo:mapping-converter</span><span class="pln"> </span><span class="atn">id</span><span class="pun">=</span><span class="atv">"converter"</span><span class="pln"> </span><span class="tag">/&gt;</span><span class="pln">

  </span><span class="tag">&lt;bean</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"org.springframework.data.mongodb.gridfs.GridFsTemplate"</span><span class="tag">&gt;</span><span class="pln">
    </span><span class="tag">&lt;constructor-arg</span><span class="pln"> </span><span class="atn">ref</span><span class="pun">=</span><span class="atv">"mongoDbFactory"</span><span class="pln"> </span><span class="tag">/&gt;</span><span class="pln">
    </span><span class="tag">&lt;constructor-arg</span><span class="pln"> </span><span class="atn">ref</span><span class="pun">=</span><span class="atv">"converter"</span><span class="pln"> </span><span class="tag">/&gt;</span><span class="pln">
  </span><span class="tag">&lt;/bean&gt;</span><span class="pln">

</span><span class="tag">&lt;/beans&gt;</span></code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>The template can now be injected and used to perform storage and retrieval operations.</p>
</div>
<div class="exampleblock">
<div class="title">Example 51. Using GridFsTemplate to store files</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="kwd">class</span><span class="pln"> </span><span class="typ">GridFsClient</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

  </span><span class="lit">@Autowired</span><span class="pln">
  </span><span class="typ">GridFsOperations</span><span class="pln"> operations</span><span class="pun">;</span><span class="pln">

  </span><span class="lit">@Test</span><span class="pln">
  </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> storeFileToGridFs </span><span class="pun">{</span><span class="pln">

    </span><span class="typ">FileMetadata</span><span class="pln"> metadata </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">FileMetadata</span><span class="pun">();</span><span class="pln">
    </span><span class="com">// populate metadata</span><span class="pln">
    </span><span class="typ">Resource</span><span class="pln"> file </span><span class="pun">=</span><span class="pln"> </span><span class="pun">…</span><span class="pln"> </span><span class="com">// lookup File or Resource</span><span class="pln">

    operations</span><span class="pun">.</span><span class="pln">store</span><span class="pun">(</span><span class="pln">file</span><span class="pun">.</span><span class="pln">getInputStream</span><span class="pun">(),</span><span class="pln"> </span><span class="str">"filename.txt"</span><span class="pun">,</span><span class="pln"> metadata</span><span class="pun">);</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>The <code>store(…)</code> operations take an <code>InputStream</code>,
 a filename and optionally metadata information about the file to store.
 The metadata can be an arbitrary object which will be marshalled by the
 <code>MongoConverter</code> configured with the <code>GridFsTemplate</code>. Alternatively you can also provide a <code>DBObject</code> as well.</p>
</div>
<div class="paragraph">
<p>Reading files from the filesystem can either be achieved through the <code>find(…)</code> or <code>getResources(…)</code> methods. Let’s have a look at the <code>find(…)</code> methods first. You can either find a single file matching a <code>Query</code> or multiple ones. To easily define file queries we provide the <code>GridFsCriteria</code> helper class. It provides static factory methods to encapsulate default metadata fields (e.g. <code>whereFilename()</code>, <code>whereContentType()</code>) or the custom one through <code>whereMetaData()</code>.</p>
</div>
<div class="exampleblock">
<div class="title">Example 52. Using GridFsTemplate to query for files</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="kwd">class</span><span class="pln"> </span><span class="typ">GridFsClient</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

  </span><span class="lit">@Autowired</span><span class="pln">
  </span><span class="typ">GridFsOperations</span><span class="pln"> operations</span><span class="pun">;</span><span class="pln">

  </span><span class="lit">@Test</span><span class="pln">
  </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> findFilesInGridFs </span><span class="pun">{</span><span class="pln">
    </span><span class="typ">List</span><span class="pun">&lt;</span><span class="typ">GridFSDBFile</span><span class="pun">&gt;</span><span class="pln"> result </span><span class="pun">=</span><span class="pln"> operations</span><span class="pun">.</span><span class="pln">find</span><span class="pun">(</span><span class="pln">query</span><span class="pun">(</span><span class="pln">whereFilename</span><span class="pun">().</span><span class="pln">is</span><span class="pun">(</span><span class="str">"filename.txt"</span><span class="pun">)))</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div>
</div>
</div>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
Currently MongoDB does not support defining sort criteria when 
retrieving files from GridFS. Thus any sort criteria defined on the <code>Query</code> instance handed into the <code>find(…)</code> method will be disregarded.
</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>The other option to read files from the GridFs is using the methods introduced by the <code>ResourcePatternResolver</code> interface. They allow handing an Ant path into the method ar thus retrieve files matching the given pattern.</p>
</div>
<div class="exampleblock">
<div class="title">Example 53. Using GridFsTemplate to read files</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="kwd">class</span><span class="pln"> </span><span class="typ">GridFsClient</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

  </span><span class="lit">@Autowired</span><span class="pln">
  </span><span class="typ">GridFsOperations</span><span class="pln"> operations</span><span class="pun">;</span><span class="pln">

  </span><span class="lit">@Test</span><span class="pln">
  </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> readFilesFromGridFs </span><span class="pun">{</span><span class="pln">
    </span><span class="typ">GridFsResources</span><span class="pun">[]</span><span class="pln"> txtFiles </span><span class="pun">=</span><span class="pln"> operations</span><span class="pun">.</span><span class="pln">getResources</span><span class="pun">(</span><span class="str">"*.txt"</span><span class="pun">);</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p><code>GridFsOperations</code> extending <code>ResourcePatternResolver</code> allows the <code>GridFsTemplate</code> e.g. to be plugged into an <code>ApplicationContext</code> to read Spring Config files from a MongoDB.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="mongo.repositories"><a class="anchor" href="#mongo.repositories"></a>9. MongoDB repositories</h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="mongo-repo-intro"><a class="anchor" href="#mongo-repo-intro"></a>9.1. Introduction</h3>
<div class="paragraph">
<p>This chapter will point out the specialties for repository support 
for MongoDB. This builds on the core repository support explained in <a href="#repositories">Working with Spring Data Repositories</a>. So make sure you’ve got a sound understanding of the basic concepts explained there.</p>
</div>
</div>
<div class="sect2">
<h3 id="mongo-repo-usage"><a class="anchor" href="#mongo-repo-usage"></a>9.2. Usage</h3>
<div class="paragraph">
<p>To access domain entities stored in a MongoDB you can leverage our 
sophisticated repository support that eases implementing those quite 
significantly. To do so, simply create an interface for your repository:</p>
</div>
<div class="exampleblock">
<div class="title">Example 54. Sample Person entity</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">Person</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

  </span><span class="lit">@Id</span><span class="pln">
  </span><span class="kwd">private</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> id</span><span class="pun">;</span><span class="pln">
  </span><span class="kwd">private</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> firstname</span><span class="pun">;</span><span class="pln">
  </span><span class="kwd">private</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> lastname</span><span class="pun">;</span><span class="pln">
  </span><span class="kwd">private</span><span class="pln"> </span><span class="typ">Address</span><span class="pln"> address</span><span class="pun">;</span><span class="pln">

  </span><span class="com">// … getters and setters omitted</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>We have a quite simple domain object here. Note that it has a property named <code>id</code> of type`ObjectId`. The default serialization mechanism used in <code>MongoTemplate</code> (which is backing the repository support) regards properties named id as document id. Currently we support`String`, <code>ObjectId</code> and <code>BigInteger</code> as id-types.</p>
</div>
<div class="exampleblock">
<div class="title">Example 55. Basic repository interface to persist Person entities</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code><span class="kwd">public</span><span class="pln"> </span><span class="kwd">interface</span><span class="pln"> </span><span class="typ">PersonRepository</span><span class="pln"> </span><span class="kwd">extends</span><span class="pln"> </span><span class="typ">PagingAndSortingRepository</span><span class="pun">&lt;</span><span class="typ">Person</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Long</span><span class="pun">&gt;</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

  </span><span class="com">// additional custom finder methods go here</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>Right now this interface simply serves typing purposes but we will 
add additional methods to it later. In your Spring configuration simply 
add</p>
</div>
<div class="exampleblock">
<div class="title">Example 56. General MongoDB repository Spring configuration</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-xml" data-lang="xml"><span class="pun">&lt;?</span><span class="pln">xml version</span><span class="pun">=</span><span class="str">"1.0"</span><span class="pln"> encoding</span><span class="pun">=</span><span class="str">"UTF-8"</span><span class="pun">?&gt;</span><span class="pln">
</span><span class="tag">&lt;beans</span><span class="pln"> </span><span class="atn">xmlns</span><span class="pun">=</span><span class="atv">"http://www.springframework.org/schema/beans"</span><span class="pln">
  </span><span class="atn">xmlns:xsi</span><span class="pun">=</span><span class="atv">"http://www.w3.org/2001/XMLSchema-instance"</span><span class="pln">
  </span><span class="atn">xmlns:mongo</span><span class="pun">=</span><span class="atv">"http://www.springframework.org/schema/data/mongo"</span><span class="pln">
  </span><span class="atn">xsi:schemaLocation</span><span class="pun">=</span><span class="atv">"http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
    http://www.springframework.org/schema/data/mongo
    http://www.springframework.org/schema/data/mongo/spring-mongo-1.0.xsd"</span><span class="tag">&gt;</span><span class="pln">

  </span><span class="tag">&lt;mongo:mongo</span><span class="pln"> </span><span class="atn">id</span><span class="pun">=</span><span class="atv">"mongo"</span><span class="pln"> </span><span class="tag">/&gt;</span><span class="pln">

  </span><span class="tag">&lt;bean</span><span class="pln"> </span><span class="atn">id</span><span class="pun">=</span><span class="atv">"mongoTemplate"</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"org.springframework.data.mongodb.core.MongoTemplate"</span><span class="tag">&gt;</span><span class="pln">
    </span><span class="tag">&lt;constructor-arg</span><span class="pln"> </span><span class="atn">ref</span><span class="pun">=</span><span class="atv">"mongo"</span><span class="pln"> </span><span class="tag">/&gt;</span><span class="pln">
    </span><span class="tag">&lt;constructor-arg</span><span class="pln"> </span><span class="atn">value</span><span class="pun">=</span><span class="atv">"databaseName"</span><span class="pln"> </span><span class="tag">/&gt;</span><span class="pln">
  </span><span class="tag">&lt;/bean&gt;</span><span class="pln">

  </span><span class="tag">&lt;mongo:repositories</span><span class="pln"> </span><span class="atn">base-package</span><span class="pun">=</span><span class="atv">"com.acme.*.repositories"</span><span class="pln"> </span><span class="tag">/&gt;</span><span class="pln">

</span><span class="tag">&lt;/beans&gt;</span></code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>This namespace element will cause the base packages to be scanned for interfaces extending <code>MongoRepository</code> and create Spring beans for each of them found. By default the repositories will get a <code>MongoTemplate</code> Spring bean wired that is called <code>mongoTemplate</code>, so you only need to configure <code>mongo-template-ref</code> explicitly if you deviate from this convention.</p>
</div>
<div class="paragraph">
<p>If you’d rather like to go with JavaConfig use the <code>@EnableMongoRepositories</code>
 annotation. The annotation carries the very same attributes like the 
namespace element. If no base package is configured the infrastructure 
will scan the package of the annotated configuration class.</p>
</div>
<div class="exampleblock">
<div class="title">Example 57. JavaConfig for repositories</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="lit">@Configuration</span><span class="pln">
</span><span class="lit">@EnableMongoRepositories</span><span class="pln">
</span><span class="kwd">class</span><span class="pln"> </span><span class="typ">ApplicationConfig</span><span class="pln"> </span><span class="kwd">extends</span><span class="pln"> </span><span class="typ">AbstractMongoConfiguration</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

  </span><span class="lit">@Override</span><span class="pln">
  </span><span class="kwd">protected</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> getDatabaseName</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> </span><span class="str">"e-store"</span><span class="pun">;</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">

  </span><span class="lit">@Override</span><span class="pln">
  </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">Mongo</span><span class="pln"> mongo</span><span class="pun">()</span><span class="pln"> </span><span class="kwd">throws</span><span class="pln"> </span><span class="typ">Exception</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Mongo</span><span class="pun">();</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">

  </span><span class="lit">@Override</span><span class="pln">
  </span><span class="kwd">protected</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> getMappingBasePackage</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> </span><span class="str">"com.oreilly.springdata.mongodb"</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>As our domain repository extends <code>PagingAndSortingRepository</code>
 it provides you with CRUD operations as well as methods for paginated 
and sorted access to the entities. Working with the repository instance 
is just a matter of dependency injecting it into a client. So accessing 
the second page of `Person`s at a page size of 10 would simply look 
something like this:</p>
</div>
<div class="exampleblock">
<div class="title">Example 58. Paging access to Person entities</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="lit">@RunWith</span><span class="pun">(</span><span class="typ">SpringJUnit4ClassRunner</span><span class="pun">.</span><span class="kwd">class</span><span class="pun">)</span><span class="pln">
</span><span class="lit">@ContextConfiguration</span><span class="pln">
</span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">PersonRepositoryTests</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

    </span><span class="lit">@Autowired</span><span class="pln"> </span><span class="typ">PersonRepository</span><span class="pln"> repository</span><span class="pun">;</span><span class="pln">

    </span><span class="lit">@Test</span><span class="pln">
    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> readsFirstPageCorrectly</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

      </span><span class="typ">Page</span><span class="pun">&lt;</span><span class="typ">Person</span><span class="pun">&gt;</span><span class="pln"> persons </span><span class="pun">=</span><span class="pln"> repository</span><span class="pun">.</span><span class="pln">findAll</span><span class="pun">(</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">PageRequest</span><span class="pun">(</span><span class="lit">0</span><span class="pun">,</span><span class="pln"> </span><span class="lit">10</span><span class="pun">));</span><span class="pln">
      assertThat</span><span class="pun">(</span><span class="pln">persons</span><span class="pun">.</span><span class="pln">isFirstPage</span><span class="pun">(),</span><span class="pln"> is</span><span class="pun">(</span><span class="kwd">true</span><span class="pun">));</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>The sample creates an application context with Spring’s unit test 
support which will perform annotation based dependency injection into 
test cases. Inside the test method we simply use the repository to query
 the datastore. We hand the repository a <code>PageRequest</code> instance that requests the first page of persons at a page size of 10.</p>
</div>
</div>
<div class="sect2">
<h3 id="mongodb.repositories.queries"><a class="anchor" href="#mongodb.repositories.queries"></a>9.3. Query methods</h3>
<div class="paragraph">
<p>Most of the data access operations you usually trigger on a 
repository result a query being executed against the MongoDB databases. 
Defining such a query is just a matter of declaring a method on the 
repository interface</p>
</div>
<div class="exampleblock">
<div class="title">Example 59. PersonRepository with query methods</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">interface</span><span class="pln"> </span><span class="typ">PersonRepository</span><span class="pln"> </span><span class="kwd">extends</span><span class="pln"> </span><span class="typ">PagingAndSortingRepository</span><span class="pun">&lt;</span><span class="typ">Person</span><span class="pun">,</span><span class="pln"> </span><span class="typ">String</span><span class="pun">&gt;</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

    </span><span class="typ">List</span><span class="pun">&lt;</span><span class="typ">Person</span><span class="pun">&gt;</span><span class="pln"> findByLastname</span><span class="pun">(</span><span class="typ">String</span><span class="pln"> lastname</span><span class="pun">);</span><span class="pln">                      </span><i class="conum" data-value="1"></i><b><span class="pun">(</span><span class="lit">1</span><span class="pun">)</span></b><span class="pln">

    </span><span class="typ">Page</span><span class="pun">&lt;</span><span class="typ">Person</span><span class="pun">&gt;</span><span class="pln"> findByFirstname</span><span class="pun">(</span><span class="typ">String</span><span class="pln"> firstname</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Pageable</span><span class="pln"> pageable</span><span class="pun">);</span><span class="pln"> </span><i class="conum" data-value="2"></i><b><span class="pun">(</span><span class="lit">2</span><span class="pun">)</span></b><span class="pln">

    </span><span class="typ">Person</span><span class="pln"> findByShippingAddresses</span><span class="pun">(</span><span class="typ">Address</span><span class="pln"> address</span><span class="pun">);</span><span class="pln">                   </span><i class="conum" data-value="3"></i><b><span class="pun">(</span><span class="lit">3</span><span class="pun">)</span></b><span class="pln">

    </span><span class="typ">Stream</span><span class="pun">&lt;</span><span class="typ">Person</span><span class="pun">&gt;</span><span class="pln"> findAllBy</span><span class="pun">();</span><span class="pln">                                        </span><i class="conum" data-value="4"></i><b><span class="pun">(</span><span class="lit">4</span><span class="pun">)</span></b><span class="pln">
</span><span class="pun">}</span></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>The method shows a query for all people with the given lastname. The
 query will be derived parsing the method name for constraints which can
 be concatenated with <code>And</code> and <code>Or</code>. Thus the method name will result in a query expression of <code>{"lastname" : lastname}</code>.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Applies pagination to a query. Just equip your method signature with a <code>Pageable</code> parameter and let the method return a <code>Page</code> instance and we will automatically page the query accordingly.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Shows that you can query based on properties which are not a primitive type.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Uses a Java 8 <code>Stream</code> which reads and converts individual elements while iterating the stream.</td>
</tr>
</tbody></table>
</div>
</div>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
Note that for version 1.0 we currently don’t support referring to parameters that are mapped as <code>DBRef</code> in the domain class.
</td>
</tr>
</tbody></table>
</div>
<table class="tableblock frame-all grid-all spread">
<caption class="title">Table 4. Supported keywords for query methods</caption>
<colgroup>
<col style="width: 16%;">
<col style="width: 33%;">
<col style="width: 50%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">Keyword</th>
<th class="tableblock halign-left valign-top">Sample</th>
<th class="tableblock halign-left valign-top">Logical result</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>After</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>findByBirthdateAfter(Date date)</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>{"birthdate" : {"$gt" : date}}</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>GreaterThan</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>findByAgeGreaterThan(int age)</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>{"age" : {"$gt" : age}}</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>GreaterThanEqual</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>findByAgeGreaterThanEqual(int age)</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>{"age" : {"$gte" : age}}</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Before</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>findByBirthdateBefore(Date date)</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>{"birthdate" : {"$lt" : date}}</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>LessThan</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>findByAgeLessThan(int age)</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>{"age" : {"$lt" : age}}</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>LessThanEqual</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>findByAgeLessThanEqual(int age)</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>{"age" : {"$lte" : age}}</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Between</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>findByAgeBetween(int from, int to)</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>{"age" : {"$gt" : from, "$lt" : to}}</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>In</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>findByAgeIn(Collection ages)</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>{"age" : {"$in" : [ages…​]}}</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>NotIn</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>findByAgeNotIn(Collection ages)</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>{"age" : {"$nin" : [ages…​]}}</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>IsNotNull, NotNull</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>findByFirstnameNotNull()</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>{"firstname" : {"$ne" : null}}</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>IsNull, Null</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>findByFirstnameNull()</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>{"firstname" : null}</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Like</code>, <code>StartingWith</code>, <code>EndingWith</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>findByFirstnameLike(String name)</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>{"firstname" : name} ( name as regex)</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Containing</code> on String</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>findByFirstnameContaining(String name)</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>{"firstname" : name} (name as regex)</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Containing</code> on Collection</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>findByAddressesContaining(Address address)</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>{"addresses" : { "$in" : address}}</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Regex</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>findByFirstnameRegex(String firstname)</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>{"firstname" : {"$regex" : firstname }}</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>(No keyword)</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>findByFirstname(String name)</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>{"firstname" : name}</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Not</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>findByFirstnameNot(String name)</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>{"firstname" : {"$ne" : name}}</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Near</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>findByLocationNear(Point point)</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>{"location" : {"$near" : [x,y]}}</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Near</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>findByLocationNear(Point point, Distance max)</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>{"location" : {"$near" : [x,y], "$maxDistance" : max}}</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Near</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>findByLocationNear(Point point, Distance min, Distance max)</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>{"location" : {"$near" : [x,y], "$minDistance" : min, "$maxDistance" : max}}</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Within</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>findByLocationWithin(Circle circle)</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>{"location" : {"$geoWithin" : {"$center" : [ [x, y], distance]}}}</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Within</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>findByLocationWithin(Box box)</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>{"location" : {"$geoWithin" : {"$box" : [ [x1, y1], x2, y2]}}}</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>IsTrue, True</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>findByActiveIsTrue()</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>{"active" : true}</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>IsFalse, False</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>findByActiveIsFalse()</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>{"active" : false}</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Exists</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>findByLocationExists(boolean exists)</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>{"location" : {"$exists" : exists }}</code></p></td>
</tr>
</tbody>
</table>
<div class="sect3">
<h4 id="mongodb.repositories.queries.delete"><a class="anchor" href="#mongodb.repositories.queries.delete"></a>9.3.1. Repository delete queries</h4>
<div class="paragraph">
<p>The above keywords can be used in conjunciton with <code>delete…By</code> or <code>remove…By</code> to create queries deleting matching documents.</p>
</div>
<div class="exampleblock">
<div class="title">Example 60. <code>Delete…By</code> Query</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">interface</span><span class="pln"> </span><span class="typ">PersonRepository</span><span class="pln"> </span><span class="kwd">extends</span><span class="pln"> </span><span class="typ">MongoRepository</span><span class="pun">&lt;</span><span class="typ">Person</span><span class="pun">,</span><span class="pln"> </span><span class="typ">String</span><span class="pun">&gt;</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

  </span><span class="typ">List</span><span class="pln"> </span><span class="pun">&lt;</span><span class="typ">Person</span><span class="pun">&gt;</span><span class="pln"> deleteByLastname</span><span class="pun">(</span><span class="typ">String</span><span class="pln"> lastname</span><span class="pun">);</span><span class="pln">

  </span><span class="typ">Long</span><span class="pln"> deletePersonByLastname</span><span class="pun">(</span><span class="typ">String</span><span class="pln"> lastname</span><span class="pun">);</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>Using return type <code>List</code> will retrieve and return all 
matching documents before actually deleting them. A numeric return type 
directly removes the matching documents returning the total number of 
documents removed.</p>
</div>
</div>
<div class="sect3">
<h4 id="mongodb.repositories.queries.geo-spatial"><a class="anchor" href="#mongodb.repositories.queries.geo-spatial"></a>9.3.2. Geo-spatial repository queries</h4>
<div class="paragraph">
<p>As you’ve just seen there are a few keywords triggering geo-spatial operations within a MongoDB query. The <code>Near</code> keyword allows some further modification. Let’s have look at some examples:</p>
</div>
<div class="exampleblock">
<div class="title">Example 61. Advanced <code>Near</code> queries</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">interface</span><span class="pln"> </span><span class="typ">PersonRepository</span><span class="pln"> </span><span class="kwd">extends</span><span class="pln"> </span><span class="typ">MongoRepository</span><span class="pun">&lt;</span><span class="typ">Person</span><span class="pun">,</span><span class="pln"> </span><span class="typ">String</span><span class="pun">&gt;</span><span class="pln">

  </span><span class="com">// { 'location' : { '$near' : [point.x, point.y], '$maxDistance' : distance}}</span><span class="pln">
  </span><span class="typ">List</span><span class="pun">&lt;</span><span class="typ">Person</span><span class="pun">&gt;</span><span class="pln"> findByLocationNear</span><span class="pun">(</span><span class="typ">Point</span><span class="pln"> location</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Distance</span><span class="pln"> distance</span><span class="pun">);</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>Adding a <code>Distance</code> parameter to the query method allows restricting results to those within the given distance. If the <code>Distance</code> was set up containing a <code>Metric</code> we will transparently use <code>$nearSphere</code> instead of $code.</p>
</div>
<div class="exampleblock">
<div class="title">Example 62. Using <code>Distance</code> with <code>Metrics</code></div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="typ">Point</span><span class="pln"> point </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Point</span><span class="pun">(</span><span class="lit">43.7</span><span class="pun">,</span><span class="pln"> </span><span class="lit">48.8</span><span class="pun">);</span><span class="pln">
</span><span class="typ">Distance</span><span class="pln"> distance </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Distance</span><span class="pun">(</span><span class="lit">200</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Metrics</span><span class="pun">.</span><span class="pln">KILOMETERS</span><span class="pun">);</span><span class="pln">
</span><span class="pun">…</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> repository</span><span class="pun">.</span><span class="pln">findByLocationNear</span><span class="pun">(</span><span class="pln">point</span><span class="pun">,</span><span class="pln"> distance</span><span class="pun">);</span><span class="pln">
</span><span class="com">// {'location' : {'$nearSphere' : [43.7, 48.8], '$maxDistance' : 0.03135711885774796}}</span></code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>As you can see using a <code>Distance</code> equipped with a <code>Metric</code> causes <code>$nearSphere</code> clause to be added instead of a plain <code>$near</code>. Beyond that the actual distance gets calculated according to the <code>Metrics</code> used.</p>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
Using <code>@GeoSpatialIndexed(type = GeoSpatialIndexType.GEO_2DSPHERE)</code> on the target property forces usage of <code>$nearSphere</code> operator.
</td>
</tr>
</tbody></table>
</div>
<div class="sect4">
<h5 id="_geo_near_queries"><a class="anchor" href="#_geo_near_queries"></a>Geo-near queries</h5>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">interface</span><span class="pln"> </span><span class="typ">PersonRepository</span><span class="pln"> </span><span class="kwd">extends</span><span class="pln"> </span><span class="typ">MongoRepository</span><span class="pun">&lt;</span><span class="typ">Person</span><span class="pun">,</span><span class="pln"> </span><span class="typ">String</span><span class="pun">&gt;</span><span class="pln">

  </span><span class="com">// {'geoNear' : 'location', 'near' : [x, y] }</span><span class="pln">
  </span><span class="typ">GeoResults</span><span class="pun">&lt;</span><span class="typ">Person</span><span class="pun">&gt;</span><span class="pln"> findByLocationNear</span><span class="pun">(</span><span class="typ">Point</span><span class="pln"> location</span><span class="pun">);</span><span class="pln">

  </span><span class="com">// No metric: {'geoNear' : 'person', 'near' : [x, y], maxDistance : distance }</span><span class="pln">
  </span><span class="com">// Metric: {'geoNear' : 'person', 'near' : [x, y], 'maxDistance' : distance,</span><span class="pln">
  </span><span class="com">//          'distanceMultiplier' : metric.multiplier, 'spherical' : true }</span><span class="pln">
  </span><span class="typ">GeoResults</span><span class="pun">&lt;</span><span class="typ">Person</span><span class="pun">&gt;</span><span class="pln"> findByLocationNear</span><span class="pun">(</span><span class="typ">Point</span><span class="pln"> location</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Distance</span><span class="pln"> distance</span><span class="pun">);</span><span class="pln">

  </span><span class="com">// Metric: {'geoNear' : 'person', 'near' : [x, y], 'minDistance' : min,</span><span class="pln">
  </span><span class="com">//          'maxDistance' : max, 'distanceMultiplier' : metric.multiplier,</span><span class="pln">
  </span><span class="com">//          'spherical' : true }</span><span class="pln">
  </span><span class="typ">GeoResults</span><span class="pun">&lt;</span><span class="typ">Person</span><span class="pun">&gt;</span><span class="pln"> findByLocationNear</span><span class="pun">(</span><span class="typ">Point</span><span class="pln"> location</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Distance</span><span class="pln"> min</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Distance</span><span class="pln"> max</span><span class="pun">);</span><span class="pln">

  </span><span class="com">// {'geoNear' : 'location', 'near' : [x, y] }</span><span class="pln">
  </span><span class="typ">GeoResults</span><span class="pun">&lt;</span><span class="typ">Person</span><span class="pun">&gt;</span><span class="pln"> findByLocationNear</span><span class="pun">(</span><span class="typ">Point</span><span class="pln"> location</span><span class="pun">);</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="mongodb.repositories.queries.json-based"><a class="anchor" href="#mongodb.repositories.queries.json-based"></a>9.3.3. MongoDB JSON based query methods and field restriction</h4>
<div class="paragraph">
<p>By adding the annotation <code>org.springframework.data.mongodb.repository.Query</code>
 repository finder methods you can specify a MongoDB JSON query string 
to use instead of having the query derived from the method name. For 
example</p>
</div>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">interface</span><span class="pln"> </span><span class="typ">PersonRepository</span><span class="pln"> </span><span class="kwd">extends</span><span class="pln"> </span><span class="typ">MongoRepository</span><span class="pun">&lt;</span><span class="typ">Person</span><span class="pun">,</span><span class="pln"> </span><span class="typ">String</span><span class="pun">&gt;</span><span class="pln">

  </span><span class="lit">@Query</span><span class="pun">(</span><span class="str">"{ 'firstname' : ?0 }"</span><span class="pun">)</span><span class="pln">
  </span><span class="typ">List</span><span class="pun">&lt;</span><span class="typ">Person</span><span class="pun">&gt;</span><span class="pln"> findByThePersonsFirstname</span><span class="pun">(</span><span class="typ">String</span><span class="pln"> firstname</span><span class="pun">);</span><span class="pln">

</span><span class="pun">}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>The placeholder ?0 lets you substitute the value from the method arguments into the JSON query string.</p>
</div>
<div class="paragraph">
<p>You can also use the filter property to restrict the set of properties that will be mapped into the Java object. For example,</p>
</div>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">interface</span><span class="pln"> </span><span class="typ">PersonRepository</span><span class="pln"> </span><span class="kwd">extends</span><span class="pln"> </span><span class="typ">MongoRepository</span><span class="pun">&lt;</span><span class="typ">Person</span><span class="pun">,</span><span class="pln"> </span><span class="typ">String</span><span class="pun">&gt;</span><span class="pln">

  </span><span class="lit">@Query</span><span class="pun">(</span><span class="pln">value</span><span class="pun">=</span><span class="str">"{ 'firstname' : ?0 }"</span><span class="pun">,</span><span class="pln"> fields</span><span class="pun">=</span><span class="str">"{ 'firstname' : 1, 'lastname' : 1}"</span><span class="pun">)</span><span class="pln">
  </span><span class="typ">List</span><span class="pun">&lt;</span><span class="typ">Person</span><span class="pun">&gt;</span><span class="pln"> findByThePersonsFirstname</span><span class="pun">(</span><span class="typ">String</span><span class="pln"> firstname</span><span class="pun">);</span><span class="pln">

</span><span class="pun">}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>This will return only the firstname, lastname and Id properties of 
the Person objects. The age property, a java.lang.Integer, will not be 
set and its value will therefore be null.</p>
</div>
</div>
<div class="sect3">
<h4 id="mongodb.repositories.queries.type-safe"><a class="anchor" href="#mongodb.repositories.queries.type-safe"></a>9.3.4. Type-safe Query methods</h4>
<div class="paragraph">
<p>MongoDB repository support integrates with the <a href="http://www.querydsl.com/">QueryDSL</a>
 project which provides a means to perform type-safe queries in Java. To
 quote from the project description, "Instead of writing queries as 
inline strings or externalizing them into XML files they are constructed
 via a fluent API." It provides the following features</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Code completion in IDE (all properties, methods and operations can be expanded in your favorite Java IDE)</p>
</li>
<li>
<p>Almost no syntactically invalid queries allowed (type-safe on all levels)</p>
</li>
<li>
<p>Domain types and properties can be referenced safely (no Strings involved!)</p>
</li>
<li>
<p>Adopts better to refactoring changes in domain types</p>
</li>
<li>
<p>Incremental query definition is easier</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Please refer to the QueryDSL documentation which describes how to bootstrap your environment for APT based code generation <a href="http://source.mysema.com/static/querydsl/2.1.2/reference/html/ch02.html#d0e112">using Maven</a> or <a href="http://source.mysema.com/static/querydsl/2.1.2/reference/html/ch02.html#d0e131">using Ant</a>.</p>
</div>
<div class="paragraph">
<p>Using QueryDSL you will be able to write queries as shown below</p>
</div>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="typ">QPerson</span><span class="pln"> person </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">QPerson</span><span class="pun">(</span><span class="str">"person"</span><span class="pun">);</span><span class="pln">
</span><span class="typ">List</span><span class="pun">&lt;</span><span class="typ">Person</span><span class="pun">&gt;</span><span class="pln"> result </span><span class="pun">=</span><span class="pln"> repository</span><span class="pun">.</span><span class="pln">findAll</span><span class="pun">(</span><span class="pln">person</span><span class="pun">.</span><span class="pln">address</span><span class="pun">.</span><span class="pln">zipCode</span><span class="pun">.</span><span class="pln">eq</span><span class="pun">(</span><span class="str">"C0123"</span><span class="pun">));</span><span class="pln">

</span><span class="typ">Page</span><span class="pun">&lt;</span><span class="typ">Person</span><span class="pun">&gt;</span><span class="pln"> page </span><span class="pun">=</span><span class="pln"> repository</span><span class="pun">.</span><span class="pln">findAll</span><span class="pun">(</span><span class="pln">person</span><span class="pun">.</span><span class="pln">lastname</span><span class="pun">.</span><span class="pln">contains</span><span class="pun">(</span><span class="str">"a"</span><span class="pun">),</span><span class="pln">
                                       </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">PageRequest</span><span class="pun">(</span><span class="lit">0</span><span class="pun">,</span><span class="pln"> </span><span class="lit">2</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Direction</span><span class="pun">.</span><span class="pln">ASC</span><span class="pun">,</span><span class="pln"> </span><span class="str">"lastname"</span><span class="pun">));</span></code></pre>
</div>
</div>
<div class="paragraph">
<p><code>QPerson</code> is a class that is generated (via the Java annotation post processing tool) which is a <code>Predicate</code> that allows you to write type safe queries. Notice that there are no strings in the query other than the value "C0123".</p>
</div>
<div class="paragraph">
<p>You can use the generated <code>Predicate</code> class via the interface <code>QueryDslPredicateExecutor</code> which is shown below</p>
</div>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">interface</span><span class="pln"> </span><span class="typ">QueryDslPredicateExecutor</span><span class="pun">&lt;</span><span class="pln">T</span><span class="pun">&gt;</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

  T findOne</span><span class="pun">(</span><span class="typ">Predicate</span><span class="pln"> predicate</span><span class="pun">);</span><span class="pln">

  </span><span class="typ">List</span><span class="pun">&lt;</span><span class="pln">T</span><span class="pun">&gt;</span><span class="pln"> findAll</span><span class="pun">(</span><span class="typ">Predicate</span><span class="pln"> predicate</span><span class="pun">);</span><span class="pln">

  </span><span class="typ">List</span><span class="pun">&lt;</span><span class="pln">T</span><span class="pun">&gt;</span><span class="pln"> findAll</span><span class="pun">(</span><span class="typ">Predicate</span><span class="pln"> predicate</span><span class="pun">,</span><span class="pln"> </span><span class="typ">OrderSpecifier</span><span class="pun">&lt;?&gt;...</span><span class="pln"> orders</span><span class="pun">);</span><span class="pln">

  </span><span class="typ">Page</span><span class="pun">&lt;</span><span class="pln">T</span><span class="pun">&gt;</span><span class="pln"> findAll</span><span class="pun">(</span><span class="typ">Predicate</span><span class="pln"> predicate</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Pageable</span><span class="pln"> pageable</span><span class="pun">);</span><span class="pln">

  </span><span class="typ">Long</span><span class="pln"> count</span><span class="pun">(</span><span class="typ">Predicate</span><span class="pln"> predicate</span><span class="pun">);</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>To use this in your repository implementation, simply inherit from it
 in addition to other repository interfaces. This is shown below</p>
</div>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">interface</span><span class="pln"> </span><span class="typ">PersonRepository</span><span class="pln"> </span><span class="kwd">extends</span><span class="pln"> </span><span class="typ">MongoRepository</span><span class="pun">&lt;</span><span class="typ">Person</span><span class="pun">,</span><span class="pln"> </span><span class="typ">String</span><span class="pun">&gt;,</span><span class="pln"> </span><span class="typ">QueryDslPredicateExecutor</span><span class="pun">&lt;</span><span class="typ">Person</span><span class="pun">&gt;</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

   </span><span class="com">// additional finder methods go here</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>We think you will find this an extremely powerful tool for writing MongoDB queries.</p>
</div>
</div>
<div class="sect3">
<h4 id="mongodb.repositories.queries.full-text"><a class="anchor" href="#mongodb.repositories.queries.full-text"></a>9.3.5. Full-text search queries</h4>
<div class="paragraph">
<p>MongoDBs full text search feature is very store specic and therefore can rather be found on <code>MongoRepository</code> than on the more general <code>CrudRepository</code>. What we need is a document with a full-text index defined for (Please see section <a href="#mapping-usage-indexes.text-index">Text Indexes</a> for creating).</p>
</div>
<div class="paragraph">
<p>Additional methods on <code>MongoRepository</code> take <code>TextCriteria</code> as input parameter. In addition to those explicit methods, it is also possible to add a <code>TextCriteria</code> derived repository method. The criteria will added as an additional <code>AND</code> criteria. Once the entity contains a <code>@TextScore</code> annotated property the documents full-text score will be retrieved. Furthermore the <code>@TextScore</code> annotated property will also make it possible to sort by the documents score.</p>
</div>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="lit">@Document</span><span class="pln">
</span><span class="kwd">class</span><span class="pln"> </span><span class="typ">FullTextDocument</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

  </span><span class="lit">@Id</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> id</span><span class="pun">;</span><span class="pln">
  </span><span class="lit">@TextIndexed</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> title</span><span class="pun">;</span><span class="pln">
  </span><span class="lit">@TextIndexed</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> content</span><span class="pun">;</span><span class="pln">
  </span><span class="lit">@TextScore</span><span class="pln"> </span><span class="typ">Float</span><span class="pln"> score</span><span class="pun">;</span><span class="pln">
</span><span class="pun">}</span><span class="pln">

</span><span class="kwd">interface</span><span class="pln"> </span><span class="typ">FullTextRepository</span><span class="pln"> </span><span class="kwd">extends</span><span class="pln"> </span><span class="typ">Repository</span><span class="pun">&lt;</span><span class="typ">FullTextDocument</span><span class="pun">,</span><span class="pln"> </span><span class="typ">String</span><span class="pun">&gt;</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

  </span><span class="com">// Execute a full-text search and define sorting dynamically</span><span class="pln">
  </span><span class="typ">List</span><span class="pun">&lt;</span><span class="typ">FullTextDocument</span><span class="pun">&gt;</span><span class="pln"> findAllBy</span><span class="pun">(</span><span class="typ">TextCriteria</span><span class="pln"> criteria</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Sort</span><span class="pln"> sort</span><span class="pun">);</span><span class="pln">

  </span><span class="com">// Paginate over a full-text search result</span><span class="pln">
  </span><span class="typ">Page</span><span class="pun">&lt;</span><span class="typ">FullTextDocument</span><span class="pun">&gt;</span><span class="pln"> findAllBy</span><span class="pun">(</span><span class="typ">TextCriteria</span><span class="pln"> criteria</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Pageable</span><span class="pln"> pageable</span><span class="pun">);</span><span class="pln">

  </span><span class="com">// Combine a derived query with a full-text search</span><span class="pln">
  </span><span class="typ">List</span><span class="pun">&lt;</span><span class="typ">FullTextDocument</span><span class="pun">&gt;</span><span class="pln"> findByTitleOrderByScoreDesc</span><span class="pun">(</span><span class="typ">String</span><span class="pln"> title</span><span class="pun">,</span><span class="pln"> </span><span class="typ">TextCriteria</span><span class="pln"> criteria</span><span class="pun">);</span><span class="pln">
</span><span class="pun">}</span><span class="pln">


</span><span class="typ">Sort</span><span class="pln"> sort </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Sort</span><span class="pun">(</span><span class="str">"score"</span><span class="pun">);</span><span class="pln">
</span><span class="typ">TextCriteria</span><span class="pln"> criteria </span><span class="pun">=</span><span class="pln"> </span><span class="typ">TextCriteria</span><span class="pun">.</span><span class="pln">forDefaultLanguage</span><span class="pun">().</span><span class="pln">matchingAny</span><span class="pun">(</span><span class="str">"spring"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"data"</span><span class="pun">);</span><span class="pln">
</span><span class="typ">List</span><span class="pun">&lt;</span><span class="typ">FullTextDocument</span><span class="pun">&gt;</span><span class="pln"> result </span><span class="pun">=</span><span class="pln"> repository</span><span class="pun">.</span><span class="pln">findAllBy</span><span class="pun">(</span><span class="pln">criteria</span><span class="pun">,</span><span class="pln"> sort</span><span class="pun">);</span><span class="pln">

criteria </span><span class="pun">=</span><span class="pln"> </span><span class="typ">TextCriteria</span><span class="pun">.</span><span class="pln">forDefaultLanguage</span><span class="pun">().</span><span class="pln">matching</span><span class="pun">(</span><span class="str">"film"</span><span class="pun">);</span><span class="pln">
</span><span class="typ">Page</span><span class="pun">&lt;</span><span class="typ">FullTextDocument</span><span class="pun">&gt;</span><span class="pln"> page </span><span class="pun">=</span><span class="pln"> repository</span><span class="pun">.</span><span class="pln">findAllBy</span><span class="pun">(</span><span class="pln">criteria</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">PageRequest</span><span class="pun">(</span><span class="lit">1</span><span class="pun">,</span><span class="pln"> </span><span class="lit">1</span><span class="pun">,</span><span class="pln"> sort</span><span class="pun">));</span><span class="pln">
</span><span class="typ">List</span><span class="pun">&lt;</span><span class="typ">FullTextDocument</span><span class="pun">&gt;</span><span class="pln"> result </span><span class="pun">=</span><span class="pln"> repository</span><span class="pun">.</span><span class="pln">findByTitleOrderByScoreDesc</span><span class="pun">(</span><span class="str">"mongodb"</span><span class="pun">,</span><span class="pln"> criteria</span><span class="pun">);</span></code></pre>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="mongodb.repositories.misc"><a class="anchor" href="#mongodb.repositories.misc"></a>9.4. Miscellaneous</h3>
<div class="sect3">
<h4 id="mongodb.repositories.misc.cdi-integration"><a class="anchor" href="#mongodb.repositories.misc.cdi-integration"></a>9.4.1. CDI Integration</h4>
<div class="paragraph">
<p>Instances of the repository interfaces are usually created by a 
container, which Spring is the most natural choice when working with 
Spring Data. As of version 1.3.0 Spring Data MongoDB ships with a custom
 CDI extension that allows using the repository abstraction in CDI 
environments. The extension is part of the JAR so all you need to do to 
activate it is dropping the Spring Data MongoDB JAR into your classpath.
 You can now set up the infrastructure by implementing a CDI Producer 
for the <code>MongoTemplate</code>:</p>
</div>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="kwd">class</span><span class="pln"> </span><span class="typ">MongoTemplateProducer</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

    </span><span class="lit">@Produces</span><span class="pln">
    </span><span class="lit">@ApplicationScoped</span><span class="pln">
    </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">MongoOperations</span><span class="pln"> createMongoTemplate</span><span class="pun">()</span><span class="pln"> </span><span class="kwd">throws</span><span class="pln"> </span><span class="typ">UnknownHostException</span><span class="pun">,</span><span class="pln"> </span><span class="typ">MongoException</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

        </span><span class="typ">MongoDbFactory</span><span class="pln"> factory </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">SimpleMongoDbFactory</span><span class="pun">(</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Mongo</span><span class="pun">(),</span><span class="pln"> </span><span class="str">"database"</span><span class="pun">);</span><span class="pln">
        </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">MongoTemplate</span><span class="pun">(</span><span class="pln">factory</span><span class="pun">);</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>The Spring Data MongoDB CDI extension will pick up the <code>MongoTemplate</code>
 available as CDI bean and create a proxy for a Spring Data repository 
whenever an bean of a repository type is requested by the container. 
Thus obtaining an instance of a Spring Data repository is a matter of 
declaring an <code>@Inject</code>-ed property:</p>
</div>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="kwd">class</span><span class="pln"> </span><span class="typ">RepositoryClient</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

  </span><span class="lit">@Inject</span><span class="pln">
  </span><span class="typ">PersonRepository</span><span class="pln"> repository</span><span class="pun">;</span><span class="pln">

  </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> businessMethod</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="typ">List</span><span class="pun">&lt;</span><span class="typ">Person</span><span class="pun">&gt;</span><span class="pln"> people </span><span class="pun">=</span><span class="pln"> repository</span><span class="pun">.</span><span class="pln">findAll</span><span class="pun">();</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="auditing"><a class="anchor" href="#auditing"></a>10. Auditing</h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="auditing.basics"><a class="anchor" href="#auditing.basics"></a>10.1. Basics</h3>
<div class="paragraph">
<p>Spring Data provides sophisticated support to transparently keep 
track of who created or changed an entity and the point in time this 
happened. To benefit from that functionality you have to equip your 
entity classes with auditing metadata that can be defined either using 
annotations or by implementing an interface.</p>
</div>
<div class="sect3">
<h4 id="auditing.annotations"><a class="anchor" href="#auditing.annotations"></a>10.1.1. Annotation based auditing metadata</h4>
<div class="paragraph">
<p>We provide <code>@CreatedBy</code>, <code>@LastModifiedBy</code> to capture the user who created or modified the entity as well as <code>@CreatedDate</code> and <code>@LastModifiedDate</code> to capture the point in time this happened.</p>
</div>
<div class="exampleblock">
<div class="title">Example 63. An audited entity</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="kwd">class</span><span class="pln"> </span><span class="typ">Customer</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

  </span><span class="lit">@CreatedBy</span><span class="pln">
  </span><span class="kwd">private</span><span class="pln"> </span><span class="typ">User</span><span class="pln"> user</span><span class="pun">;</span><span class="pln">

  </span><span class="lit">@CreatedDate</span><span class="pln">
  </span><span class="kwd">private</span><span class="pln"> </span><span class="typ">DateTime</span><span class="pln"> createdDate</span><span class="pun">;</span><span class="pln">

  </span><span class="com">// … further properties omitted</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>As you can see, the annotations can be applied selectively, depending
 on which information you’d like to capture. For the annotations 
capturing the points in time can be used on properties of type JodaTimes
 <code>DateTime</code>, legacy Java <code>Date</code> and <code>Calendar</code>, JDK8 date/time types as well as <code>long</code>/<code>Long</code>.</p>
</div>
</div>
<div class="sect3">
<h4 id="auditing.interfaces"><a class="anchor" href="#auditing.interfaces"></a>10.1.2. Interface-based auditing metadata</h4>
<div class="paragraph">
<p>In case you don’t want to use annotations to define auditing metadata you can let your domain class implement the <code>Auditable</code> interface. It exposes setter methods for all of the auditing properties.</p>
</div>
<div class="paragraph">
<p>There’s also a convenience base class <code>AbstractAuditable</code> 
which you can extend to avoid the need to manually implement the 
interface methods. Be aware that this increases the coupling of your 
domain classes to Spring Data which might be something you want to 
avoid. Usually the annotation based way of defining auditing metadata is
 preferred as it is less invasive and more flexible.</p>
</div>
</div>
<div class="sect3">
<h4 id="auditing.auditor-aware"><a class="anchor" href="#auditing.auditor-aware"></a>10.1.3. AuditorAware</h4>
<div class="paragraph">
<p>In case you use either <code>@CreatedBy</code> or <code>@LastModifiedBy</code>, the auditing infrastructure somehow needs to become aware of the current principal. To do so, we provide an <code>AuditorAware&lt;T&gt;</code>
 SPI interface that you have to implement to tell the infrastructure who
 the current user or system interacting with the application is. The 
generic type <code>T</code> defines of what type the properties annotated with <code>@CreatedBy</code> or <code>@LastModifiedBy</code> have to be.</p>
</div>
<div class="paragraph">
<p>Here’s an example implementation of the interface using Spring Security’s <code>Authentication</code> object:</p>
</div>
<div class="exampleblock">
<div class="title">Example 64. Implementation of AuditorAware based on Spring Security</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="kwd">class</span><span class="pln"> </span><span class="typ">SpringSecurityAuditorAware</span><span class="pln"> </span><span class="kwd">implements</span><span class="pln"> </span><span class="typ">AuditorAware</span><span class="pun">&lt;</span><span class="typ">User</span><span class="pun">&gt;</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

  </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">User</span><span class="pln"> getCurrentAuditor</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

    </span><span class="typ">Authentication</span><span class="pln"> authentication </span><span class="pun">=</span><span class="pln"> </span><span class="typ">SecurityContextHolder</span><span class="pun">.</span><span class="pln">getContext</span><span class="pun">().</span><span class="pln">getAuthentication</span><span class="pun">();</span><span class="pln">

    </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">authentication </span><span class="pun">==</span><span class="pln"> </span><span class="kwd">null</span><span class="pln"> </span><span class="pun">||</span><span class="pln"> </span><span class="pun">!</span><span class="pln">authentication</span><span class="pun">.</span><span class="pln">isAuthenticated</span><span class="pun">())</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
      </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">;</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">

    </span><span class="kwd">return</span><span class="pln"> </span><span class="pun">((</span><span class="typ">MyUserDetails</span><span class="pun">)</span><span class="pln"> authentication</span><span class="pun">.</span><span class="pln">getPrincipal</span><span class="pun">()).</span><span class="pln">getUser</span><span class="pun">();</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>The implementation is accessing the <code>Authentication</code> object provided by Spring Security and looks up the custom <code>UserDetails</code> instance from it that you have created in your <code>UserDetailsService</code> implementation. We’re assuming here that you are exposing the domain user through that <code>UserDetails</code> implementation but you could also look it up from anywhere based on the <code>Authentication</code> found.</p>
</div>
</div>
</div>
<div class="sect2">
<h3 id="mongo.auditing"><a class="anchor" href="#mongo.auditing"></a>10.2. General auditing configuration</h3>
<div class="paragraph">
<p>Activating auditing functionality is just a matter of adding the Spring Data Mongo <code>auditing</code> namespace element to your configuration:</p>
</div>
<div class="exampleblock">
<div class="title">Example 65. Activating auditing using XML configuration</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-xml" data-lang="xml"><span class="tag">&lt;mongo:auditing</span><span class="pln"> </span><span class="atn">mapping-context-ref</span><span class="pun">=</span><span class="atv">"customMappingContext"</span><span class="pln"> </span><span class="atn">auditor-aware-ref</span><span class="pun">=</span><span class="atv">"yourAuditorAwareImpl"</span><span class="tag">/&gt;</span></code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>Since Spring Data MongoDB 1.4 auditing can be enabled by annotating a configuration class with the <code>@EnableMongoAuditing</code> annotation.</p>
</div>
<div class="exampleblock">
<div class="title">Example 66. Activating auditing using JavaConfig</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="lit">@Configuration</span><span class="pln">
</span><span class="lit">@EnableMongoAuditing</span><span class="pln">
</span><span class="kwd">class</span><span class="pln"> </span><span class="typ">Config</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

  </span><span class="lit">@Bean</span><span class="pln">
  </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">AuditorAware</span><span class="pun">&lt;</span><span class="typ">AuditableUser</span><span class="pun">&gt;</span><span class="pln"> myAuditorProvider</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
      </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">AuditorAwareImpl</span><span class="pun">();</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>If you expose a bean of type <code>AuditorAware</code> to the <code>ApplicationContext</code>,
 the auditing infrastructure will pick it up automatically and use it to
 determine the current user to be set on domain types. If you have 
multiple implementations registered in the <code>ApplicationContext</code>, you can select the one to be used by explicitly setting the <code>auditorAwareRef</code> attribute of <code>@EnableJpaAuditing</code>.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="mapping-chapter"><a class="anchor" href="#mapping-chapter"></a>11. Mapping</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Rich mapping support is provided by the <code>MongoMappingConverter</code>. <code>MongoMappingConverter</code>
 has a rich metadata model that provides a full feature set of 
functionality to map domain objects to MongoDB documents.The mapping 
metadata model is populated using annotations on your domain objects. 
However, the infrastructure is not limited to using annotations as the 
only source of metadata information. The <code>MongoMappingConverter</code> also allows you to map objects to documents without providing any additional metadata, by following a set of conventions.</p>
</div>
<div class="paragraph">
<p>In this section we will describe the features of the <code>MongoMappingConverter</code>.
 How to use conventions for mapping objects to documents and how to 
override those conventions with annotation based mapping metadata.</p>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<code>SimpleMongoConverter</code> has been deprecated in Spring Data MongoDB M3 as all of its functionality has been subsumed into <code>MappingMongoConverter</code>.
</td>
</tr>
</tbody></table>
</div>
<div class="sect2">
<h3 id="mapping-conventions"><a class="anchor" href="#mapping-conventions"></a>11.1. Convention based Mapping</h3>
<div class="paragraph">
<p><code>MongoMappingConverter</code> has a few conventions for mapping objects to documents when no additional mapping metadata is provided. The conventions are:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>The short Java class name is mapped to the collection name in the 
following manner. The class ‘com.bigbank.SavingsAccount’ maps to 
‘savingsAccount’ collection name.</p>
</li>
<li>
<p>All nested objects are stored as nested objects in the document and <strong>not</strong> as DBRefs</p>
</li>
<li>
<p>The converter will use any Spring Converters registered with it to 
override the default mapping of object properties to document 
field/values.</p>
</li>
<li>
<p>The fields of an object are used to convert to and from fields in the document. Public JavaBean properties are not used.</p>
</li>
<li>
<p>You can have a single non-zero argument constructor whose constructor
 argument names match top level field names of document, that 
constructor will be used. Otherwise the zero arg constructor will be 
used. if there is more than one non-zero argument constructor an 
exception will be thrown.</p>
</li>
</ul>
</div>
<div class="sect3">
<h4 id="mapping.conventions.id-field"><a class="anchor" href="#mapping.conventions.id-field"></a>11.1.1. How the '_id' field is handled in the mapping layer</h4>
<div class="paragraph">
<p>MongoDB requires that you have an '_id' field for all documents. If 
you don’t provide one the driver will assign a ObjectId with a generated
 value. The "_id" field can be of any type the, other than arrays, so 
long as it is unique. The driver naturally supports all primitive types 
and Dates. When using the <code>MongoMappingConverter</code> there are certain rules that govern how properties from the Java class is mapped to this '_id' field.</p>
</div>
<div class="paragraph">
<p>The following outlines what field will be mapped to the '_id' document field:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>A field annotated with <code>@Id</code> (<code>org.springframework.data.annotation.Id</code>) will be mapped to the '_id' field.</p>
</li>
<li>
<p>A field without an annotation but named 'id' will be mapped to the '_id' field.</p>
</li>
<li>
<p>The default field name for identifiers is '_id' and can be customized via the <code>@Field</code> annotation.</p>
</li>
</ul>
</div>
<table class="tableblock frame-all grid-all spread">
<caption class="title">Table 5. Examples for the translation of '_id'-field definitions</caption>
<colgroup>
<col style="width: 33%;">
<col style="width: 66%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">Field definition</th>
<th class="tableblock halign-left valign-top">Resulting Id-Fieldname in MongoDB</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>String</code> id</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>_id</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>@Field</code> <code>String</code> id</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>_id</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>@Field('x')</code> <code>String</code> id</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>x</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>@Id</code> <code>String</code> x</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>_id</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>@Field('x')</code> <code>@Id</code> <code>String</code> x</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>_id</code></p></td>
</tr>
</tbody>
</table>
<div class="paragraph">
<p>The following outlines what type conversion, if any, will be done on the property mapped to the _id document field.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>If a field named 'id' is declared as a String or BigInteger in the 
Java class it will be converted to and stored as an ObjectId if 
possible. ObjectId as a field type is also valid. If you specify a value
 for 'id' in your application, the conversion to an ObjectId is detected
 to the MongoDBdriver. If the specified 'id' value cannot be converted 
to an ObjectId, then the value will be stored as is in the document’s 
_id field.</p>
</li>
<li>
<p>If a field named ' id' id field is not declared as a String, 
BigInteger, or ObjectID in the Java class then you should assign it a 
value in your application so it can be stored 'as-is' in the document’s 
_id field.</p>
</li>
<li>
<p>If no field named 'id' is present in the Java class then an implicit 
'_id' file will be generated by the driver but not mapped to a property 
or field of the Java class.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>When querying and updating <code>MongoTemplate</code> will use the converter to handle conversions of the <code>Query</code> and <code>Update</code>
 objects that correspond to the above rules for saving documents so 
field names and types used in your queries will be able to match what is
 in your domain classes.</p>
</div>
</div>
</div>
<div class="sect2">
<h3 id="mapping-configuration"><a class="anchor" href="#mapping-configuration"></a>11.2. Mapping Configuration</h3>
<div class="paragraph">
<p>Unless explicitly configured, an instance of <code>MongoMappingConverter</code> is created by default when creating a <code>MongoTemplate</code>. You can create your own instance of the <code>MappingMongoConverter</code>
 so as to tell it where to scan the classpath at startup your domain 
classes in order to extract metadata and construct indexes. Also, by 
creating your own instance you can register Spring converters to use for
 mapping specific classes to and from the database.</p>
</div>
<div class="paragraph">
<p>You can configure the <code>MongoMappingConverter</code> as well as <code>com.mongodb.Mongo</code> and MongoTemplate either using Java or XML based metadata. Here is an example using Spring’s Java based configuration</p>
</div>
<div class="exampleblock">
<div class="title">Example 67. @Configuration class to configure MongoDB mapping support</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="lit">@Configuration</span><span class="pln">
</span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">GeoSpatialAppConfig</span><span class="pln"> </span><span class="kwd">extends</span><span class="pln"> </span><span class="typ">AbstractMongoConfiguration</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

  </span><span class="lit">@Bean</span><span class="pln">
  </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">Mongo</span><span class="pln"> mongo</span><span class="pun">()</span><span class="pln"> </span><span class="kwd">throws</span><span class="pln"> </span><span class="typ">Exception</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Mongo</span><span class="pun">(</span><span class="str">"localhost"</span><span class="pun">);</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">

  </span><span class="lit">@Override</span><span class="pln">
  </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> getDatabaseName</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> </span><span class="str">"database"</span><span class="pun">;</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">

  </span><span class="lit">@Override</span><span class="pln">
  </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> getMappingBasePackage</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> </span><span class="str">"com.bigbank.domain"</span><span class="pun">;</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">

  </span><span class="com">// the following are optional</span><span class="pln">


  </span><span class="lit">@Bean</span><span class="pln">
  </span><span class="lit">@Override</span><span class="pln">
  </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">CustomConversions</span><span class="pln"> customConversions</span><span class="pun">()</span><span class="pln"> </span><span class="kwd">throws</span><span class="pln"> </span><span class="typ">Exception</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="typ">List</span><span class="pun">&lt;</span><span class="typ">Converter</span><span class="pun">&lt;?,</span><span class="pln"> </span><span class="pun">?&gt;&gt;</span><span class="pln"> converterList </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">ArrayList</span><span class="pun">&lt;</span><span class="typ">Converter</span><span class="pun">&lt;?,</span><span class="pln"> </span><span class="pun">?&gt;&gt;();</span><span class="pln">
    converterList</span><span class="pun">.</span><span class="pln">add</span><span class="pun">(</span><span class="kwd">new</span><span class="pln"> org</span><span class="pun">.</span><span class="pln">springframework</span><span class="pun">.</span><span class="pln">data</span><span class="pun">.</span><span class="pln">mongodb</span><span class="pun">.</span><span class="pln">test</span><span class="pun">.</span><span class="typ">PersonReadConverter</span><span class="pun">());</span><span class="pln">
    converterList</span><span class="pun">.</span><span class="pln">add</span><span class="pun">(</span><span class="kwd">new</span><span class="pln"> org</span><span class="pun">.</span><span class="pln">springframework</span><span class="pun">.</span><span class="pln">data</span><span class="pun">.</span><span class="pln">mongodb</span><span class="pun">.</span><span class="pln">test</span><span class="pun">.</span><span class="typ">PersonWriteConverter</span><span class="pun">());</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">CustomConversions</span><span class="pun">(</span><span class="pln">converterList</span><span class="pun">);</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">

  </span><span class="lit">@Bean</span><span class="pln">
  </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">LoggingEventListener</span><span class="pun">&lt;</span><span class="typ">MongoMappingEvent</span><span class="pun">&gt;</span><span class="pln"> mappingEventsListener</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">LoggingEventListener</span><span class="pun">&lt;</span><span class="typ">MongoMappingEvent</span><span class="pun">&gt;();</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p><code>AbstractMongoConfiguration</code> requires you to implement methods that define a <code>com.mongodb.Mongo</code> as well as provide a database name. <code>AbstractMongoConfiguration</code>
 also has a method you can override named ‘getMappingBasePackage’ which 
tells the converter where to scan for classes annotated with the <code>@org.springframework.data.mongodb.core.mapping.Document</code> annotation.</p>
</div>
<div class="paragraph">
<p>You can add additional converters to the converter by overriding the 
method afterMappingMongoConverterCreation. Also shown in the above 
example is a <code>LoggingEventListener</code> which logs <code>MongoMappingEvent`s that are posted onto Spring’s `ApplicationContextEvent</code> infrastructure.</p>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
AbstractMongoConfiguration will create a MongoTemplate instance and 
registered with the container under the name 'mongoTemplate'.
</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>You can also override the method <code>UserCredentials getUserCredentials()</code> to provide the username and password information to connect to the database.</p>
</div>
<div class="paragraph">
<p>Spring’s MongoDB namespace enables you to easily enable mapping functionality in XML</p>
</div>
<div class="exampleblock">
<div class="title">Example 68. XML schema to configure MongoDB mapping support</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-xml" data-lang="xml"><span class="pun">&lt;?</span><span class="pln">xml version</span><span class="pun">=</span><span class="str">"1.0"</span><span class="pln"> encoding</span><span class="pun">=</span><span class="str">"UTF-8"</span><span class="pun">?&gt;</span><span class="pln">
</span><span class="tag">&lt;beans</span><span class="pln"> </span><span class="atn">xmlns</span><span class="pun">=</span><span class="atv">"http://www.springframework.org/schema/beans"</span><span class="pln">
  </span><span class="atn">xmlns:xsi</span><span class="pun">=</span><span class="atv">"http://www.w3.org/2001/XMLSchema-instance"</span><span class="pln">
  </span><span class="atn">xmlns:context</span><span class="pun">=</span><span class="atv">"http://www.springframework.org/schema/context"</span><span class="pln">
  </span><span class="atn">xmlns:mongo</span><span class="pun">=</span><span class="atv">"http://www.springframework.org/schema/data/mongo"</span><span class="pln">
  </span><span class="atn">xsi:schemaLocation</span><span class="pun">=</span><span class="atv">"http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
    http://www.springframework.org/schema/data/mongo http://www.springframework.org/schema/data/mongo/spring-mongo-1.0.xsd
    http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd"</span><span class="tag">&gt;</span><span class="pln">

  </span><span class="com">&lt;!-- Default bean name is 'mongo' --&gt;</span><span class="pln">
  </span><span class="tag">&lt;mongo:mongo</span><span class="pln"> </span><span class="atn">host</span><span class="pun">=</span><span class="atv">"localhost"</span><span class="pln"> </span><span class="atn">port</span><span class="pun">=</span><span class="atv">"27017"</span><span class="tag">/&gt;</span><span class="pln">

  </span><span class="tag">&lt;mongo:db-factory</span><span class="pln"> </span><span class="atn">dbname</span><span class="pun">=</span><span class="atv">"database"</span><span class="pln"> </span><span class="atn">mongo-ref</span><span class="pun">=</span><span class="atv">"mongo"</span><span class="tag">/&gt;</span><span class="pln">

  </span><span class="com">&lt;!-- by default look for a Mongo object named 'mongo' - default name used for the converter is 'mappingConverter' --&gt;</span><span class="pln">
  </span><span class="tag">&lt;mongo:mapping-converter</span><span class="pln"> </span><span class="atn">base-package</span><span class="pun">=</span><span class="atv">"com.bigbank.domain"</span><span class="tag">&gt;</span><span class="pln">
    </span><span class="tag">&lt;mongo:custom-converters&gt;</span><span class="pln">
      </span><span class="tag">&lt;mongo:converter</span><span class="pln"> </span><span class="atn">ref</span><span class="pun">=</span><span class="atv">"readConverter"</span><span class="tag">/&gt;</span><span class="pln">
      </span><span class="tag">&lt;mongo:converter&gt;</span><span class="pln">
        </span><span class="tag">&lt;bean</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"org.springframework.data.mongodb.test.PersonWriteConverter"</span><span class="tag">/&gt;</span><span class="pln">
      </span><span class="tag">&lt;/mongo:converter&gt;</span><span class="pln">
    </span><span class="tag">&lt;/mongo:custom-converters&gt;</span><span class="pln">
  </span><span class="tag">&lt;/mongo:mapping-converter&gt;</span><span class="pln">

  </span><span class="tag">&lt;bean</span><span class="pln"> </span><span class="atn">id</span><span class="pun">=</span><span class="atv">"readConverter"</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"org.springframework.data.mongodb.test.PersonReadConverter"</span><span class="tag">/&gt;</span><span class="pln">

  </span><span class="com">&lt;!-- set the mapping converter to be used by the MongoTemplate --&gt;</span><span class="pln">
  </span><span class="tag">&lt;bean</span><span class="pln"> </span><span class="atn">id</span><span class="pun">=</span><span class="atv">"mongoTemplate"</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"org.springframework.data.mongodb.core.MongoTemplate"</span><span class="tag">&gt;</span><span class="pln">
    </span><span class="tag">&lt;constructor-arg</span><span class="pln"> </span><span class="atn">name</span><span class="pun">=</span><span class="atv">"mongoDbFactory"</span><span class="pln"> </span><span class="atn">ref</span><span class="pun">=</span><span class="atv">"mongoDbFactory"</span><span class="tag">/&gt;</span><span class="pln">
    </span><span class="tag">&lt;constructor-arg</span><span class="pln"> </span><span class="atn">name</span><span class="pun">=</span><span class="atv">"mongoConverter"</span><span class="pln"> </span><span class="atn">ref</span><span class="pun">=</span><span class="atv">"mappingConverter"</span><span class="tag">/&gt;</span><span class="pln">
  </span><span class="tag">&lt;/bean&gt;</span><span class="pln">

  </span><span class="tag">&lt;bean</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"org.springframework.data.mongodb.core.mapping.event.LoggingEventListener"</span><span class="tag">/&gt;</span><span class="pln">

</span><span class="tag">&lt;/beans&gt;</span></code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>The <code>base-package</code> property tells it where to scan for classes annotated with the <code>@org.springframework.data.mongodb.core.mapping.Document</code> annotation.</p>
</div>
</div>
<div class="sect2">
<h3 id="mapping-usage"><a class="anchor" href="#mapping-usage"></a>11.3. Metadata based Mapping</h3>
<div class="paragraph">
<p>To take full advantage of the object mapping functionality inside the
 Spring Data/MongoDB support, you should annotate your mapped objects 
with the <code>@org.springframework.data.mongodb.core.mapping.Document</code>
 annotation. Although it is not necessary for the mapping framework to 
have this annotation (your POJOs will be mapped correctly, even without 
any annotations), it allows the classpath scanner to find and 
pre-process your domain objects to extract the necessary metadata. If 
you don’t use this annotation, your application will take a slight 
performance hit the first time you store a domain object because the 
mapping framework needs to build up its internal metadata model so it 
knows about the properties of your domain object and how to persist 
them.</p>
</div>
<div class="exampleblock">
<div class="title">Example 69. Example domain object</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="kwd">package</span><span class="pln"> com</span><span class="pun">.</span><span class="pln">mycompany</span><span class="pun">.</span><span class="pln">domain</span><span class="pun">;</span><span class="pln">

</span><span class="lit">@Document</span><span class="pln">
</span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">Person</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

  </span><span class="lit">@Id</span><span class="pln">
  </span><span class="kwd">private</span><span class="pln"> </span><span class="typ">ObjectId</span><span class="pln"> id</span><span class="pun">;</span><span class="pln">

  </span><span class="lit">@Indexed</span><span class="pln">
  </span><span class="kwd">private</span><span class="pln"> </span><span class="typ">Integer</span><span class="pln"> ssn</span><span class="pun">;</span><span class="pln">

  </span><span class="kwd">private</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> firstName</span><span class="pun">;</span><span class="pln">

  </span><span class="lit">@Indexed</span><span class="pln">
  </span><span class="kwd">private</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> lastName</span><span class="pun">;</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div>
</div>
</div>
</div>
<div class="admonitionblock important">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-important" title="Important"></i>
</td>
<td class="content">
The <code>@Id</code> annotation tells the mapper which property you want to use for the MongoDB <code>_id</code> property and the <code>@Indexed</code> annotation tells the mapping framework to call <code>createIndex(…)</code> on that property of your document, making searches faster.
</td>
</tr>
</tbody></table>
</div>
<div class="admonitionblock important">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-important" title="Important"></i>
</td>
<td class="content">
Automatic index creation is only done for types annotated with <code>@Document</code>.
</td>
</tr>
</tbody></table>
</div>
<div class="sect3">
<h4 id="mapping-usage-annotations"><a class="anchor" href="#mapping-usage-annotations"></a>11.3.1. Mapping annotation overview</h4>
<div class="paragraph">
<p>The MappingMongoConverter can use metadata to drive the mapping of 
objects to documents. An overview of the annotations is provided below</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>@Id</code> - applied at the field level to mark the field used for identiy purpose.</p>
</li>
<li>
<p><code>@Document</code> - applied at the class level to indicate this 
class is a candidate for mapping to the database. You can specify the 
name of the collection where the database will be stored.</p>
</li>
<li>
<p><code>@DBRef</code> - applied at the field to indicate it is to be stored using a com.mongodb.DBRef.</p>
</li>
<li>
<p><code>@Indexed</code> - applied at the field level to describe how to index the field.</p>
</li>
<li>
<p><code>@CompoundIndex</code> - applied at the type level to declare Compound Indexes</p>
</li>
<li>
<p><code>@GeoSpatialIndexed</code> - applied at the field level to describe how to geoindex the field.</p>
</li>
<li>
<p><code>@TextIndexed</code> - applied at the field level to mark the field to be included in the text index.</p>
</li>
<li>
<p><code>@Language</code> - applied at the field level to set the language override property for text index.</p>
</li>
<li>
<p><code>@Transient</code> - by default all private fields are mapped to
 the document, this annotation excludes the field where it is applied 
from being stored in the database</p>
</li>
<li>
<p><code>@PersistenceConstructor</code> - marks a given constructor - 
even a package protected one - to use when instantiating the object from
 the database. Constructor arguments are mapped by name to the key 
values in the retrieved DBObject.</p>
</li>
<li>
<p><code>@Value</code> - this annotation is part of the Spring Framework
 . Within the mapping framework it can be applied to constructor 
arguments. This lets you use a Spring Expression Language statement to 
transform a key’s value retrieved in the database before it is used to 
construct a domain object. In order to reference a property of a given 
document one has to use expressions like: <code>@Value("#root.myProperty")</code> where <code>root</code> refers to the root of the given document.</p>
</li>
<li>
<p><code>@Field</code> - applied at the field level and described the 
name of the field as it will be represented in the MongoDB BSON document
 thus allowing the name to be different than the fieldname of the class.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>The mapping metadata infrastructure is defined in a seperate 
spring-data-commons project that is technology agnostic. Specific 
subclasses are using in the MongoDB support to support annotation based 
metadata. Other strategies are also possible to put in place if there is
 demand.</p>
</div>
<div class="paragraph">
<p>Here is an example of a more complex mapping.</p>
</div>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="lit">@Document</span><span class="pln">
</span><span class="lit">@CompoundIndexes</span><span class="pun">({</span><span class="pln">
    </span><span class="lit">@CompoundIndex</span><span class="pun">(</span><span class="pln">name </span><span class="pun">=</span><span class="pln"> </span><span class="str">"age_idx"</span><span class="pun">,</span><span class="pln"> def </span><span class="pun">=</span><span class="pln"> </span><span class="str">"{'lastName': 1, 'age': -1}"</span><span class="pun">)</span><span class="pln">
</span><span class="pun">})</span><span class="pln">
</span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">Person</span><span class="pun">&lt;</span><span class="pln">T </span><span class="kwd">extends</span><span class="pln"> </span><span class="typ">Address</span><span class="pun">&gt;</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

  </span><span class="lit">@Id</span><span class="pln">
  </span><span class="kwd">private</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> id</span><span class="pun">;</span><span class="pln">

  </span><span class="lit">@Indexed</span><span class="pun">(</span><span class="pln">unique </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">true</span><span class="pun">)</span><span class="pln">
  </span><span class="kwd">private</span><span class="pln"> </span><span class="typ">Integer</span><span class="pln"> ssn</span><span class="pun">;</span><span class="pln">

  </span><span class="lit">@Field</span><span class="pun">(</span><span class="str">"fName"</span><span class="pun">)</span><span class="pln">
  </span><span class="kwd">private</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> firstName</span><span class="pun">;</span><span class="pln">

  </span><span class="lit">@Indexed</span><span class="pln">
  </span><span class="kwd">private</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> lastName</span><span class="pun">;</span><span class="pln">

  </span><span class="kwd">private</span><span class="pln"> </span><span class="typ">Integer</span><span class="pln"> age</span><span class="pun">;</span><span class="pln">

  </span><span class="lit">@Transient</span><span class="pln">
  </span><span class="kwd">private</span><span class="pln"> </span><span class="typ">Integer</span><span class="pln"> accountTotal</span><span class="pun">;</span><span class="pln">

  </span><span class="lit">@DBRef</span><span class="pln">
  </span><span class="kwd">private</span><span class="pln"> </span><span class="typ">List</span><span class="pun">&lt;</span><span class="typ">Account</span><span class="pun">&gt;</span><span class="pln"> accounts</span><span class="pun">;</span><span class="pln">

  </span><span class="kwd">private</span><span class="pln"> T address</span><span class="pun">;</span><span class="pln">


  </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">Person</span><span class="pun">(</span><span class="typ">Integer</span><span class="pln"> ssn</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">ssn </span><span class="pun">=</span><span class="pln"> ssn</span><span class="pun">;</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">

  </span><span class="lit">@PersistenceConstructor</span><span class="pln">
  </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">Person</span><span class="pun">(</span><span class="typ">Integer</span><span class="pln"> ssn</span><span class="pun">,</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> firstName</span><span class="pun">,</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> lastName</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Integer</span><span class="pln"> age</span><span class="pun">,</span><span class="pln"> T address</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">ssn </span><span class="pun">=</span><span class="pln"> ssn</span><span class="pun">;</span><span class="pln">
    </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">firstName </span><span class="pun">=</span><span class="pln"> firstName</span><span class="pun">;</span><span class="pln">
    </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">lastName </span><span class="pun">=</span><span class="pln"> lastName</span><span class="pun">;</span><span class="pln">
    </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">age </span><span class="pun">=</span><span class="pln"> age</span><span class="pun">;</span><span class="pln">
    </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">address </span><span class="pun">=</span><span class="pln"> address</span><span class="pun">;</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">

  </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> getId</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> id</span><span class="pun">;</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">

  </span><span class="com">// no setter for Id.  (getter is only exposed for some unit testing)</span><span class="pln">

  </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">Integer</span><span class="pln"> getSsn</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> ssn</span><span class="pun">;</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">

</span><span class="com">// other getters/setters ommitted</span></code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="mapping-custom-object-construction"><a class="anchor" href="#mapping-custom-object-construction"></a>11.3.2. Customized Object Construction</h4>
<div class="paragraph">
<p>The mapping subsystem allows the customization of the object construction by annotating a constructor with the <code>@PersistenceConstructor</code> annotation. The values to be used for the constructor parameters are resolved in the following way:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>If a parameter is annotated with the <code>@Value</code> annotation, the given expression is evaluated and the result is used as the parameter value.</p>
</li>
<li>
<p>If the Java type has a property whose name matches the given field of
 the input document, then it’s property information is used to select 
the appropriate constructor parameter to pass the input field value to. 
This works only if the parameter name information is present in the java
 <code>.class</code> files which can be achieved by compiling the source with debug information or using the new <code>-parameters</code> command-line switch for javac in Java 8.</p>
</li>
<li>
<p>Otherwise an <code>MappingException</code> will be thrown indicating that the given constructor parameter could not be bound.</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="kwd">class</span><span class="pln"> </span><span class="typ">OrderItem</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

  </span><span class="kwd">private</span><span class="pln"> </span><span class="lit">@Id</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> id</span><span class="pun">;</span><span class="pln">
  </span><span class="kwd">private</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> quantity</span><span class="pun">;</span><span class="pln">
  </span><span class="kwd">private</span><span class="pln"> </span><span class="kwd">double</span><span class="pln"> unitPrice</span><span class="pun">;</span><span class="pln">

  </span><span class="typ">OrderItem</span><span class="pun">(</span><span class="typ">String</span><span class="pln"> id</span><span class="pun">,</span><span class="pln"> </span><span class="lit">@Value</span><span class="pun">(</span><span class="str">"#root.qty ?: 0"</span><span class="pun">)</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> quantity</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">double</span><span class="pln"> unitPrice</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">id </span><span class="pun">=</span><span class="pln"> id</span><span class="pun">;</span><span class="pln">
    </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">quantity </span><span class="pun">=</span><span class="pln"> quantity</span><span class="pun">;</span><span class="pln">
    </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">unitPrice </span><span class="pun">=</span><span class="pln"> unitPrice</span><span class="pun">;</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">

  </span><span class="com">// getters/setters ommitted</span><span class="pln">
</span><span class="pun">}</span><span class="pln">

</span><span class="typ">DBObject</span><span class="pln"> input </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">BasicDBObject</span><span class="pun">(</span><span class="str">"id"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"4711"</span><span class="pun">);</span><span class="pln">
input</span><span class="pun">.</span><span class="pln">put</span><span class="pun">(</span><span class="str">"unitPrice"</span><span class="pun">,</span><span class="pln"> </span><span class="lit">2.5</span><span class="pun">);</span><span class="pln">
input</span><span class="pun">.</span><span class="pln">put</span><span class="pun">(</span><span class="str">"qty"</span><span class="pun">,</span><span class="lit">5</span><span class="pun">);</span><span class="pln">
</span><span class="typ">OrderItem</span><span class="pln"> item </span><span class="pun">=</span><span class="pln"> converter</span><span class="pun">.</span><span class="pln">read</span><span class="pun">(</span><span class="typ">OrderItem</span><span class="pun">.</span><span class="kwd">class</span><span class="pun">,</span><span class="pln"> input</span><span class="pun">);</span></code></pre>
</div>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
The SpEL expression in the <code>@Value</code> annotation of the <code>quantity</code> parameter falls back to the value <code>0</code> if the given property path cannot be resolved.
</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>Additional examples for using the <code>@PersistenceConstructor</code> annotation can be found in the <a href="https://github.com/spring-projects/spring-data-mongodb/blob/master/spring-data-mongodb/src/test/java/org/springframework/data/mongodb/core/convert/MappingMongoConverterUnitTests.java">MappingMongoConverterUnitTests</a> test suite.</p>
</div>
</div>
<div class="sect3">
<h4 id="mapping-usage-indexes.compound-index"><a class="anchor" href="#mapping-usage-indexes.compound-index"></a>11.3.3. Compound Indexes</h4>
<div class="paragraph">
<p>Compound indexes are also supported. They are defined at the class level, rather than on indidividual properties.</p>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
Compound indexes are very important to improve the performance of queries that involve criteria on multiple fields
</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>Here’s an example that creates a compound index of <code>lastName</code> in ascending order and <code>age</code> in descending order:</p>
</div>
<div class="exampleblock">
<div class="title">Example 70. Example Compound Index Usage</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="kwd">package</span><span class="pln"> com</span><span class="pun">.</span><span class="pln">mycompany</span><span class="pun">.</span><span class="pln">domain</span><span class="pun">;</span><span class="pln">

</span><span class="lit">@Document</span><span class="pln">
</span><span class="lit">@CompoundIndexes</span><span class="pun">({</span><span class="pln">
    </span><span class="lit">@CompoundIndex</span><span class="pun">(</span><span class="pln">name </span><span class="pun">=</span><span class="pln"> </span><span class="str">"age_idx"</span><span class="pun">,</span><span class="pln"> def </span><span class="pun">=</span><span class="pln"> </span><span class="str">"{'lastName': 1, 'age': -1}"</span><span class="pun">)</span><span class="pln">
</span><span class="pun">})</span><span class="pln">
</span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">Person</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

  </span><span class="lit">@Id</span><span class="pln">
  </span><span class="kwd">private</span><span class="pln"> </span><span class="typ">ObjectId</span><span class="pln"> id</span><span class="pun">;</span><span class="pln">
  </span><span class="kwd">private</span><span class="pln"> </span><span class="typ">Integer</span><span class="pln"> age</span><span class="pun">;</span><span class="pln">
  </span><span class="kwd">private</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> firstName</span><span class="pun">;</span><span class="pln">
  </span><span class="kwd">private</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> lastName</span><span class="pun">;</span><span class="pln">

</span><span class="pun">}</span></code></pre>
</div>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="mapping-usage-indexes.text-index"><a class="anchor" href="#mapping-usage-indexes.text-index"></a>11.3.4. Text Indexes</h4>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
The text index feature is disabled by default for mongodb v.2.4.
</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>Creating a text index allows to accumulate several fields into a 
searchable full text index. It is only possible to have one text index 
per collection so all fields marked with <code>@TextIndexed</code> are 
combined into this index. Properties can be weighted to influence 
document score for ranking results. The default language for the text 
index is english, to change the default language set <code>@Document(language="spanish")</code> to any language you want. Using a property called <code>language</code> or <code>@Language</code> allows to define a language override on a per document base.</p>
</div>
<div class="exampleblock">
<div class="title">Example 71. Example Text Index Usage</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="lit">@Document</span><span class="pun">(</span><span class="pln">language </span><span class="pun">=</span><span class="pln"> </span><span class="str">"spanish"</span><span class="pun">)</span><span class="pln">
</span><span class="kwd">class</span><span class="pln"> </span><span class="typ">SomeEntity</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

    </span><span class="lit">@TextIndexed</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> foo</span><span class="pun">;</span><span class="pln">

    </span><span class="lit">@Language</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> lang</span><span class="pun">;</span><span class="pln">

    </span><span class="typ">Nested</span><span class="pln"> nested</span><span class="pun">;</span><span class="pln">
</span><span class="pun">}</span><span class="pln">

</span><span class="kwd">class</span><span class="pln"> </span><span class="typ">Nested</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

    </span><span class="lit">@TextIndexed</span><span class="pun">(</span><span class="pln">weight</span><span class="pun">=</span><span class="lit">5</span><span class="pun">)</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> bar</span><span class="pun">;</span><span class="pln">
    </span><span class="typ">String</span><span class="pln"> roo</span><span class="pun">;</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="mapping-usage-references"><a class="anchor" href="#mapping-usage-references"></a>11.3.5. Using DBRefs</h4>
<div class="paragraph">
<p>The mapping framework doesn’t have to store child objects embedded 
within the document. You can also store them separately and use a DBRef 
to refer to that document. When the object is loaded from MongoDB, those
 references will be eagerly resolved and you will get back a mapped 
object that looks the same as if it had been stored embedded within your
 master document.</p>
</div>
<div class="paragraph">
<p>Here’s an example of using a DBRef to refer to a specific document 
that exists independently of the object in which it is referenced (both 
classes are shown in-line for brevity’s sake):</p>
</div>
<div class="exampleblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="lit">@Document</span><span class="pln">
</span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">Account</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

  </span><span class="lit">@Id</span><span class="pln">
  </span><span class="kwd">private</span><span class="pln"> </span><span class="typ">ObjectId</span><span class="pln"> id</span><span class="pun">;</span><span class="pln">
  </span><span class="kwd">private</span><span class="pln"> </span><span class="typ">Float</span><span class="pln"> total</span><span class="pun">;</span><span class="pln">
</span><span class="pun">}</span><span class="pln">

</span><span class="lit">@Document</span><span class="pln">
</span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">Person</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

  </span><span class="lit">@Id</span><span class="pln">
  </span><span class="kwd">private</span><span class="pln"> </span><span class="typ">ObjectId</span><span class="pln"> id</span><span class="pun">;</span><span class="pln">
  </span><span class="lit">@Indexed</span><span class="pln">
  </span><span class="kwd">private</span><span class="pln"> </span><span class="typ">Integer</span><span class="pln"> ssn</span><span class="pun">;</span><span class="pln">
  </span><span class="lit">@DBRef</span><span class="pln">
  </span><span class="kwd">private</span><span class="pln"> </span><span class="typ">List</span><span class="pun">&lt;</span><span class="typ">Account</span><span class="pun">&gt;</span><span class="pln"> accounts</span><span class="pun">;</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>There’s no need to use something like <code>@OneToMany</code> because
 the mapping framework sees that you’re wanting a one-to-many 
relationship because there is a List of objects. When the object is 
stored in MongoDB, there will be a list of DBRefs rather than the <code>Account</code> objects themselves.</p>
</div>
<div class="admonitionblock important">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-important" title="Important"></i>
</td>
<td class="content">
The mapping framework does not handle cascading saves. If you change an <code>Account</code> object that is referenced by a <code>Person</code> object, you must save the Account object separately. Calling <code>save</code> on the <code>Person</code> object will not automatically save the <code>Account</code> objects in the property <code>accounts</code>.
</td>
</tr>
</tbody></table>
</div>
</div>
<div class="sect3">
<h4 id="mapping-usage-events"><a class="anchor" href="#mapping-usage-events"></a>11.3.6. Mapping Framework Events</h4>
<div class="paragraph">
<p>Events are fired throughout the lifecycle of the mapping process. This is described in the <a href="#mongodb.mapping-usage.events">Lifecycle Events</a> section.</p>
</div>
<div class="paragraph">
<p>Simply declaring these beans in your Spring ApplicationContext will cause them to be invoked whenever the event is dispatched.</p>
</div>
</div>
<div class="sect3">
<h4 id="mapping-explicit-converters"><a class="anchor" href="#mapping-explicit-converters"></a>11.3.7. Overriding Mapping with explicit Converters</h4>
<div class="paragraph">
<p>When storing and querying your objects it is convenient to have a <code>MongoConverter</code>
 instance handle the mapping of all Java types to DBObjects. However, 
sometimes you may want the `MongoConverter’s do most of the work but 
allow you to selectively handle the conversion for a particular type or 
to optimize performance.</p>
</div>
<div class="paragraph">
<p>To selectively handle the conversion yourself, register one or more one or more <code>org.springframework.core.convert.converter.Converter</code> instances with the MongoConverter.</p>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
Spring 3.0 introduced a core.convert package that provides a general 
type conversion system. This is described in detail in the Spring 
reference documentation section entitled <a href="http://docs.spring.io/spring/docs/3.2.x/spring-framework-reference/html/validation.html#core-convert">Spring 3 Type Conversion</a>.
</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>The method <code>customConversions</code> in <code>AbstractMongoConfiguration</code> can be used to configure Converters. The examples <a href="#mapping-configuration">here</a> at the beginning of this chapter show how to perform the configuration using Java and XML.</p>
</div>
<div class="paragraph">
<p>Below is an example of a Spring Converter implementation that converts from a DBObject to a Person POJO.</p>
</div>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="lit">@ReadingConverter</span><span class="pln">
 </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">PersonReadConverter</span><span class="pln"> </span><span class="kwd">implements</span><span class="pln"> </span><span class="typ">Converter</span><span class="pun">&lt;</span><span class="typ">DBObject</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Person</span><span class="pun">&gt;</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

  </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">Person</span><span class="pln"> convert</span><span class="pun">(</span><span class="typ">DBObject</span><span class="pln"> source</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="typ">Person</span><span class="pln"> p </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Person</span><span class="pun">((</span><span class="typ">ObjectId</span><span class="pun">)</span><span class="pln"> source</span><span class="pun">.</span><span class="pln">get</span><span class="pun">(</span><span class="str">"_id"</span><span class="pun">),</span><span class="pln"> </span><span class="pun">(</span><span class="typ">String</span><span class="pun">)</span><span class="pln"> source</span><span class="pun">.</span><span class="pln">get</span><span class="pun">(</span><span class="str">"name"</span><span class="pun">));</span><span class="pln">
    p</span><span class="pun">.</span><span class="pln">setAge</span><span class="pun">((</span><span class="typ">Integer</span><span class="pun">)</span><span class="pln"> source</span><span class="pun">.</span><span class="pln">get</span><span class="pun">(</span><span class="str">"age"</span><span class="pun">));</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> p</span><span class="pun">;</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Here is an example that converts from a Person to a DBObject.</p>
</div>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="lit">@WritingConverter</span><span class="pln">
</span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">PersonWriteConverter</span><span class="pln"> </span><span class="kwd">implements</span><span class="pln"> </span><span class="typ">Converter</span><span class="pun">&lt;</span><span class="typ">Person</span><span class="pun">,</span><span class="pln"> </span><span class="typ">DBObject</span><span class="pun">&gt;</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

  </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">DBObject</span><span class="pln"> convert</span><span class="pun">(</span><span class="typ">Person</span><span class="pln"> source</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="typ">DBObject</span><span class="pln"> dbo </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">BasicDBObject</span><span class="pun">();</span><span class="pln">
    dbo</span><span class="pun">.</span><span class="pln">put</span><span class="pun">(</span><span class="str">"_id"</span><span class="pun">,</span><span class="pln"> source</span><span class="pun">.</span><span class="pln">getId</span><span class="pun">());</span><span class="pln">
    dbo</span><span class="pun">.</span><span class="pln">put</span><span class="pun">(</span><span class="str">"name"</span><span class="pun">,</span><span class="pln"> source</span><span class="pun">.</span><span class="pln">getFirstName</span><span class="pun">());</span><span class="pln">
    dbo</span><span class="pun">.</span><span class="pln">put</span><span class="pun">(</span><span class="str">"age"</span><span class="pun">,</span><span class="pln"> source</span><span class="pun">.</span><span class="pln">getAge</span><span class="pun">());</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> dbo</span><span class="pun">;</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="mongo.cross.store"><a class="anchor" href="#mongo.cross.store"></a>12. Cross Store support</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Sometimes you need to store data in multiple data stores and these 
data stores can be of different types. One might be relational while the
 other a document store. For this use case we have created a separate 
module in the MongoDB support that handles what we call cross-store 
support. The current implementation is based on JPA as the driver for 
the relational database and we allow select fields in the Entities to be
 stored in a Mongo database. In addition to allowing you to store your 
data in two stores we also coordinate persistence operations for the 
non-transactional MongoDB store with the transaction life-cycle for the 
relational database.</p>
</div>
<div class="sect2">
<h3 id="mongodb_cross-store-configuration"><a class="anchor" href="#mongodb_cross-store-configuration"></a>12.1. Cross Store Configuration</h3>
<div class="paragraph">
<p>Assuming that you have a working JPA application and would like to 
add some cross-store persistence for MongoDB. What do you have to add to
 your configuration?</p>
</div>
<div class="paragraph">
<p>First of all you need to add a dependency on the module. Using Maven this is done by adding a dependency to your pom:</p>
</div>
<div class="exampleblock">
<div class="title">Example 72. Example Maven pom.xml with spring-data-mongodb-cross-store dependency</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-xml" data-lang="xml"><span class="tag">&lt;project</span><span class="pln"> </span><span class="atn">xmlns</span><span class="pun">=</span><span class="atv">"http://maven.apache.org/POM/4.0.0"</span><span class="pln"> </span><span class="atn">xmlns:xsi</span><span class="pun">=</span><span class="atv">"http://www.w3.org/2001/XMLSchema-instance"</span><span class="pln">
  </span><span class="atn">xsi:schemaLocation</span><span class="pun">=</span><span class="atv">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span><span class="tag">&gt;</span><span class="pln">
  </span><span class="tag">&lt;modelVersion&gt;</span><span class="pln">4.0.0</span><span class="tag">&lt;/modelVersion&gt;</span><span class="pln">

  ...

    </span><span class="com">&lt;!-- Spring Data --&gt;</span><span class="pln">
    </span><span class="tag">&lt;dependency&gt;</span><span class="pln">
      </span><span class="tag">&lt;groupId&gt;</span><span class="pln">org.springframework.data</span><span class="tag">&lt;/groupId&gt;</span><span class="pln">
      </span><span class="tag">&lt;artifactId&gt;</span><span class="pln">spring-data-mongodb-cross-store</span><span class="tag">&lt;/artifactId&gt;</span><span class="pln">
      </span><span class="tag">&lt;version&gt;</span><span class="pln">${spring.data.mongo.version}</span><span class="tag">&lt;/version&gt;</span><span class="pln">
    </span><span class="tag">&lt;/dependency&gt;</span><span class="pln">

  ...

</span><span class="tag">&lt;/project&gt;</span></code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>Once this is done we need to enable AspectJ for the project. The 
cross-store support is implemented using AspectJ aspects so by enabling 
compile time AspectJ support the cross-store features will become 
available to your project. In Maven you would add an additional plugin 
to the &lt;build&gt; section of the pom:</p>
</div>
<div class="exampleblock">
<div class="title">Example 73. Example Maven pom.xml with AspectJ plugin enabled</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-xml" data-lang="xml"><span class="tag">&lt;project</span><span class="pln"> </span><span class="atn">xmlns</span><span class="pun">=</span><span class="atv">"http://maven.apache.org/POM/4.0.0"</span><span class="pln"> </span><span class="atn">xmlns:xsi</span><span class="pun">=</span><span class="atv">"http://www.w3.org/2001/XMLSchema-instance"</span><span class="pln">
  </span><span class="atn">xsi:schemaLocation</span><span class="pun">=</span><span class="atv">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span><span class="tag">&gt;</span><span class="pln">
  </span><span class="tag">&lt;modelVersion&gt;</span><span class="pln">4.0.0</span><span class="tag">&lt;/modelVersion&gt;</span><span class="pln">

  ...

  </span><span class="tag">&lt;build&gt;</span><span class="pln">
    </span><span class="tag">&lt;plugins&gt;</span><span class="pln">

      …

      </span><span class="tag">&lt;plugin&gt;</span><span class="pln">
        </span><span class="tag">&lt;groupId&gt;</span><span class="pln">org.codehaus.mojo</span><span class="tag">&lt;/groupId&gt;</span><span class="pln">
        </span><span class="tag">&lt;artifactId&gt;</span><span class="pln">aspectj-maven-plugin</span><span class="tag">&lt;/artifactId&gt;</span><span class="pln">
        </span><span class="tag">&lt;version&gt;</span><span class="pln">1.0</span><span class="tag">&lt;/version&gt;</span><span class="pln">
        </span><span class="tag">&lt;dependencies&gt;</span><span class="pln">
          </span><span class="com">&lt;!-- NB: You must use Maven 2.0.9 or above or these are ignored (see MNG-2972) --&gt;</span><span class="pln">
          </span><span class="tag">&lt;dependency&gt;</span><span class="pln">
            </span><span class="tag">&lt;groupId&gt;</span><span class="pln">org.aspectj</span><span class="tag">&lt;/groupId&gt;</span><span class="pln">
            </span><span class="tag">&lt;artifactId&gt;</span><span class="pln">aspectjrt</span><span class="tag">&lt;/artifactId&gt;</span><span class="pln">
            </span><span class="tag">&lt;version&gt;</span><span class="pln">${aspectj.version}</span><span class="tag">&lt;/version&gt;</span><span class="pln">
          </span><span class="tag">&lt;/dependency&gt;</span><span class="pln">
          </span><span class="tag">&lt;dependency&gt;</span><span class="pln">
            </span><span class="tag">&lt;groupId&gt;</span><span class="pln">org.aspectj</span><span class="tag">&lt;/groupId&gt;</span><span class="pln">
            </span><span class="tag">&lt;artifactId&gt;</span><span class="pln">aspectjtools</span><span class="tag">&lt;/artifactId&gt;</span><span class="pln">
            </span><span class="tag">&lt;version&gt;</span><span class="pln">${aspectj.version}</span><span class="tag">&lt;/version&gt;</span><span class="pln">
          </span><span class="tag">&lt;/dependency&gt;</span><span class="pln">
        </span><span class="tag">&lt;/dependencies&gt;</span><span class="pln">
        </span><span class="tag">&lt;executions&gt;</span><span class="pln">
          </span><span class="tag">&lt;execution&gt;</span><span class="pln">
            </span><span class="tag">&lt;goals&gt;</span><span class="pln">
              </span><span class="tag">&lt;goal&gt;</span><span class="pln">compile</span><span class="tag">&lt;/goal&gt;</span><span class="pln">
              </span><span class="tag">&lt;goal&gt;</span><span class="pln">test-compile</span><span class="tag">&lt;/goal&gt;</span><span class="pln">
            </span><span class="tag">&lt;/goals&gt;</span><span class="pln">
          </span><span class="tag">&lt;/execution&gt;</span><span class="pln">
        </span><span class="tag">&lt;/executions&gt;</span><span class="pln">
        </span><span class="tag">&lt;configuration&gt;</span><span class="pln">
          </span><span class="tag">&lt;outxml&gt;</span><span class="pln">true</span><span class="tag">&lt;/outxml&gt;</span><span class="pln">
          </span><span class="tag">&lt;aspectLibraries&gt;</span><span class="pln">
            </span><span class="tag">&lt;aspectLibrary&gt;</span><span class="pln">
              </span><span class="tag">&lt;groupId&gt;</span><span class="pln">org.springframework</span><span class="tag">&lt;/groupId&gt;</span><span class="pln">
              </span><span class="tag">&lt;artifactId&gt;</span><span class="pln">spring-aspects</span><span class="tag">&lt;/artifactId&gt;</span><span class="pln">
            </span><span class="tag">&lt;/aspectLibrary&gt;</span><span class="pln">
            </span><span class="tag">&lt;aspectLibrary&gt;</span><span class="pln">
              </span><span class="tag">&lt;groupId&gt;</span><span class="pln">org.springframework.data</span><span class="tag">&lt;/groupId&gt;</span><span class="pln">
              </span><span class="tag">&lt;artifactId&gt;</span><span class="pln">spring-data-mongodb-cross-store</span><span class="tag">&lt;/artifactId&gt;</span><span class="pln">
            </span><span class="tag">&lt;/aspectLibrary&gt;</span><span class="pln">
          </span><span class="tag">&lt;/aspectLibraries&gt;</span><span class="pln">
          </span><span class="tag">&lt;source&gt;</span><span class="pln">1.6</span><span class="tag">&lt;/source&gt;</span><span class="pln">
          </span><span class="tag">&lt;target&gt;</span><span class="pln">1.6</span><span class="tag">&lt;/target&gt;</span><span class="pln">
        </span><span class="tag">&lt;/configuration&gt;</span><span class="pln">
      </span><span class="tag">&lt;/plugin&gt;</span><span class="pln">

      ...

    </span><span class="tag">&lt;/plugins&gt;</span><span class="pln">
  </span><span class="tag">&lt;/build&gt;</span><span class="pln">

...

</span><span class="tag">&lt;/project&gt;</span></code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>Finally, you need to configure your project to use MongoDB and also 
configure the aspects that are used. The following XML snippet should be
 added to your application context:</p>
</div>
<div class="exampleblock">
<div class="title">Example 74. Example application context with MongoDB and cross-store aspect support</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-xml" data-lang="xml"><span class="pun">&lt;?</span><span class="pln">xml version</span><span class="pun">=</span><span class="str">"1.0"</span><span class="pln"> encoding</span><span class="pun">=</span><span class="str">"UTF-8"</span><span class="pun">?&gt;</span><span class="pln">
</span><span class="tag">&lt;beans</span><span class="pln"> </span><span class="atn">xmlns</span><span class="pun">=</span><span class="atv">"http://www.springframework.org/schema/beans"</span><span class="pln">
  </span><span class="atn">xmlns:xsi</span><span class="pun">=</span><span class="atv">"http://www.w3.org/2001/XMLSchema-instance"</span><span class="pln">
  </span><span class="atn">xmlns:jdbc</span><span class="pun">=</span><span class="atv">"http://www.springframework.org/schema/jdbc"</span><span class="pln">
  </span><span class="atn">xmlns:jpa</span><span class="pun">=</span><span class="atv">"http://www.springframework.org/schema/data/jpa"</span><span class="pln">
  </span><span class="atn">xmlns:mongo</span><span class="pun">=</span><span class="atv">"http://www.springframework.org/schema/data/mongo"</span><span class="pln">
  </span><span class="atn">xsi:schemaLocation</span><span class="pun">=</span><span class="atv">"http://www.springframework.org/schema/data/mongo
    http://www.springframework.org/schema/data/mongo/spring-mongo.xsd
    http://www.springframework.org/schema/jdbc
    http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd
    http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
    http://www.springframework.org/schema/data/jpa
    http://www.springframework.org/schema/data/jpa/spring-jpa-1.0.xsd"</span><span class="tag">&gt;</span><span class="pln">

  ...

  </span><span class="com">&lt;!--  Mongo config --&gt;</span><span class="pln">
  </span><span class="tag">&lt;mongo:mongo</span><span class="pln"> </span><span class="atn">host</span><span class="pun">=</span><span class="atv">"localhost"</span><span class="pln"> </span><span class="atn">port</span><span class="pun">=</span><span class="atv">"27017"</span><span class="tag">/&gt;</span><span class="pln">

  </span><span class="tag">&lt;bean</span><span class="pln"> </span><span class="atn">id</span><span class="pun">=</span><span class="atv">"mongoTemplate"</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"org.springframework.data.mongodb.core.MongoTemplate"</span><span class="tag">&gt;</span><span class="pln">
    </span><span class="tag">&lt;constructor-arg</span><span class="pln"> </span><span class="atn">name</span><span class="pun">=</span><span class="atv">"mongo"</span><span class="pln"> </span><span class="atn">ref</span><span class="pun">=</span><span class="atv">"mongo"</span><span class="tag">/&gt;</span><span class="pln">
    </span><span class="tag">&lt;constructor-arg</span><span class="pln"> </span><span class="atn">name</span><span class="pun">=</span><span class="atv">"databaseName"</span><span class="pln"> </span><span class="atn">value</span><span class="pun">=</span><span class="atv">"test"</span><span class="tag">/&gt;</span><span class="pln">
    </span><span class="tag">&lt;constructor-arg</span><span class="pln"> </span><span class="atn">name</span><span class="pun">=</span><span class="atv">"defaultCollectionName"</span><span class="pln"> </span><span class="atn">value</span><span class="pun">=</span><span class="atv">"cross-store"</span><span class="tag">/&gt;</span><span class="pln">
  </span><span class="tag">&lt;/bean&gt;</span><span class="pln">

  </span><span class="tag">&lt;bean</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"org.springframework.data.mongodb.core.MongoExceptionTranslator"</span><span class="tag">/&gt;</span><span class="pln">

  </span><span class="com">&lt;!--  Mongo cross-store aspect config --&gt;</span><span class="pln">
  </span><span class="tag">&lt;bean</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"org.springframework.data.persistence.document.mongo.MongoDocumentBacking"</span><span class="pln">
        </span><span class="atn">factory-method</span><span class="pun">=</span><span class="atv">"aspectOf"</span><span class="tag">&gt;</span><span class="pln">
    </span><span class="tag">&lt;property</span><span class="pln"> </span><span class="atn">name</span><span class="pun">=</span><span class="atv">"changeSetPersister"</span><span class="pln"> </span><span class="atn">ref</span><span class="pun">=</span><span class="atv">"mongoChangeSetPersister"</span><span class="tag">/&gt;</span><span class="pln">
  </span><span class="tag">&lt;/bean&gt;</span><span class="pln">
  </span><span class="tag">&lt;bean</span><span class="pln"> </span><span class="atn">id</span><span class="pun">=</span><span class="atv">"mongoChangeSetPersister"</span><span class="pln">
      </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"org.springframework.data.persistence.document.mongo.MongoChangeSetPersister"</span><span class="tag">&gt;</span><span class="pln">
    </span><span class="tag">&lt;property</span><span class="pln"> </span><span class="atn">name</span><span class="pun">=</span><span class="atv">"mongoTemplate"</span><span class="pln"> </span><span class="atn">ref</span><span class="pun">=</span><span class="atv">"mongoTemplate"</span><span class="tag">/&gt;</span><span class="pln">
    </span><span class="tag">&lt;property</span><span class="pln"> </span><span class="atn">name</span><span class="pun">=</span><span class="atv">"entityManagerFactory"</span><span class="pln"> </span><span class="atn">ref</span><span class="pun">=</span><span class="atv">"entityManagerFactory"</span><span class="tag">/&gt;</span><span class="pln">
  </span><span class="tag">&lt;/bean&gt;</span><span class="pln">

  ...

</span><span class="tag">&lt;/beans&gt;</span></code></pre>
</div>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="mongodb_cross-store-application"><a class="anchor" href="#mongodb_cross-store-application"></a>12.2. Writing the Cross Store Application</h3>
<div class="paragraph">
<p>We are assuming that you have a working JPA application so we will 
only cover the additional steps needed to persist part of your Entity in
 your Mongo database. First you need to identify the field you want 
persisted. It should be a domain class and follow the general rules for 
the Mongo mapping support covered in previous chapters. The field you 
want persisted in MongoDB should be annotated using the <code>@RelatedDocument</code>
 annotation. That is really all you need to do!. The cross-store aspects
 take care of the rest. This includes marking the field with <code>@Transient</code>
 so it won’t be persisted using JPA, keeping track of any changes made 
to the field value and writing them to the database on successful 
transaction completion, loading the document from MongoDB the first time
 the value is used in your application. Here is an example of a simple 
Entity that has a field annotated with <code>@RelatedEntity</code>.</p>
</div>
<div class="exampleblock">
<div class="title">Example 75. Example of Entity with @RelatedDocument</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="lit">@Entity</span><span class="pln">
</span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">Customer</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

  </span><span class="lit">@Id</span><span class="pln">
  </span><span class="lit">@GeneratedValue</span><span class="pun">(</span><span class="pln">strategy </span><span class="pun">=</span><span class="pln"> </span><span class="typ">GenerationType</span><span class="pun">.</span><span class="pln">IDENTITY</span><span class="pun">)</span><span class="pln">
  </span><span class="kwd">private</span><span class="pln"> </span><span class="typ">Long</span><span class="pln"> id</span><span class="pun">;</span><span class="pln">

  </span><span class="kwd">private</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> firstName</span><span class="pun">;</span><span class="pln">

  </span><span class="kwd">private</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> lastName</span><span class="pun">;</span><span class="pln">

  </span><span class="lit">@RelatedDocument</span><span class="pln">
  </span><span class="kwd">private</span><span class="pln"> </span><span class="typ">SurveyInfo</span><span class="pln"> surveyInfo</span><span class="pun">;</span><span class="pln">

  </span><span class="com">// getters and setters omitted</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div>
</div>
</div>
</div>
<div class="exampleblock">
<div class="title">Example 76. Example of domain class to be stored as document</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">SurveyInfo</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

  </span><span class="kwd">private</span><span class="pln"> </span><span class="typ">Map</span><span class="pun">&lt;</span><span class="typ">String</span><span class="pun">,</span><span class="pln"> </span><span class="typ">String</span><span class="pun">&gt;</span><span class="pln"> questionsAndAnswers</span><span class="pun">;</span><span class="pln">

  </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">SurveyInfo</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">questionsAndAnswers </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">HashMap</span><span class="pun">&lt;</span><span class="typ">String</span><span class="pun">,</span><span class="pln"> </span><span class="typ">String</span><span class="pun">&gt;();</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">

  </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">SurveyInfo</span><span class="pun">(</span><span class="typ">Map</span><span class="pun">&lt;</span><span class="typ">String</span><span class="pun">,</span><span class="pln"> </span><span class="typ">String</span><span class="pun">&gt;</span><span class="pln"> questionsAndAnswers</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">questionsAndAnswers </span><span class="pun">=</span><span class="pln"> questionsAndAnswers</span><span class="pun">;</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">

  </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">Map</span><span class="pun">&lt;</span><span class="typ">String</span><span class="pun">,</span><span class="pln"> </span><span class="typ">String</span><span class="pun">&gt;</span><span class="pln"> getQuestionsAndAnswers</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> questionsAndAnswers</span><span class="pun">;</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">

  </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> setQuestionsAndAnswers</span><span class="pun">(</span><span class="typ">Map</span><span class="pun">&lt;</span><span class="typ">String</span><span class="pun">,</span><span class="pln"> </span><span class="typ">String</span><span class="pun">&gt;</span><span class="pln"> questionsAndAnswers</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">questionsAndAnswers </span><span class="pun">=</span><span class="pln"> questionsAndAnswers</span><span class="pun">;</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">

  </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">SurveyInfo</span><span class="pln"> addQuestionAndAnswer</span><span class="pun">(</span><span class="typ">String</span><span class="pln"> question</span><span class="pun">,</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> answer</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">questionsAndAnswers</span><span class="pun">.</span><span class="pln">put</span><span class="pun">(</span><span class="pln">question</span><span class="pun">,</span><span class="pln"> answer</span><span class="pun">);</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">;</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>Once the SurveyInfo has been set on the Customer object above the 
MongoTemplate that was configured above is used to save the SurveyInfo 
along with some metadata about the JPA Entity is stored in a MongoDB 
collection named after the fully qualified name of the JPA Entity class.
 The following code:</p>
</div>
<div class="exampleblock">
<div class="title">Example 77. Example of code using the JPA Entity configured for cross-store persistence</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="typ">Customer</span><span class="pln"> customer </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Customer</span><span class="pun">();</span><span class="pln">
customer</span><span class="pun">.</span><span class="pln">setFirstName</span><span class="pun">(</span><span class="str">"Sven"</span><span class="pun">);</span><span class="pln">
customer</span><span class="pun">.</span><span class="pln">setLastName</span><span class="pun">(</span><span class="str">"Olafsen"</span><span class="pun">);</span><span class="pln">
</span><span class="typ">SurveyInfo</span><span class="pln"> surveyInfo </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">SurveyInfo</span><span class="pun">()</span><span class="pln">
  </span><span class="pun">.</span><span class="pln">addQuestionAndAnswer</span><span class="pun">(</span><span class="str">"age"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"22"</span><span class="pun">)</span><span class="pln">
  </span><span class="pun">.</span><span class="pln">addQuestionAndAnswer</span><span class="pun">(</span><span class="str">"married"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"Yes"</span><span class="pun">)</span><span class="pln">
  </span><span class="pun">.</span><span class="pln">addQuestionAndAnswer</span><span class="pun">(</span><span class="str">"citizenship"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"Norwegian"</span><span class="pun">);</span><span class="pln">
customer</span><span class="pun">.</span><span class="pln">setSurveyInfo</span><span class="pun">(</span><span class="pln">surveyInfo</span><span class="pun">);</span><span class="pln">
customerRepository</span><span class="pun">.</span><span class="pln">save</span><span class="pun">(</span><span class="pln">customer</span><span class="pun">);</span></code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>Executing the code above results in the following JSON document stored in MongoDB.</p>
</div>
<div class="exampleblock">
<div class="title">Example 78. Example of JSON document stored in MongoDB</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-javascript" data-lang="javascript"><span class="pun">{</span><span class="pln"> </span><span class="str">"_id"</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="typ">ObjectId</span><span class="pun">(</span><span class="pln"> </span><span class="str">"4d9e8b6e3c55287f87d4b79e"</span><span class="pln"> </span><span class="pun">),</span><span class="pln">
  </span><span class="str">"_entity_id"</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="lit">1</span><span class="pun">,</span><span class="pln">
  </span><span class="str">"_entity_class"</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="str">"org.springframework.data.mongodb.examples.custsvc.domain.Customer"</span><span class="pun">,</span><span class="pln">
  </span><span class="str">"_entity_field_name"</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="str">"surveyInfo"</span><span class="pun">,</span><span class="pln">
  </span><span class="str">"questionsAndAnswers"</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="str">"married"</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="str">"Yes"</span><span class="pun">,</span><span class="pln">
    </span><span class="str">"age"</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="str">"22"</span><span class="pun">,</span><span class="pln">
    </span><span class="str">"citizenship"</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="str">"Norwegian"</span><span class="pln"> </span><span class="pun">},</span><span class="pln">
  </span><span class="str">"_entity_field_class"</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="str">"org.springframework.data.mongodb.examples.custsvc.domain.SurveyInfo"</span><span class="pln"> </span><span class="pun">}</span></code></pre>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="mongo.logging"><a class="anchor" href="#mongo.logging"></a>13. Logging support</h2>
<div class="sectionbody">
<div class="paragraph">
<p>An appender for Log4j is provided in the maven module 
"spring-data-mongodb-log4j". Note, there is no dependency on other 
Spring Mongo modules, only the MongoDB driver.</p>
</div>
<div class="sect2">
<h3 id="mongodb:logging-configuration"><a class="anchor" href="#mongodb:logging-configuration"></a>13.1. MongoDB Log4j Configuration</h3>
<div class="paragraph">
<p>Here is an example configuration</p>
</div>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code><span class="pln">log4j</span><span class="pun">.</span><span class="pln">rootCategory</span><span class="pun">=</span><span class="pln">INFO</span><span class="pun">,</span><span class="pln"> stdout

log4j</span><span class="pun">.</span><span class="pln">appender</span><span class="pun">.</span><span class="pln">stdout</span><span class="pun">=</span><span class="pln">org</span><span class="pun">.</span><span class="pln">springframework</span><span class="pun">.</span><span class="pln">data</span><span class="pun">.</span><span class="pln">document</span><span class="pun">.</span><span class="pln">mongodb</span><span class="pun">.</span><span class="pln">log4j</span><span class="pun">.</span><span class="typ">MongoLog4jAppender</span><span class="pln">
log4j</span><span class="pun">.</span><span class="pln">appender</span><span class="pun">.</span><span class="pln">stdout</span><span class="pun">.</span><span class="pln">layout</span><span class="pun">=</span><span class="pln">org</span><span class="pun">.</span><span class="pln">apache</span><span class="pun">.</span><span class="pln">log4j</span><span class="pun">.</span><span class="typ">PatternLayout</span><span class="pln">
log4j</span><span class="pun">.</span><span class="pln">appender</span><span class="pun">.</span><span class="pln">stdout</span><span class="pun">.</span><span class="pln">layout</span><span class="pun">.</span><span class="typ">ConversionPattern</span><span class="pun">=%</span><span class="pln">d </span><span class="pun">%</span><span class="pln">p </span><span class="pun">[%</span><span class="pln">c</span><span class="pun">]</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> </span><span class="pun">&lt;%</span><span class="pln">m</span><span class="pun">&gt;%</span><span class="pln">n
log4j</span><span class="pun">.</span><span class="pln">appender</span><span class="pun">.</span><span class="pln">stdout</span><span class="pun">.</span><span class="pln">host </span><span class="pun">=</span><span class="pln"> localhost
log4j</span><span class="pun">.</span><span class="pln">appender</span><span class="pun">.</span><span class="pln">stdout</span><span class="pun">.</span><span class="pln">port </span><span class="pun">=</span><span class="pln"> </span><span class="lit">27017</span><span class="pln">
log4j</span><span class="pun">.</span><span class="pln">appender</span><span class="pun">.</span><span class="pln">stdout</span><span class="pun">.</span><span class="pln">database </span><span class="pun">=</span><span class="pln"> logs
log4j</span><span class="pun">.</span><span class="pln">appender</span><span class="pun">.</span><span class="pln">stdout</span><span class="pun">.</span><span class="pln">collectionPattern </span><span class="pun">=</span><span class="pln"> </span><span class="pun">%</span><span class="pln">X</span><span class="pun">{</span><span class="pln">year</span><span class="pun">}%</span><span class="pln">X</span><span class="pun">{</span><span class="pln">month</span><span class="pun">}</span><span class="pln">
log4j</span><span class="pun">.</span><span class="pln">appender</span><span class="pun">.</span><span class="pln">stdout</span><span class="pun">.</span><span class="pln">applicationId </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">my</span><span class="pun">.</span><span class="pln">application
log4j</span><span class="pun">.</span><span class="pln">appender</span><span class="pun">.</span><span class="pln">stdout</span><span class="pun">.</span><span class="pln">warnOrHigherWriteConcern </span><span class="pun">=</span><span class="pln"> FSYNC_SAFE

log4j</span><span class="pun">.</span><span class="pln">category</span><span class="pun">.</span><span class="pln">org</span><span class="pun">.</span><span class="pln">apache</span><span class="pun">.</span><span class="pln">activemq</span><span class="pun">=</span><span class="pln">ERROR
log4j</span><span class="pun">.</span><span class="pln">category</span><span class="pun">.</span><span class="pln">org</span><span class="pun">.</span><span class="pln">springframework</span><span class="pun">.</span><span class="pln">batch</span><span class="pun">=</span><span class="pln">DEBUG
log4j</span><span class="pun">.</span><span class="pln">category</span><span class="pun">.</span><span class="pln">org</span><span class="pun">.</span><span class="pln">springframework</span><span class="pun">.</span><span class="pln">data</span><span class="pun">.</span><span class="pln">document</span><span class="pun">.</span><span class="pln">mongodb</span><span class="pun">=</span><span class="pln">DEBUG
log4j</span><span class="pun">.</span><span class="pln">category</span><span class="pun">.</span><span class="pln">org</span><span class="pun">.</span><span class="pln">springframework</span><span class="pun">.</span><span class="pln">transaction</span><span class="pun">=</span><span class="pln">INFO</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>The important configuration to look at aside from host and port is 
the database and collectionPattern. The variables year, month, day and 
hour are available for you to use in forming a collection name. This is 
to support the common convention of grouping log information in a 
collection that corresponds to a specific time period, for example a 
collection per day.</p>
</div>
<div class="paragraph">
<p>There is also an applicationId which is put into the stored message. 
The document stored from logging as the following keys: level, name, 
applicationId, timestamp, properties, traceback, and message.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="mongo.jmx"><a class="anchor" href="#mongo.jmx"></a>14. JMX support</h2>
<div class="sectionbody">
<div class="paragraph">
<p>The JMX support for MongoDB exposes the results of executing the 
'serverStatus' command on the admin database for a single MongoDB server
 instance. It also exposes an administrative MBean, MongoAdmin which 
will let you perform administrative operations such as drop or create a 
database. The JMX features build upon the JMX feature set available in 
the Spring Framework. See <a href="http://docs.spring.io/spring/docs/3.2.x/spring-framework-reference/html/jmx.html">here </a> for more details.</p>
</div>
<div class="sect2">
<h3 id="mongodb:jmx-configuration"><a class="anchor" href="#mongodb:jmx-configuration"></a>14.1. MongoDB JMX Configuration</h3>
<div class="paragraph">
<p>Spring’s Mongo namespace enables you to easily enable JMX functionality</p>
</div>
<div class="exampleblock">
<div class="title">Example 79. XML schema to configure MongoDB</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-xml" data-lang="xml"><span class="pun">&lt;?</span><span class="pln">xml version</span><span class="pun">=</span><span class="str">"1.0"</span><span class="pln"> encoding</span><span class="pun">=</span><span class="str">"UTF-8"</span><span class="pun">?&gt;</span><span class="pln">
</span><span class="tag">&lt;beans</span><span class="pln"> </span><span class="atn">xmlns</span><span class="pun">=</span><span class="atv">"http://www.springframework.org/schema/beans"</span><span class="pln">
  </span><span class="atn">xmlns:xsi</span><span class="pun">=</span><span class="atv">"http://www.w3.org/2001/XMLSchema-instance"</span><span class="pln">
  </span><span class="atn">xmlns:context</span><span class="pun">=</span><span class="atv">"http://www.springframework.org/schema/context"</span><span class="pln">
  </span><span class="atn">xmlns:mongo</span><span class="pun">=</span><span class="atv">"http://www.springframework.org/schema/data/mongo"</span><span class="pln">
  </span><span class="atn">xsi:schemaLocation</span><span class="pun">=</span><span class="atv">"
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-3.0.xsd
    http://www.springframework.org/schema/data/mongo
    http://www.springframework.org/schema/data/mongo/spring-mongo-1.0.xsd
    http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd"</span><span class="tag">&gt;</span><span class="pln">

    </span><span class="com">&lt;!-- Default bean name is 'mongo' --&gt;</span><span class="pln">
    </span><span class="tag">&lt;mongo:mongo</span><span class="pln"> </span><span class="atn">host</span><span class="pun">=</span><span class="atv">"localhost"</span><span class="pln"> </span><span class="atn">port</span><span class="pun">=</span><span class="atv">"27017"</span><span class="tag">/&gt;</span><span class="pln">

    </span><span class="com">&lt;!-- by default look for a Mongo object named 'mongo' --&gt;</span><span class="pln">
    </span><span class="tag">&lt;mongo:jmx/&gt;</span><span class="pln">

    </span><span class="tag">&lt;context:mbean-export/&gt;</span><span class="pln">

    </span><span class="com">&lt;!-- To translate any MongoExceptions thrown in @Repository annotated classes --&gt;</span><span class="pln">
    </span><span class="tag">&lt;context:annotation-config/&gt;</span><span class="pln">

    </span><span class="tag">&lt;bean</span><span class="pln"> </span><span class="atn">id</span><span class="pun">=</span><span class="atv">"registry"</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"org.springframework.remoting.rmi.RmiRegistryFactoryBean"</span><span class="pln"> </span><span class="atn">p:port</span><span class="pun">=</span><span class="atv">"1099"</span><span class="pln"> </span><span class="tag">/&gt;</span><span class="pln">

    </span><span class="com">&lt;!-- Expose JMX over RMI --&gt;</span><span class="pln">
    </span><span class="tag">&lt;bean</span><span class="pln"> </span><span class="atn">id</span><span class="pun">=</span><span class="atv">"serverConnector"</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"org.springframework.jmx.support.ConnectorServerFactoryBean"</span><span class="pln">
        </span><span class="atn">depends-on</span><span class="pun">=</span><span class="atv">"registry"</span><span class="pln">
        </span><span class="atn">p:objectName</span><span class="pun">=</span><span class="atv">"connector:name=rmi"</span><span class="pln">
        </span><span class="atn">p:serviceUrl</span><span class="pun">=</span><span class="atv">"service:jmx:rmi://localhost/jndi/rmi://localhost:1099/myconnector"</span><span class="pln"> </span><span class="tag">/&gt;</span><span class="pln">

</span><span class="tag">&lt;/beans&gt;</span></code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>This will expose several MBeans</p>
</div>
<div class="ulist">
<ul>
<li>
<p>AssertMetrics</p>
</li>
<li>
<p>BackgroundFlushingMetrics</p>
</li>
<li>
<p>BtreeIndexCounters</p>
</li>
<li>
<p>ConnectionMetrics</p>
</li>
<li>
<p>GlobalLoclMetrics</p>
</li>
<li>
<p>MemoryMetrics</p>
</li>
<li>
<p>OperationCounters</p>
</li>
<li>
<p>ServerInfo</p>
</li>
<li>
<p>MongoAdmin</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>This is shown below in a screenshot from JConsole</p>
</div>
<div class="imageblock">
<div class="content">
<img src="Spring%20Data%20MongoDB%20-%20Reference%20Documentation_files/jconsole.png" alt="jconsole">
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="mongo.mongo-3"><a class="anchor" href="#mongo.mongo-3"></a>15. MongoDB 3.0 Support</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Spring Data MongoDB allows usage of both MongoDB Java driver 
generations 2 and 3 when connecting to a MongoDB 2.6/3.0 server running <em>MMap.v1</em> or a MongoDB server 3.0 using <em>MMap.v1</em> or the <em>WiredTiger</em> storage engine.</p>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
Please refer to the driver and database specific documentation for major differences between those.
</td>
</tr>
</tbody></table>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
Operations that are no longer valid using a 3.x MongoDB Java driver have
 been deprecated within Spring Data and will be removed in a subsequent 
release.
</td>
</tr>
</tbody></table>
</div>
<div class="sect2">
<h3 id="_using_spring_data_mongodb_with_mongodb_3_0"><a class="anchor" href="#_using_spring_data_mongodb_with_mongodb_3_0"></a>15.1. Using Spring Data MongoDB with MongoDB 3.0</h3>
<div class="sect3">
<h4 id="mongo.mongo-3.configuration"><a class="anchor" href="#mongo.mongo-3.configuration"></a>15.1.1. Configuration Options</h4>
<div class="paragraph">
<p>Some of the configuration options have been changed / removed for the <em>mongo-java-driver</em>. The following options will be ignored using the generation 3 driver:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>autoConnectRetry</p>
</li>
<li>
<p>maxAutoConnectRetryTime</p>
</li>
<li>
<p>slaveOk</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Generally it is recommended to use the <code>&lt;mongo:mongo-client …​ /&gt;</code> and <code>&lt;mongo:client-options …​ /&gt;</code> elements instead of <code>&lt;mongo:mongo …​ /&gt;</code>
 when doing XML based configuration, since those elements will only 
provide you with attributes valid for the 3 generation java driver.</p>
</div>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-xml" data-lang="xml"><span class="pun">&lt;?</span><span class="pln">xml version</span><span class="pun">=</span><span class="str">"1.0"</span><span class="pln"> encoding</span><span class="pun">=</span><span class="str">"UTF-8"</span><span class="pun">?&gt;</span><span class="pln">
</span><span class="tag">&lt;beans</span><span class="pln"> </span><span class="atn">xmlns</span><span class="pun">=</span><span class="atv">"http://www.springframework.org/schema/beans"</span><span class="pln">
	</span><span class="atn">xmlns:xsi</span><span class="pun">=</span><span class="atv">"http://www.w3.org/2001/XMLSchema-instance"</span><span class="pln">
	</span><span class="atn">xmlns:mongo</span><span class="pun">=</span><span class="atv">"http://www.springframework.org/schema/data/mongo"</span><span class="pln">
	</span><span class="atn">xsi:schemaLocation</span><span class="pun">=</span><span class="atv">"http://www.springframework.org/schema/data/mongo http://www.springframework.org/schema/data/mongo/spring-mongo.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span><span class="tag">&gt;</span><span class="pln">

  </span><span class="tag">&lt;mongo:mongo-client</span><span class="pln"> </span><span class="atn">host</span><span class="pun">=</span><span class="atv">"127.0.0.1"</span><span class="pln"> </span><span class="atn">port</span><span class="pun">=</span><span class="atv">"27017"</span><span class="tag">&gt;</span><span class="pln">
    </span><span class="tag">&lt;mongo:client-options</span><span class="pln"> </span><span class="atn">write-concern</span><span class="pun">=</span><span class="atv">"NORMAL"</span><span class="pln"> </span><span class="tag">/&gt;</span><span class="pln">
  </span><span class="tag">&lt;/mongo:mongo-client&gt;</span><span class="pln">

</span><span class="tag">&lt;/beans&gt;</span></code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="mongo.mongo-3.write-concern"><a class="anchor" href="#mongo.mongo-3.write-concern"></a>15.1.2. WriteConcern and WriteConcernChecking</h4>
<div class="paragraph">
<p>The <code>WriteConcern.NONE</code>, which had been used as default by Spring Data MongoDB, was removed in 3.0. Therefore in a MongoDB 3 environment the <code>WriteConcern</code> will be defaulted to <code>WriteConcern.UNACKNOWLEGED</code>. In case <code>WriteResultChecking.EXCEPTION</code> is enabled the <code>WriteConcern</code> will be altered to <code>WriteConcern.ACKNOWLEDGED</code> for write operations, as otherwise errors during execution would not be throw correctly, since simply not raised by the driver.</p>
</div>
</div>
<div class="sect3">
<h4 id="mongo.mongo-3.authentication"><a class="anchor" href="#mongo.mongo-3.authentication"></a>15.1.3. Authentication</h4>
<div class="paragraph">
<p>MongoDB Server generation 3 changed the authentication model when 
connecting to the DB. Therefore some of the configuration options 
available for authentication are no longer valid. Please use the <code>MongoClient</code> specific options for setting credentials via <code>MongoCredential</code> to provide authentication data.</p>
</div>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-java" data-lang="java"><span class="lit">@Configuration</span><span class="pln">
</span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">ApplicationContextEventTestsAppConfig</span><span class="pln"> </span><span class="kwd">extends</span><span class="pln"> </span><span class="typ">AbstractMongoConfiguration</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

  </span><span class="lit">@Override</span><span class="pln">
  </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> getDatabaseName</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> </span><span class="str">"database"</span><span class="pun">;</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">

  </span><span class="lit">@Override</span><span class="pln">
  </span><span class="lit">@Bean</span><span class="pln">
  </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">Mongo</span><span class="pln"> mongo</span><span class="pun">()</span><span class="pln"> </span><span class="kwd">throws</span><span class="pln"> </span><span class="typ">Exception</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">MongoClient</span><span class="pun">(</span><span class="pln">singletonList</span><span class="pun">(</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">ServerAddress</span><span class="pun">(</span><span class="str">"127.0.0.1"</span><span class="pun">,</span><span class="pln"> </span><span class="lit">27017</span><span class="pun">)),</span><span class="pln">
      singletonList</span><span class="pun">(</span><span class="typ">MongoCredential</span><span class="pun">.</span><span class="pln">createCredential</span><span class="pun">(</span><span class="str">"name"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"db"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"pwd"</span><span class="pun">.</span><span class="pln">toCharArray</span><span class="pun">())));</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>In order to use authentication with XML configuration use the <code>credentials</code> attribue on <code>&lt;mongo-client&gt;</code>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre style="" class="prettyprint highlight prettyprinted"><code class="language-xml" data-lang="xml"><span class="pun">&lt;?</span><span class="pln">xml version</span><span class="pun">=</span><span class="str">"1.0"</span><span class="pln"> encoding</span><span class="pun">=</span><span class="str">"UTF-8"</span><span class="pun">?&gt;</span><span class="pln">
</span><span class="tag">&lt;beans</span><span class="pln"> </span><span class="atn">xmlns</span><span class="pun">=</span><span class="atv">"http://www.springframework.org/schema/beans"</span><span class="pln">
	</span><span class="atn">xmlns:xsi</span><span class="pun">=</span><span class="atv">"http://www.w3.org/2001/XMLSchema-instance"</span><span class="pln">
	</span><span class="atn">xmlns:mongo</span><span class="pun">=</span><span class="atv">"http://www.springframework.org/schema/data/mongo"</span><span class="pln">
	</span><span class="atn">xsi:schemaLocation</span><span class="pun">=</span><span class="atv">"http://www.springframework.org/schema/data/mongo http://www.springframework.org/schema/data/mongo/spring-mongo.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span><span class="tag">&gt;</span><span class="pln">

  </span><span class="tag">&lt;mongo:mongo-client</span><span class="pln"> </span><span class="atn">credentials</span><span class="pun">=</span><span class="atv">"user:password@database"</span><span class="pln"> </span><span class="tag">/&gt;</span><span class="pln">

</span><span class="tag">&lt;/beans&gt;</span></code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="mongo.mongo-3.misc"><a class="anchor" href="#mongo.mongo-3.misc"></a>15.1.4. Other things to be aware of</h4>
<div class="paragraph">
<p>This section covers additional things to keep in mind when using the 3.0 driver.</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>IndexOperations.resetIndexCache()</code> is no longer supported.</p>
</li>
<li>
<p>Any <code>MapReduceOptions.extraOption</code> is silently ignored.</p>
</li>
<li>
<p><code>WriteResult</code> does not longer hold error informations but throws an Exception.</p>
</li>
<li>
<p><code>MongoOperations.executeInSession(…)</code> no longer calls <code>requestStart</code> / <code>requestDone</code>.</p>
</li>
<li>
<p>Index name generation has become a driver internal operations, still we use the 2.x schema to generate names.</p>
</li>
<li>
<p>Some Exception messages differ between the generation 2 and 3 servers as well as between <em>MMap.v1</em> and <em>WiredTiger</em> storage engine.</p>
</li>
</ul>
</div>
</div>
</div>
</div>
</div>
<h1 id="appendix" class="sect0"><a class="anchor" href="#appendix"></a>Appendix</h1>
<div class="sect1">
<h2 id="repositories.namespace-reference"><a class="anchor" href="#repositories.namespace-reference"></a>Appendix A: Namespace reference</h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="populator.namespace-dao-config"><a class="anchor" href="#populator.namespace-dao-config"></a>The &lt;repositories /&gt; element</h3>
<div class="paragraph">
<p>The <code>&lt;repositories /&gt;</code> element triggers the setup of the Spring Data repository infrastructure. The most important attribute is <code>base-package</code> which defines the package to scan for Spring Data repository interfaces.<span class="footnote">[<a id="_footnoteref_3" class="footnote" href="#_footnote_3" title="View footnote.">3</a>]</span></p>
</div>
<table class="tableblock frame-all grid-all spread">
<caption class="title">Table 6. Attributes</caption>
<colgroup>
<col style="width: 25%;">
<col style="width: 75%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">Name</th>
<th class="tableblock halign-left valign-top">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>base-package</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Defines
 the package to be used to be scanned for repository interfaces 
extending *Repository (actual interface is determined by specific Spring
 Data module) in auto detection mode. All packages below the configured 
package will be scanned, too. Wildcards are allowed.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>repository-impl-postfix</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Defines
 the postfix to autodetect custom repository implementations. Classes 
whose names end with the configured postfix will be considered as 
candidates. Defaults to <code>Impl</code>.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>query-lookup-strategy</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Determines the strategy to be used to create finder queries. See <a href="#repositories.query-methods.query-lookup-strategies">Query lookup strategies</a> for details. Defaults to <code>create-if-not-found</code>.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>named-queries-location</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Defines the location to look for a Properties file containing externally defined queries.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>consider-nested-repositories</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Controls whether nested repository interface definitions should be considered. Defaults to <code>false</code>.</p></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div class="sect1">
<h2 id="populator.namespace-reference"><a class="anchor" href="#populator.namespace-reference"></a>Appendix B: Populators namespace reference</h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="namespace-dao-config"><a class="anchor" href="#namespace-dao-config"></a>The &lt;populator /&gt; element</h3>
<div class="paragraph">
<p>The <code>&lt;populator /&gt;</code> element allows to populate the a data store via the Spring Data repository infrastructure.<span class="footnote">[<a id="_footnoteref_4" class="footnote" href="#_footnote_4" title="View footnote.">4</a>]</span></p>
</div>
<table class="tableblock frame-all grid-all spread">
<caption class="title">Table 7. Attributes</caption>
<colgroup>
<col style="width: 25%;">
<col style="width: 75%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">Name</th>
<th class="tableblock halign-left valign-top">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>locations</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Where to find the files to read the objects from the repository shall be populated with.</p></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div class="sect1">
<h2 id="repository-query-keywords"><a class="anchor" href="#repository-query-keywords"></a>Appendix C: Repository query keywords</h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="_supported_query_keywords"><a class="anchor" href="#_supported_query_keywords"></a>Supported query keywords</h3>
<div class="paragraph">
<p>The following table lists the keywords generally supported by the 
Spring Data repository query derivation mechanism. However, consult the 
store-specific documentation for the exact list of supported keywords, 
because some listed here might not be supported in a particular store.</p>
</div>
<table class="tableblock frame-all grid-all spread">
<caption class="title">Table 8. Query keywords</caption>
<colgroup>
<col style="width: 25%;">
<col style="width: 75%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">Logical keyword</th>
<th class="tableblock halign-left valign-top">Keyword expressions</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>AND</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>And</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>OR</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Or</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>AFTER</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>After</code>, <code>IsAfter</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>BEFORE</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Before</code>, <code>IsBefore</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>CONTAINING</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Containing</code>, <code>IsContaining</code>, <code>Contains</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>BETWEEN</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Between</code>, <code>IsBetween</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>ENDING_WITH</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>EndingWith</code>, <code>IsEndingWith</code>, <code>EndsWith</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>EXISTS</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Exists</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>FALSE</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>False</code>, <code>IsFalse</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>GREATER_THAN</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>GreaterThan</code>, <code>IsGreaterThan</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>GREATER_THAN_EQUALS</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>GreaterThanEqual</code>, <code>IsGreaterThanEqual</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>IN</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>In</code>, <code>IsIn</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>IS</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Is</code>, <code>Equals</code>, (or no keyword)</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>IS_NOT_NULL</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>NotNull</code>, <code>IsNotNull</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>IS_NULL</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Null</code>, <code>IsNull</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>LESS_THAN</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>LessThan</code>, <code>IsLessThan</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>LESS_THAN_EQUAL</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>LessThanEqual</code>, <code>IsLessThanEqual</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>LIKE</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Like</code>, <code>IsLike</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>NEAR</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Near</code>, <code>IsNear</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>NOT</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Not</code>, <code>IsNot</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>NOT_IN</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>NotIn</code>, <code>IsNotIn</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>NOT_LIKE</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>NotLike</code>, <code>IsNotLike</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>REGEX</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Regex</code>, <code>MatchesRegex</code>, <code>Matches</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>STARTING_WITH</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>StartingWith</code>, <code>IsStartingWith</code>, <code>StartsWith</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>TRUE</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>True</code>, <code>IsTrue</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>WITHIN</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Within</code>, <code>IsWithin</code></p></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div class="sect1">
<h2 id="repository-query-return-types"><a class="anchor" href="#repository-query-return-types"></a>Appendix D: Repository query return types</h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="_supported_query_return_types"><a class="anchor" href="#_supported_query_return_types"></a>Supported query return types</h3>
<div class="paragraph">
<p>The following table lists the return types generally supported by 
Spring Data repositories. However, consult the store-specific 
documentation for the exact list of supported return types, because some
 listed here might not be supported in a particular store.</p>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
Geospatial types like (<code>GeoResult</code>, <code>GeoResults</code>, <code>GeoPage</code>) are only available for data stores that support geospatial queries.
</td>
</tr>
</tbody></table>
</div>
<table class="tableblock frame-all grid-all spread">
<caption class="title">Table 9. Query return types</caption>
<colgroup>
<col style="width: 25%;">
<col style="width: 75%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">Return type</th>
<th class="tableblock halign-left valign-top">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>void</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Denotes no return value.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Primitives</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Java primitives.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Wrapper types</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Java wrapper types.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>T</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">An unique entity. Expects the query method to return one result at most. In case no result is found <code>null</code> is returned. More than one result will trigger an <code>IncorrectResultSizeDataAccessException</code>.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Iterator&lt;T&gt;</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">An <code>Iterator</code>.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Collection&lt;T&gt;</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">A <code>Collection</code>.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>List&lt;T&gt;</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">A <code>List</code>.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Optional&lt;T&gt;</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">A Java 8 or Guava <code>Optional</code>. Expects the query method to return one result at most. In case no result is found <code>Optional.empty()</code>/<code>Optional.absent()</code> is returned. More than one result will trigger an <code>IncorrectResultSizeDataAccessException</code>.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Stream&lt;T&gt;</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">A Java 8 <code>Stream</code>.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Slice</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">A sized chunk of data with information whether there is more data available. Requires a <code>Pageable</code> method parameter.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Page&lt;T&gt;</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">A Slice with additional information, e.g. the total number of results. Requires a <code>Pageable</code> method parameter.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>GeoResult&lt;T&gt;</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">A result entry with additional information, e.g. distance to a reference location.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>GeoResults&lt;T&gt;</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">A list of GeoResult&lt;T&gt; with additional information, e.g. average distance to a reference location.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>GeoPage&lt;T&gt;</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">A Page with GeoResult&lt;T&gt;, e.g. average distance to a reference location.</p></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
<div id="footnotes">
<hr>
<div class="footnote" id="_footnote_1">
<a href="#_footnoteref_1">1</a>. <a href="http://docs.spring.io/spring-data/mongodb/docs/current/reference/html/%7Bspring-framework-docs%7D/beans.html#beans-java">JavaConfig in the Spring reference documentation</a>
</div>
<div class="footnote" id="_footnote_2">
<a href="#_footnoteref_2">2</a>. Spring HATEOAS - <a href="https://github.com/SpringSource/spring-hateoas"></a><a href="https://github.com/SpringSource/spring-hateoas" class="bare">https://github.com/SpringSource/spring-hateoas</a>
</div>
<div class="footnote" id="_footnote_3">
<a href="#_footnoteref_3">3</a>. see <a href="#repositories.create-instances.spring">XML configuration</a>
</div>
<div class="footnote" id="_footnote_4">
<a href="#_footnoteref_4">4</a>. see <a href="#repositories.create-instances.spring">XML configuration</a>
</div>
</div>
<div id="footer">
<div id="footer-text">
Version 1.7.0.RELEASE<br>
Last updated 2015-03-23 11:56:09 MEZ
</div>
</div>
<!-- Begin new Google code - a mod -->
    <script type="text/javascript">
        var _gaq = _gaq || [];
        var pluginUrl = '//www.google-analytics.com/plugins/ga/inpage_linkid.js';
        _gaq.push(
            ['_require', 'inpage_linkid', pluginUrl],
            ['_setAccount', 'UA-2728886-23'],
            ['_trackPageview'],
            ['b._require', 'inpage_linkid', pluginUrl],
            ['b._setAccount', 'UA-2728886-19'],
            ['b._trackPageview']
        );
        (function() {
            var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
            ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
            var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
        })();
    </script>
<!-- End 2nd Google code -->


<script type="text/javascript">

function detectLastFrame() {
   var thisF = this.window;
   var allF = parent.top.frames;
   return allF[allF.length - 1] == thisF; }

// Only inject the following code if this is a normal page or the last // frame of a frameset.
if (parent.top.frames.length == 0 || detectLastFrame()) {
    // Inject the SpringSource search widget too.
    document.write(unescape("%3Cscript src='http://search.springsource.org/widget/searchtool.js' type='text/javascript'%3E%3C/script%3E"));
    // Inject the Eloqua code
    //document.write(unescape("%3Cscript src='/elqNow/elqCfg.js' type='text/javascript'%3E%3C/script%3E"));
    //document.write(unescape("%3Cscript src='/elqNow/elqImg.js' type='text/javascript'%3E%3C/script%3E"));

}
</script><script src="Spring%20Data%20MongoDB%20-%20Reference%20Documentation_files/searchtool.js" type="text/javascript"></script>


<div id="bodyEmptyFiller">&nbsp;</div><div id="searchBar">  <div style="left:-1px;bottom:1px;" id="collapseLink"><a href="javascript:void(0);"><img class="springClass" src="Spring%20Data%20MongoDB%20-%20Reference%20Documentation_files/ArrowLeft_spring.png" border="0"></a></div>  <div id="logoSpan" class="springClass"><a target="_new" href="http://spring.io/"><img class="springClass" src="Spring%20Data%20MongoDB%20-%20Reference%20Documentation_files/Logo_spring_SearchBar.png" border="0"></a></div>  <div id="searchFields">    <input style="color: rgb(204, 204, 204);" name="searchKeys" id="searchKeys" value="Search Documentation" type="text">    <select name="searchWhat" id="searchWhat"><option selected="selected" value="all">all</option><option value="Spring">Spring</option><option value="Grails">Grails</option><option value="Gemstone">Gemstone</option><option value="RabbitMQ">RabbitMQ</option></select>    <img title="Search Documentation" src="Spring%20Data%20MongoDB%20-%20Reference%20Documentation_files/Btn_Search_spring.png" id="searchLens">  </div>  <div id="resultsDiv"></div> <div id="daAd">    <script type="text/javascript"> (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){ (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o), m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m) })(window,document,'script','//www.google-analytics.com/analytics.js','gaPiAd'); gaPiAd('create', 'UA-42481901-1', 'none'); gaPiAd('send', 'event', 'Impression', 'Hibernate with Spring Training - 23 Jun 2015 - Live Online', location.href); var gaPiAdClick_54888a30e5de885210000002 = function() { gaPiAd('send', 'event', 'Click', 'Hibernate with Spring Training - 23 Jun 2015 - Live Online', location.href) }; </script><div class="PivotalAdBannerDiv"> <style> /* custom banner style placeholder */ /* #gaPiAdDivId_54888a30e5de885210000002 { } */ </style> <a style="text-decoration:none;" onclick="gaPiAdClick_54888a30e5de885210000002();" href="http://mylearn.vmware.com/gateway/?credits=0&amp;course=248296" target="_new"> <div id="gaPiAdDivId_54888a30e5de885210000002" class="S2UniGeoipBanner">   <span class="S2GPcourse_name">Hibernate with Spring Training</span>   <span class="S2GPcity">Live Online, </span>   <span class="S2GPstart_date">23 Jun 2015</span>   <span class="learn-more-button">Learn More</span> </div></a> </div>      </div></div></body></html>